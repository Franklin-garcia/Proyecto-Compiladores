package proyectocompi;

import java_cup.runtime.Symbol;

parser code
{:
    public static Node raiz;
    private Symbol s;

    public void syntax_error(Symbol s){
        this.s=s;
    }

    public Symbol getS(){
        return this.s;
    }
:};

terminal Num, Bool, Cadena, Newline, Parizq, Parder, Coma,Punto, End, Write, Read, SumaResta, MultDiv, Igual, OpRel,OpRel2, Ampersand, 
If, Then, Else, ElseIf, For, To, Next, Step, Do, While, Loop, ByVal, Function, Sub, Structure, Module,
TypeBoolean, TypeInteger, TypeString, Dim, As, Id, ContString, Error,EndIf;

non terminal INICIO, CONTENIDO, PROCEDIMIENTO, PROCEDIMIENTO_ST, PARAMS, VAR_TIPOS, BODY, STRUCT_BODY, M_PARAMS, CONDICION, IF_BODY, CONCAT, ASIG_VAR, 
OP_AR, T, F,Y,Z, SENT_CONCAT, IDS,FUNCTION,SUB,STRUCTURE,DIM,FOR,FOR_STEP,IF,DO_WHILE,WRITE,DIM_READ,CONCATENAR,ASIGN,ELSE,ASIG_STRUCT,VALUE;

precedence left SumaResta;
precedence left MultDiv;

start with INICIO;
INICIO ::= 
    CONTENIDO:c {:
        Syntax.raiz=(Node)c;
    :}
;
CONTENIDO ::=
    Module Id:i Newline PROCEDIMIENTO_ST:p End Module
    {: Node Contenido = new Node("Contenido");
                            Contenido.addNode(new Node("Id", ((String) i)));
                            Contenido.addNode(p);
                            RESULT=Contenido;
     :} 
    |
;

PROCEDIMIENTO_ST ::=
    PROCEDIMIENTO:p1 Newline PROCEDIMIENTO_ST:p2 
    {:
    Node Procedimientos = new Node("Procedimientos");
                            Procedimientos.addNode(p1);
                            Procedimientos.addNode(p2);
                            RESULT=Procedimientos;
    :}
    |
    PROCEDIMIENTO:p1 Newline
    {:
    Node Procedimientos = new Node("Procedimientos");
                            Procedimientos.addNode(p1);
                            RESULT=Procedimientos;
    :}
;

PROCEDIMIENTO ::=
    FUNCTION:f
    {:
    Node Procedimiento = new Node("Procedimiento");
                            Procedimiento.addNode(f);
                            RESULT=Procedimiento;
    :}
    |SUB:s
    {:
    Node Procedimiento = new Node("Procedimiento");
                            Procedimiento.addNode(s);
                            RESULT=Procedimiento;
    :}
    |STRUCTURE:st
    {:
    Node Procedimiento = new Node("Procedimiento");
                            Procedimiento.addNode(st);
                            RESULT=Procedimiento;
    :}
;
FUNCTION::=
    Function Id:i Parizq PARAMS:p1 Parder As VAR_TIPOS:v Newline BODY:b End Function
    {:
    Node Function = new Node("Function");
                            Function.addNode(new Node("Id", ((String) i),iright,ileft));
                            Function.addNode(p1);
                            Function.addNode(v);
                            Function.addNode(b);
                            RESULT=Function;
    :}
    |
    Function Id:i Parizq Parder As VAR_TIPOS:v Newline BODY:b End Function
    {:
    Node Function = new Node("Function");
                            Function.addNode(new Node("Id", ((String) i),iright,ileft));
                            Function.addNode(v);
                            Function.addNode(b);
                            RESULT=Function;
    :}
;
SUB::=
    Sub Id:i Parizq PARAMS:p1 Parder Newline BODY:b End Sub
    {:
    Node Sub = new Node("Sub");
                            Sub.addNode(new Node("Id", ((String) i)));
                            Sub.addNode(p1);
                            Sub.addNode(b);
                            RESULT=Sub;
    :}
    |
    Sub Id:i Parizq Parder Newline BODY:b End Sub 
        {:
    Node Sub = new Node("Sub");
                            Sub.addNode(new Node("Id", ((String) i)));
                            Sub.addNode(b);
                            RESULT=Sub;
    :}
;

STRUCTURE::=
    Structure Id:i Newline STRUCT_BODY:sb End Structure
    {:
    Node Procedimiento = new Node("Structure");
                            Procedimiento.addNode(new Node("Id", ((String) i)));
                            Procedimiento.addNode(sb);
                            RESULT=Procedimiento;
    :}
;

VAR_TIPOS ::=
    TypeBoolean:t 
    {:
    Node Tipo=new Node("Boolean", ((String) t) );
                             RESULT=Tipo;
    :}
    |
    TypeInteger:t 
    {:
    Node Tipo = new Node("Integer", ((String) t) );
                            RESULT=Tipo;
    :}
    |
    TypeString:t
    {:
    Node Tipo = new Node("String", ((String) t) );
                            RESULT=Tipo;
    :}
;

PARAMS ::=
    ByVal Id:i As VAR_TIPOS:v 
    {:
    Node Parametros = new Node("Param");
                            Parametros.addNode(new Node("Id", ((String) i),iright,ileft));
                            Parametros.addNode(v);
                            RESULT=Parametros;
    :}    
    |
    ByVal Id:i As VAR_TIPOS:v Coma PARAMS:m
    {:
    Node Parametro = new Node("Param");
                            Parametro.addNode(new Node("Id", ((String) i),iright,ileft));
                            Parametro.addNode(v);
                            Parametro.addNode(m);
                            RESULT=Parametro;
    :}
;


BODY ::= 
    BODY:b DIM:c
    {:
    Node Body = new Node("Code");
                            Body.addNode(b);
                            Body.addNode(c);
                            RESULT=Body;
    :}
    |DIM:c
    {:
    Node Body = new Node("Code");
                            Body.addNode(c);
                            RESULT=Body;
    :}
    |
    BODY:b ASIG_STRUCT:c
    {:
    Node Body = new Node("Code");
                            Body.addNode(b);
                            Body.addNode(c);
                            RESULT=Body;
    :}
    |
    ASIG_STRUCT:c
    {:
    Node Body = new Node("Code");
                            Body.addNode(c);
                            RESULT=Body;
    :}
    |
    BODY:b FOR:c
    {:
    Node Body = new Node("Code");
                            Body.addNode(b);
                            Body.addNode(c);
                            RESULT=Body;
    :}
    |FOR:c
    {:
    Node Body = new Node("Code");
                            Body.addNode(c);
                            RESULT=Body;
    :}
    |BODY:b FOR_STEP:c
    {:
    Node Body = new Node("Code");
                            Body.addNode(b);
                            Body.addNode(c);
                            RESULT=Body;
    :}
    |FOR_STEP:c
    {:
    Node Body = new Node("Code");
                            Body.addNode(c);
                            RESULT=Body;
    :}
    |BODY:b IF:c EndIf Newline
    {:
    Node Body = new Node("Code");
                            Body.addNode(b);
                            Body.addNode(c);
                            RESULT=Body;
    :}
    |IF:c EndIf Newline
    {:
    Node Body = new Node("Code");
                            Body.addNode(c);
                            RESULT=Body;
    :}
    |BODY:b IF:c ELSE:e EndIf Newline
    {:
    Node Body = new Node("Code");
                            Body.addNode(b);
                            Body.addNode(c);
                            Body.addNode(e);
                            RESULT=Body;
    :}
    |IF:c ELSE:e EndIf Newline
    {:
    Node Body = new Node("Code");
                            Body.addNode(c);
                            Body.addNode(e);
                            RESULT=Body;
    :}
    |BODY:b DO_WHILE:c
    {:
    Node Body = new Node("Code");
                            Body.addNode(b);
                            Body.addNode(c);
                            RESULT=Body;
    :}
    |DO_WHILE:c
    {:
    Node Body = new Node("Code");
                            Body.addNode(c);
                            RESULT=Body;
    :}
    |BODY:b WRITE:c
    {:
    Node Body = new Node("Code");
                            Body.addNode(b);
                            Body.addNode(c);
                            RESULT=Body;
    :}
    |WRITE:c
    {:
    Node Body = new Node("Code");
                            Body.addNode(c);
                            RESULT=Body;
    :}
    |BODY:b DIM_READ:c
    {:
    Node Body = new Node("Code");
                            Body.addNode(b);
                            Body.addNode(c);
                            RESULT=Body;
    :}
    |DIM_READ:c
    {:
    Node Body = new Node("Code");
                            Body.addNode(c);
                            RESULT=Body;
    :}
    |BODY:b CONCAT:c Newline
    {:
    Node Body = new Node("Code");
                            Body.addNode(b);
                            Body.addNode(c);
                            RESULT=Body;
    :}
    |CONCAT:c Newline
    {:
    Node Body = new Node("Code");
                            Body.addNode(c);
                            RESULT=Body;
    :}
    |BODY:b ASIG_VAR:c
    {:
    Node Body = new Node("Code");
                            Body.addNode(b);
                            Body.addNode(c);
                            RESULT=Body;
    :}
    |ASIG_VAR:c
    {:
    Node Body = new Node("Code");
                            Body.addNode(c);
                            RESULT=Body;
    :}
;

DIM::=
    Dim Id:i As VAR_TIPOS:v Newline
    {:
    Node Body1 = new Node("Dim");
                            Body1.addNode(new Node("Id", ((String) i), iright,ileft));
                            Body1.addNode(v);
                            RESULT=Body1;
    :}
    |
    Dim Id:i As Id:v Newline
    {:
    Node Body1 = new Node("Dim");
                            Body1.addNode(new Node("Id", ((String) i), iright,ileft));
                            Body1.addNode(new Node("Id", ((String) v), vright,vleft));
                            RESULT=Body1;
    :}
;

FOR::=
    For Id:i Igual:s Num:n1 To Num:n2 Newline BODY:b1 Next Newline
    {:
    Node Body2 = new Node("For");
                            Body2.addNode(new Node("Id", ((String) i), iright,ileft));
                            Body2.addNode(new Node("Igual", ((String) s)));
                            Body2.addNode(new Node("Integer", ((String) n1), iright,ileft));
                            Body2.addNode(new Node("Integer", ((String) n2), iright,ileft));
                            Body2.addNode(b1);
                            RESULT=Body2;
    :}
;

FOR_STEP::=
    For Id:i Igual:s Num:n1 To Num:n2 Step Num:n3 Newline BODY:b1 Next Newline
    {:
    Node Body3 = new Node("For-step");
                            Body3.addNode(new Node("Id", ((String) i), iright,ileft));
                            Body3.addNode(new Node("Igual", ((String) s)));
                            Body3.addNode(new Node("Integer", ((String) n1), iright,ileft));
                            Body3.addNode(new Node("Integer", ((String) n2), iright,ileft));
                            Body3.addNode(new Node("Integer", ((String) n3), iright,ileft));
                            Body3.addNode(b1);
                            RESULT=Body3;
    :}
;

IF::=
    If CONDICION:c Then Newline BODY:b1
    {:
    Node Body4 = new Node("If");
                            Body4.addNode(c);
                            Body4.addNode(b1);
                            RESULT=Body4;
    :}
;

ELSE::=
    Else Newline BODY:b 
    {:
    Node Else = new Node("Else");
                            Else.addNode(b);
                            RESULT=Else;
    :}
    |
    ElseIf CONDICION:c Then Newline BODY:b 
    {:
    Node Else = new Node("Else_if");
                            Else.addNode(c);
                            Else.addNode(b);
                            RESULT=Else;
    :}
;
   
DO_WHILE::=
    Do While CONDICION:c Newline BODY:b1 Loop Newline
    {:
    Node Body5 = new Node("Do-While");
                            Body5.addNode(c);
                            Body5.addNode(b1);
                            RESULT=Body5;
    :}
;

DIM_READ::=
    Dim Id:i As VAR_TIPOS:v Igual:s Read Parizq Parder Newline
    {:
    Node Body6 = new Node("Dim-read");
                            Body6.addNode(new Node("Id", ((String) i)));
                            Body6.addNode(v);
                            Body6.addNode(new Node("Igual", ((String) s)));
                            RESULT=Body6;
    :}

;

WRITE::=
    Write Parizq Num:n1 Parder Newline 
    {:
    Node Body7 = new Node("Write");
                            Body7.addNode(new Node("Integer", ((String) n1)));
                            RESULT=Body7;
    :}
    |
    Write Parizq Id:i Parder Newline
    {:
    Node Body7 = new Node("Write");
                            Body7.addNode(new Node("Id", ((String) i), iright,ileft));
                            RESULT=Body7;
    :}
;


STRUCT_BODY ::=
    Id:i As VAR_TIPOS:v Newline 
    {:
    Node SBody = new Node("Struct-body");
                            SBody.addNode(new Node("Id", ((String) i),iright,ileft));
                            SBody.addNode(v);
                            RESULT=SBody;
    :}
    |
    Id:i As VAR_TIPOS:v Newline STRUCT_BODY:sb
    {:
    Node SBody = new Node("Struct-body");
                            SBody.addNode(new Node("Id", ((String) i),iright,ileft));
                            SBody.addNode(v);
                            SBody.addNode(sb);
                            RESULT=SBody;
    :}

;

CONDICION ::=
    Z:z1 OpRel:o Z:z2
    {:
    Node Condicion = new Node("Condicion");
                            Condicion.addNode(z1);
                            Condicion.addNode(new Node("OP_RELA", ((String) o)));
                            Condicion.addNode(z2);
                            RESULT=Condicion;
    :}
    |Y:y
    {:
    Node Condicion = new Node("Condicion");
                            Condicion.addNode(y);
                            RESULT=Condicion;
    :}
;

Y::=
    Z:z1 OpRel2:o Z:z2
    {:
    Node Condicion2 = new Node("Condicion-I");
                            Condicion2.addNode(z1);
                            Condicion2.addNode(new Node("OP_RELA", ((String) o)));
                            Condicion2.addNode(z2);
                            RESULT=Condicion2;
    :}
;
 

Z::=
    Num:n
    {:
    Node Valor=new Node("Integer", ((String) n),nright,nleft);
                          RESULT=Valor;
    :}
    |
    Id:i 
    {:
    Node Valor=new Node("Id", ((String) i),iright,ileft);
                           RESULT=Valor;
    :}
;
   
OP_AR ::=
    OP_AR:o SumaResta:s T:t 
    {:
    Node Operacion = new Node("Operacion");
                            Operacion.addNode(o);
                            Operacion.addNode(new Node("SumaResta", ((String) s)));
                            Operacion.addNode(t);
                            RESULT=Operacion;
    :}
    |
    T:t
    {:
    Node Operacion = new Node("Operacion");
                            Operacion.addNode(t);
                            RESULT=Operacion;
    :}
;

T ::=
    T:t MultDiv:m F:f 
    {:
    Node Oper2 = new Node("MultDiv");
                            Oper2.addNode(t);
                            Oper2.addNode(new Node("MultDiv", ((String) m)));
                            Oper2.addNode(f);
                            RESULT=Oper2;
    :}
    |
    F:f
    {:
    Node Oper2 = new Node("Valor");
                            Oper2.addNode(f);
                            RESULT=Oper2;
    :}
;

F ::= 
    Num:n
    {:
    Node Valor=new Node("Integer", ((String) n),nright,nleft);
                           RESULT=Valor;
    :}
    |
    Id:i 
    {:
    Node Valor=new Node("Id", ((String) i),iright,ileft);
                           RESULT=Valor;
    :}
    |
    Parder OP_AR:o Parizq
    {:
    Node Valor=new Node("oper");
                           Valor.addNode(o);
                           RESULT=Valor;
    :}
;

IDS ::=
    Id:i Coma IDS:id 
    {:
    Node Ids = new Node("Argu");
                            Ids.addNode(new Node("Id", ((String) i)));
                            Ids.addNode(id);
                            RESULT=Ids;
    :}
    |
    Num:n Coma IDS:id 
    {:
    Node Ids = new Node("Argu");
                            Ids.addNode(new Node("Integer", ((String) n)));
                            Ids.addNode(id);
                            RESULT=Ids;
    :}
    |
    Cadena:n Coma IDS:id 
    {:
    Node Ids = new Node("Argu");
                            Ids.addNode(new Node("String", ((String) n)));
                            Ids.addNode(id);
                            RESULT=Ids;
    :}
    |
    Bool:n Coma IDS:id 
    {:
    Node Ids = new Node("Argu");
                            Ids.addNode(new Node("Boolean", ((String) n)));
                            Ids.addNode(id);
                            RESULT=Ids;
    :}
    |
    Id:i 
    {:
    Node Ids = new Node("Argu");
                            Ids.addNode(new Node("Id", ((String) i)));
                            RESULT=Ids;
    :}
    |
    Num:n
    {:
    Node Ids = new Node("Argu");
                            Ids.addNode(new Node("Integer", ((String) n)));
                            RESULT=Ids;
    :}
    |
    Cadena:n
    {:
    Node Ids = new Node("Argu");
                            Ids.addNode(new Node("String", ((String) n)));
                            RESULT=Ids;
    :}
    |
    
    Bool:n
    {:
    Node Ids = new Node("Argu");
                            Ids.addNode(new Node("Boolean", ((String) n)));
                            RESULT=Ids;
    :}
;


CONCAT ::=
    Id:i1 Igual:s Id:i2 SENT_CONCAT:sc
    {:
    Node Concat = new Node("Concat");
                            Concat.addNode(new Node("Id", ((String) i1),i1right,i1left));
                            Concat.addNode(new Node("Igual", ((String) s)));
                            Concat.addNode(new Node("Id", ((String) i2),i2right,i2left));
                            Concat.addNode(sc);
                            RESULT=Concat;
    :}
    |
    Id:i1 Igual:s Cadena:ca SENT_CONCAT:sc
    {:
    Node Concat = new Node("Concat");
                            Concat.addNode(new Node("Id", ((String) i1),i1right,i1left));
                            Concat.addNode(new Node("Igual", ((String) s)));
                            Concat.addNode(new Node("String", ((String) ca)));
                            Concat.addNode(sc);
                            RESULT=Concat;
    :}
;

SENT_CONCAT ::=
    Ampersand Id:i1 SENT_CONCAT:sc 
    {:
    Node SConcat = new Node("Sent-concat");
                            SConcat.addNode(new Node("Id", ((String) i1),i1right,i1left));
                            SConcat.addNode(sc);
                            RESULT=SConcat;
    :}
    |
    Ampersand Cadena:cs SENT_CONCAT:sc 
    {:
    Node SConcat = new Node("Sent-concat");
                            SConcat.addNode(new Node("ContString", ((String) cs)));
                            SConcat.addNode(sc);
                            RESULT=SConcat;
    :}
    |
    Ampersand Id:i1 
    {:
    Node SConcat = new Node("Sent-concat");
                            SConcat.addNode(new Node("Id", ((String) i1),i1right,i1left));
                            RESULT=SConcat;
    :}
    |
    Ampersand Cadena:cs
    {:
    Node SConcat = new Node("Sent-concat");
                            SConcat.addNode(new Node("ContString", ((String) cs)));
                            RESULT=SConcat;
    :}
;

ASIG_VAR ::=
    Id:i Igual:s OP_AR:o Newline 
    {:
    Node AsigVar = new Node("Asignar-var");
                            AsigVar.addNode(new Node("Id", ((String) i),iright,ileft));
                            AsigVar.addNode(new Node("Igual", ((String) s)));
                            AsigVar.addNode(o);
                            RESULT=AsigVar;
    :}
    |
    Id:i1 Igual:s Id:i2 Parizq Parder Newline 
    {:
    Node AsigVar = new Node("Asignar-var");
                            AsigVar.addNode(new Node("Id", ((String) i1),i1right,i1left));
                            AsigVar.addNode(new Node("Igual", ((String) s)));
                            AsigVar.addNode(new Node("Id", ((String) i2),i2right,i2left));
                            RESULT=AsigVar;
    :}    
    |
    Id:i1 Igual:s Id:i2 Parizq IDS:id Parder Newline
    {:
    Node AsigVar = new Node("Asignar-var");
                            AsigVar.addNode(new Node("Id", ((String) i1),i1right,i1left));
                            AsigVar.addNode(new Node("Igual", ((String) s)));
                            AsigVar.addNode(new Node("Id", ((String) i2),i2right,i2left));
                            AsigVar.addNode(id);
                            RESULT=AsigVar;
    :}
    |Id:i Igual:s Bool:b Newline
    {:
    Node AsigVar = new Node("Asignar-var");
                            AsigVar.addNode(new Node("Id", ((String) i),iright,ileft));
                            AsigVar.addNode(new Node("Igual", ((String) s)));
                            AsigVar.addNode(new Node("Boolean", ((String) b)));
                            RESULT=AsigVar;
    :}
    |Id:i Igual:s Cadena:c Newline
     {:
    Node AsigVar = new Node("Asignar-var");
                            AsigVar.addNode(new Node("Id", ((String) i),iright,ileft));
                            AsigVar.addNode(new Node("Igual", ((String) s)));
                            AsigVar.addNode(new Node("String", ((String) c)));
                            RESULT=AsigVar;
    :}
;

    ASIG_STRUCT::=
        Id:i1 Punto Id:i2 Igual:s VALUE:v Newline
        {:
         Node AsigVars = new Node("Asignar-varS1");
                            AsigVars.addNode(new Node("Id", ((String) i1),i1right,i1left));
                            AsigVars.addNode(new Node("Id", ((String) i2),i2right,i2left));
                            AsigVars.addNode(new Node("Igual", ((String) s)));
                            AsigVars.addNode(v);
                            RESULT=AsigVars;
         :}
        |
        Id:i1 Igual:s Id:i2 Punto Id:i3 Newline
        {:
         Node AsigVars = new Node("Asignar-varS2");
                            AsigVars.addNode(new Node("Id", ((String) i1),i1right,i1left));
                            AsigVars.addNode(new Node("Igual", ((String) s)));
                            AsigVars.addNode(new Node("Id", ((String) i2),i2right,i2left));
                            AsigVars.addNode(new Node("Id", ((String) i3),i3right,i3left));
                            RESULT=AsigVars;
         :}
;

    VALUE::=
        Id:i
        {:
        Node Value=new Node("Id", ((String) i),iright,ileft);
                           RESULT=Value;
        :}
        |
        Bool:i
        {:
        Node Value=new Node("Boolean", ((String) i),iright,ileft);
                           RESULT=Value;
        :}
        |
        Cadena:i
        {:
        Node Value=new Node("String", ((String) i),iright,ileft);
                           RESULT=Value;
        :}
        |
        Num:i
        {:
        Node Value=new Node("Integer", ((String) i),iright,ileft);
                           RESULT=Value;
        :}
;