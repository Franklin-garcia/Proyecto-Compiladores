package proyectocompi;

import java_cup.runtime.Symbol;
import java.util.LinkedList;

parser code
{:
    public static Symbol found;
    public static Node raiz;
    public static LinkedList<String> Errores = new LinkedList<String>();
    private Symbol s;

    public Symbol getS(){
        return this.s;
    }

    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        found = (Symbol)info;
        StringBuilder m = new StringBuilder("Error Sintactico");
        if (info instanceof java_cup.runtime.Symbol) {
            if (found.left >= 0) {                
                if (found.right >= 0)
                    m.append(", linea "+(found.right+1));
            }
        }
        m.append(" : "+message);
        System.err.println(m);
        Syntax.Errores.add(m.toString());

    }
   

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);

    }

    public static void Contenido_Error(){
        switch(found.sym){
            case sym.Newline: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Module \n");
                break;
            case sym.End: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Procedimiento \n");
                break;
            case sym.Module: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: End \n");
                break;
            default:
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Contenido \n");
                break;
        }
        Syntax.Errores.add("[Contenido_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }

    public static void ProcedimientoST_Error(){
        switch(found.sym){
            case sym.Newline: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Un procedimiento \n");
                break;
            default:
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: ; o proposicion \n");
                break;
        }
        Syntax.Errores.add("[ProcedientoST_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }

    public static void Procedimiento_Error(){
        switch(found.sym){
            default:
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Procedimiento \n");
                break;
        }
        Syntax.Errores.add("[Procedimiento_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }

    public static void Function_Error(){
        switch(found.sym){
            case sym.Id: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Function \n");
                break;
            case sym.Parizq: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Identificador \n");
                break;
            case sym.Parder: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Parametro o ( \n");
                break;
            case sym.As: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Cierre de parentesis \n");
                break;
            case sym.Newline: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Tipo de Variable \n");
                break;
            case sym.End: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Se espereaba el cuerpo de la funcion \n");
                break;
            case sym.Function: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: End \n");
                break;
            default:
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Function \n");
                break;
        }
        Syntax.Errores.add("[Function_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }

    public static void Sub_Error(){
        switch(found.sym){
            case sym.Id: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Sub \n");
                break;
            case sym.Parizq: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Identificador \n");
                break;
            case sym.Parder: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Parametro o ( \n");
                break;
            case sym.Newline: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: ) \n");
                break;
            case sym.End: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Se espereaba el cuerpo de Sub \n");
                break;
            case sym.Sub: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: End \n");
                break;
            default:
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Sub \n");
                break;
        }
        Syntax.Errores.add("[Sub_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }

public static void Structure_Error(){
        switch(found.sym){
            case sym.Id: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Structure \n");
                break;
            case sym.Newline: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Identificardor \n");
                break;
            case sym.End: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Cuerpo de estructura \n");
                break;
            case sym.Structure: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: End \n");
                break;
            default:
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: ; o proposicion \n");
                break;
        }
        Syntax.Errores.add("[Structure_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }


public static void Params_Error(){
        switch(found.sym){
            case sym.Id: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: ByVal \n");
                break;
            case sym.As: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Identificador \n");
                break;
            case sym.Coma: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Tipo de Variable \n");
                break;
            default:
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Parametro \n");
                break;
        }
        Syntax.Errores.add("[Parameter_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }

public static void Dim_Error(){
        switch(found.sym){
            case sym.Id: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Dim \n");
                break;
            case sym.As: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Identificador \n");
                break;
            case sym.Newline: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Tipo dee variable o Id \n");
                break;
            default:
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Dim \n");
                break;
        }
        Syntax.Errores.add("[Dim_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }

public static void For_Error(){
        switch(found.sym){
            case sym.Id: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: For \n");
                break;
            case sym.Igual: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Id \n");
                break;
            case sym.Num: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: = o To \n");
                break;
            case sym.To: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Num \n");
                break;
            case sym.Next: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Cuerpo del For \n");
                break;
            case sym.Newline: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Next \n");
                break;
            default:
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: For \n");
                break;
        }
        Syntax.Errores.add("For_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }

public static void ForStep_Error(){
        switch(found.sym){
            case sym.Id: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: For \n");
                break;
            case sym.Igual: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Id \n");
                break;
            case sym.Num: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: = o To \n");
                break;
            case sym.To: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Num \n");
                break;
            case sym.Next: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Cuerpo del For \n");
                break;
            case sym.Step: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Num \n");
                break;
            case sym.Newline: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Num o Cuerpo de for \n");
                break;
            default:
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: ; o proposicion \n");
                break;
        }
        Syntax.Errores.add("[ForStep_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }

    public static void If_Error(){
        switch(found.sym){
            case sym.Then: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Condicion \n");
                break;
            case sym.Newline: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Then \n");
                break;
            default:
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: If \n");
                break;
        }
        Syntax.Errores.add("[If_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }

    public static void Else_Error(){
        switch(found.sym){
            case sym.Newline: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Else o Then \n");
                break;
            case sym.Then: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Condicion \n");
                break;
            default:
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Else \n");
                break;
        }
        Syntax.Errores.add("[Else_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }

    public static void DoWhile_Error(){
        switch(found.sym){
            case sym.Newline: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Condicion o Loop \n");
                break;
            case sym.While: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Do \n");
                break;
            case sym.Loop: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Body \n");
                break;
            default:
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: ; Do while \n");
                break;
        }
        Syntax.Errores.add("[While_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }

    public static void DimRead_Error(){
        switch(found.sym){
            case sym.Newline: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: ) \n");
                break;
            case sym.Id: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Dim \n");
                break;
            case sym.As : 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Id \n");
                break;
            case sym.Igual: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Tipo de Variable \n");
                break;
            case sym.Read: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: = \n");
                break;
            case sym.Parizq: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Read \n");
                break;
            case sym.Parder: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: ( \n");
                break;
            default:
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Dim Read \n");
                break;
        }
        Syntax.Errores.add("[DimRead_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }

    public static void Write_Error(){
        switch(found.sym){
            case sym.Parizq: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Write \n");
                break;
            case sym.Num: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: ( \n");
                break;
            case sym.Parder: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Numero \n");
                break;
            case sym.Newline: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: ) \n");
                break;   
            default:
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Write \n");
                break;
        }
        Syntax.Errores.add("[Write_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }

    public static void Ids_Error(){
        switch(found.sym){
            case sym.Coma: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Valor \n");
                break;
            default:
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Ids \n");
                break;
        }
        Syntax.Errores.add("[Ids_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }

    public static void StructBody_Error(){
        switch(found.sym){
            case sym.Newline: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Tipo de Variable \n");
                break;
            case sym.As: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Identificador \n");
                break;
            default:
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: ; o proposicion \n");
                break;
        }
        Syntax.Errores.add("[StructBody_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
    public static void AsigStruct_Error(){
        switch(found.sym){
            case sym.Newline: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Valor o Identificador \n");
                break;
            case sym.Igual: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Identificador \n");
                break;
            case sym.Id: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: . o = \n");
                break;
            case sym.Punto: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Identificador \n");
                break;
            default:
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Struct Asignacion \n");
                break;
        }
        Syntax.Errores.add("[AsigStruct_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
    public static void AsigVar_Error(){
        switch(found.sym){
            case sym.Newline: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Operador Relacional o ) \n");
                break;
            case sym.Igual: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Identificador \n");
                break;
            case sym.Id: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: = \n");
                break;
            case sym.Parizq: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Identificador \n");
                break;
            case sym.Parder: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: ( \n");
                break;
            case sym.Bool: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: = \n");
                break;
            case sym.Cadena: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: = \n");
                break;
            default:
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: AsigVar \n");
                break;
        }
        Syntax.Errores.add("[AsigVar_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
    public static void SentConcat_Error(){
        switch(found.sym){
            case sym.Newline: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: & \n");
                break;
            case sym.Id: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: & \n");
                break;
            case sym.Cadena: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: & \n");
                break;
            default:
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: SentConcat \n");
                break;
        }
        Syntax.Errores.add("[SentConcat_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }

    public static void Concat_Error(){
        switch(found.sym){
            case sym.Igual: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Id \n");
                break;
            case sym.Cadena: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: = \n");
                break;
            case sym.Id: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: = \n");
                break;
            default:
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Concat \n");
                break;
        }
        Syntax.Errores.add("[Concat_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
    
:};

terminal Num, Bool, Cadena, Newline, Parizq, Parder, Coma,Punto, End, Write, Read, SumaResta, MultDiv, Igual, OpRel,OpRel2, Ampersand, Ampersand2, 
If, Then, Else, ElseIf, For, To, Next, Step, Do, While, Loop, ByVal, Function, Sub, Structure, Module,
TypeBoolean, TypeInteger, TypeString, Dim, As, Id, ContString, Error,EndIf;

non terminal INICIO, CONTENIDO, PROCEDIMIENTO, PROCEDIMIENTO_ST, PARAMS, VAR_TIPOS, BODY, STRUCT_BODY, M_PARAMS, CONDICION, IF_BODY, CONCAT, ASIG_VAR, 
OP_AR, T, F,Y,Z, SENT_CONCAT, IDS,FUNCTION,SUB,STRUCTURE,DIM,FOR,FOR_STEP,IF,DO_WHILE,WRITE,DIM_READ,CONCATENAR,ASIGN,ELSE,ASIG_STRUCT,VALUE;

precedence left SumaResta;
precedence left MultDiv;

start with INICIO;
INICIO ::= 
    CONTENIDO:c {:
        Syntax.raiz=(Node)c;
    :}
;
CONTENIDO ::=
    Module Id:i Newline PROCEDIMIENTO_ST:p End Module
    {: Node Contenido = new Node("Contenido");
                            Contenido.addNode(new Node("Id", ((String) i)));
                            Contenido.addNode(p);
                            RESULT=Contenido;
     :} 
    | error {:System.out.println("Contenido"); Syntax.Contenido_Error(); :}
;

PROCEDIMIENTO_ST ::=
    PROCEDIMIENTO:p1 Newline PROCEDIMIENTO_ST:p2 
    {:
    Node Procedimientos = new Node("Procedimientos");
                            Procedimientos.addNode(p1);
                            Procedimientos.addNode(p2);
                            RESULT=Procedimientos;
    :}
    |
    PROCEDIMIENTO:p1 Newline
    {:
    Node Procedimientos = new Node("Procedimientos");
                            Procedimientos.addNode(p1);
                            RESULT=Procedimientos;
    :}
    | error {:System.out.println("ProcedimientoST"); Syntax.ProcedimientoST_Error(); :}
;

PROCEDIMIENTO ::=
    FUNCTION:f
    {:
    Node Procedimiento = new Node("Procedimiento");
                            Procedimiento.addNode(f);
                            RESULT=Procedimiento;
    :}
    |SUB:s
    {:
    Node Procedimiento = new Node("Procedimiento");
                            Procedimiento.addNode(s);
                            RESULT=Procedimiento;
    :}
    |STRUCTURE:st
    {:
    Node Procedimiento = new Node("Procedimiento");
                            Procedimiento.addNode(st);
                            RESULT=Procedimiento;
    :}
;
FUNCTION::=
    Function Id:i Parizq PARAMS:p1 Parder As VAR_TIPOS:v Newline BODY:b End Function
    {:
    Node Function = new Node("Function");
                            Function.addNode(new Node("Id", ((String) i),iright,ileft));
                            Function.addNode(p1);
                            Function.addNode(v);
                            Function.addNode(b);
                            RESULT=Function;
    :}
    |
    Function Id:i Parizq Parder As VAR_TIPOS:v Newline BODY:b End Function
    {:
    Node Function = new Node("Function");
                            Function.addNode(new Node("Id", ((String) i),iright,ileft));
                            Function.addNode(v);
                            Function.addNode(b);
                            RESULT=Function;
    :}
    | Function error {:System.out.println("Function"); Syntax.Function_Error(); :}
;
SUB::=
    Sub Id:i Parizq PARAMS:p1 Parder Newline BODY:b End Sub
    {:
    Node Sub = new Node("Sub");
                            Sub.addNode(new Node("Id", ((String) i)));
                            Sub.addNode(p1);
                            Sub.addNode(b);
                            RESULT=Sub;
    :}
    |
    Sub Id:i Parizq Parder Newline BODY:b End Sub 
        {:
    Node Sub = new Node("Sub");
                            Sub.addNode(new Node("Id", ((String) i)));
                            Sub.addNode(b);
                            RESULT=Sub;
    :}
    | Sub error {:System.out.println("Sub"); Syntax.Sub_Error(); :}
;

STRUCTURE::=
    Structure Id:i Newline STRUCT_BODY:sb End Structure
    {:
    Node Procedimiento = new Node("Structure");
                            Procedimiento.addNode(new Node("Id", ((String) i),iright,ileft));
                            Procedimiento.addNode(sb);
                            RESULT=Procedimiento;
    :}
    | Structure error {:System.out.println("Structure"); Syntax.Structure_Error(); :}
;

VAR_TIPOS ::=
    TypeBoolean:t 
    {:
    Node Tipo=new Node("Boolean", ((String) t) );
                             RESULT=Tipo;
    :}
    |
    TypeInteger:t 
    {:
    Node Tipo = new Node("Integer", ((String) t) );
                            RESULT=Tipo;
    :}
    |
    TypeString:t
    {:
    Node Tipo = new Node("String", ((String) t) );
                            RESULT=Tipo;
    :}
;

PARAMS ::=
    ByVal Id:i As VAR_TIPOS:v 
    {:
    Node Parametros = new Node("Param");
                            Parametros.addNode(new Node("Id", ((String) i),iright,ileft));
                            Parametros.addNode(v);
                            RESULT=Parametros;
    :}    
    |
    ByVal Id:i As VAR_TIPOS:v Coma PARAMS:m
    {:
    Node Parametro = new Node("Param");
                            Parametro.addNode(new Node("Id", ((String) i),iright,ileft));
                            Parametro.addNode(v);
                            Parametro.addNode(m);
                            RESULT=Parametro;
    :}
    | ByVal error {:System.out.println("Function"); Syntax.Params_Error(); :}
;


BODY ::= 
    BODY:b DIM:c
    {:
    Node Body = new Node("Code");
                            Body.addNode(b);
                            Body.addNode(c);
                            RESULT=Body;
    :}
    |DIM:c
    {:
    Node Body = new Node("Code");
                            Body.addNode(c);
                            RESULT=Body;
    :}
    |
    BODY:b ASIG_STRUCT:c
    {:
    Node Body = new Node("Code");
                            Body.addNode(b);
                            Body.addNode(c);
                            RESULT=Body;
    :}
    |
    ASIG_STRUCT:c
    {:
    Node Body = new Node("Code");
                            Body.addNode(c);
                            RESULT=Body;
    :}
    |
    BODY:b FOR:c
    {:
    Node Body = new Node("Code");
                            Body.addNode(b);
                            Body.addNode(c);
                            RESULT=Body;
    :}
    |FOR:c
    {:
    Node Body = new Node("Code");
                            Body.addNode(c);
                            RESULT=Body;
    :}
    |BODY:b FOR_STEP:c
    {:
    Node Body = new Node("Code");
                            Body.addNode(b);
                            Body.addNode(c);
                            RESULT=Body;
    :}
    |FOR_STEP:c
    {:
    Node Body = new Node("Code");
                            Body.addNode(c);
                            RESULT=Body;
    :}
    |BODY:b IF:c EndIf Newline
    {:
    Node Body = new Node("Code");
                            Body.addNode(b);
                            Body.addNode(c);
                            RESULT=Body;
    :}
    |IF:c EndIf Newline
    {:
    Node Body = new Node("Code");
                            Body.addNode(c);
                            RESULT=Body;
    :}
    |BODY:b IF:c ELSE:e EndIf Newline
    {:
    Node Body = new Node("Code");
                            Body.addNode(b);
                            Body.addNode(c);
                            Body.addNode(e);
                            RESULT=Body;
    :}
    |IF:c ELSE:e EndIf Newline
    {:
    Node Body = new Node("Code");
                            Body.addNode(c);
                            Body.addNode(e);
                            RESULT=Body;
    :}
    |BODY:b DO_WHILE:c
    {:
    Node Body = new Node("Code");
                            Body.addNode(b);
                            Body.addNode(c);
                            RESULT=Body;
    :}
    |DO_WHILE:c
    {:
    Node Body = new Node("Code");
                            Body.addNode(c);
                            RESULT=Body;
    :}
    |BODY:b WRITE:c
    {:
    Node Body = new Node("Code");
                            Body.addNode(b);
                            Body.addNode(c);
                            RESULT=Body;
    :}
    |WRITE:c
    {:
    Node Body = new Node("Code");
                            Body.addNode(c);
                            RESULT=Body;
    :}
    |BODY:b DIM_READ:c
    {:
    Node Body = new Node("Code");
                            Body.addNode(b);
                            Body.addNode(c);
                            RESULT=Body;
    :}
    |DIM_READ:c
    {:
    Node Body = new Node("Code");
                            Body.addNode(c);
                            RESULT=Body;
    :}
    |BODY:b CONCAT:c Newline
    {:
    Node Body = new Node("Code");
                            Body.addNode(b);
                            Body.addNode(c);
                            RESULT=Body;
    :}
    |CONCAT:c Newline
    {:
    Node Body = new Node("Code");
                            Body.addNode(c);
                            RESULT=Body;
    :}
    |BODY:b ASIG_VAR:c
    {:
    Node Body = new Node("Code");
                            Body.addNode(b);
                            Body.addNode(c);
                            RESULT=Body;
    :}
    |ASIG_VAR:c
    {:
    Node Body = new Node("Code");
                            Body.addNode(c);
                            RESULT=Body;
    :}
;

DIM::=
    Dim Id:i As VAR_TIPOS:v Newline
    {:
    Node Body1 = new Node("Dim");
                            Body1.addNode(new Node("Id", ((String) i), iright,ileft));
                            Body1.addNode(v);
                            RESULT=Body1;
    :}
    |
    Dim Id:i As Id:v Newline
    {:
    Node Body1 = new Node("Dim");
                            Body1.addNode(new Node("Id", ((String) i), iright,ileft));
                            Body1.addNode(new Node("Id", ((String) v), vright,vleft));
                            RESULT=Body1;
    :}
    | Dim error {:System.out.println("Dim"); Syntax.Dim_Error(); :}
;

FOR::=
    For Id:i Igual:s Num:n1 To Num:n2 Newline BODY:b1 Next Newline
    {:
    Node Body2 = new Node("For");
                            Body2.addNode(new Node("Id", ((String) i), iright,ileft));
                            Body2.addNode(new Node("Igual", ((String) s)));
                            Body2.addNode(new Node("Integer", ((String) n1), iright,ileft));
                            Body2.addNode(new Node("Integer", ((String) n2), iright,ileft));
                            Body2.addNode(b1);
                            RESULT=Body2;
    :}
    | For error {:System.out.println("For"); Syntax.For_Error(); :}
;

FOR_STEP::=
    For Id:i Igual:s Num:n1 To Num:n2 Step Num:n3 Newline BODY:b1 Next Newline
    {:
    Node Body3 = new Node("For-step");
                            Body3.addNode(new Node("Id", ((String) i), iright,ileft));
                            Body3.addNode(new Node("Igual", ((String) s)));
                            Body3.addNode(new Node("Integer", ((String) n1), iright,ileft));
                            Body3.addNode(new Node("Integer", ((String) n2), iright,ileft));
                            Body3.addNode(new Node("Integer", ((String) n3), iright,ileft));
                            Body3.addNode(b1);
                            RESULT=Body3;
    :}
    | For Id error {:System.out.println("ForStep "); Syntax.ForStep_Error(); :}
;

IF::=
    If CONDICION:c Then Newline BODY:b1
    {:
    Node Body4 = new Node("If");
                            Body4.addNode(c);
                            Body4.addNode(b1);
                            RESULT=Body4;
    :}
    | If error {:System.out.println("If"); Syntax.If_Error(); :}
;

ELSE::=
    Else Newline BODY:b 
    {:
    Node Else = new Node("Else");
                            Else.addNode(b);
                            RESULT=Else;
    :}
    |
    ElseIf CONDICION:c Then Newline BODY:b 
    {:
    Node Else = new Node("Else_if");
                            Else.addNode(c);
                            Else.addNode(b);
                            RESULT=Else;
    :}
    | Else error {:System.out.println("Else"); Syntax.Else_Error(); :}
;
   
DO_WHILE::=
    Do While CONDICION:c Newline BODY:b1 Loop Newline
    {:
    Node Body5 = new Node("Do-While");
                            Body5.addNode(c);
                            Body5.addNode(b1);
                            RESULT=Body5;
    :}
    | Do error {:System.out.println("Do While"); Syntax.DoWhile_Error(); :}
;

DIM_READ::=
    Dim Id:i As VAR_TIPOS:v Igual:s Read Parizq Parder Newline
    {:
    Node Body6 = new Node("Dim-read");
                            Body6.addNode(new Node("Id", ((String) i)));
                            Body6.addNode(v);
                            Body6.addNode(new Node("Igual", ((String) s)));
                            RESULT=Body6;
    :}
    | error {:System.out.println("DimRead"); Syntax.DimRead_Error(); :}

;

WRITE::=
    Write Parizq Num:n1 Parder Newline 
    {:
    Node Body7 = new Node("Write");
                            Body7.addNode(new Node("Integer", ((String) n1)));
                            RESULT=Body7;
    :}
    |
    Write Parizq Id:i Parder Newline
    {:
    Node Body7 = new Node("Write");
                            Body7.addNode(new Node("Id", ((String) i), iright,ileft));
                            RESULT=Body7;
    :}
    | Write error {:System.out.println("Write"); Syntax.Write_Error(); :}
;


STRUCT_BODY ::=
    Id:i As VAR_TIPOS:v Newline 
    {:
    Node SBody = new Node("Struct-body");
                            SBody.addNode(new Node("Id", ((String) i),iright,ileft));
                            SBody.addNode(v);
                            RESULT=SBody;
    :}
    |
    Id:i As VAR_TIPOS:v Newline STRUCT_BODY:sb
    {:
    Node SBody = new Node("Struct-body");
                            SBody.addNode(new Node("Id", ((String) i),iright,ileft));
                            SBody.addNode(v);
                            SBody.addNode(sb);
                            RESULT=SBody;
    :}
    | Id error {:System.out.println("Struct Body"); Syntax.StructBody_Error(); :}

;

CONDICION ::=
    Z:z1 OpRel:o Z:z2
    {:
    Node Condicion = new Node("Condicion");
                            Condicion.addNode(z1);
                            Condicion.addNode(new Node("OP_RELA", ((String) o)));
                            Condicion.addNode(z2);
                            RESULT=Condicion;
    :}
    |Y:y
    {:
    Node Condicion = new Node("Condicion");
                            Condicion.addNode(y);
                            RESULT=Condicion;
    :}
;

Y::=
    Z:z1 OpRel2:o Z:z2
    {:
    Node Condicion2 = new Node("Condicion-I");
                            Condicion2.addNode(z1);
                            Condicion2.addNode(new Node("OP_RELA", ((String) o)));
                            Condicion2.addNode(z2);
                            RESULT=Condicion2;
    :}
;
 

Z::=
    Num:n
    {:
    Node Valor=new Node("Integer", ((String) n),nright,nleft);
                          RESULT=Valor;
    :}
    |
    Id:i 
    {:
    Node Valor=new Node("Id", ((String) i),iright,ileft);
                           RESULT=Valor;
    :}
;
   
OP_AR ::=
    OP_AR:o SumaResta:s T:t 
    {:
    Node Operacion = new Node("Operacion");
                            Operacion.addNode(o);
                            Operacion.addNode(new Node("SumaResta", ((String) s)));
                            Operacion.addNode(t);
                            RESULT=Operacion;
    :}
    |
    T:t
    {:
    Node Operacion = new Node("Operacion");
                            Operacion.addNode(t);
                            RESULT=Operacion;
    :}
;

T ::=
    T:t MultDiv:m F:f 
    {:
    Node Oper2 = new Node("MultDiv");
                            Oper2.addNode(t);
                            Oper2.addNode(new Node("MultDiv", ((String) m)));
                            Oper2.addNode(f);
                            RESULT=Oper2;
    :}
    |
    F:f
    {:
    Node Oper2 = new Node("Valor");
                            Oper2.addNode(f);
                            RESULT=Oper2;
    :}
;

F ::= 
    Num:n
    {:
    Node Valor=new Node("Integer", ((String) n),nright,nleft);
                           RESULT=Valor;
    :}
    |
    Id:i 
    {:
    Node Valor=new Node("Id", ((String) i),iright,ileft);
                           RESULT=Valor;
    :}
    |
    Parder OP_AR:o Parizq
    {:
    Node Valor=new Node("oper");
                           Valor.addNode(o);
                           RESULT=Valor;
    :}
;

IDS ::=
    Id:i Coma IDS:id 
    {:
    Node Ids = new Node("Argu");
                            Ids.addNode(new Node("Id", ((String) i)));
                            Ids.addNode(id);
                            RESULT=Ids;
    :}
    |
    Num:n Coma IDS:id 
    {:
    Node Ids = new Node("Argu");
                            Ids.addNode(new Node("Integer", ((String) n)));
                            Ids.addNode(id);
                            RESULT=Ids;
    :}
    |
    Cadena:n Coma IDS:id 
    {:
    Node Ids = new Node("Argu");
                            Ids.addNode(new Node("String", ((String) n)));
                            Ids.addNode(id);
                            RESULT=Ids;
    :}
    |
    Bool:n Coma IDS:id 
    {:
    Node Ids = new Node("Argu");
                            Ids.addNode(new Node("Boolean", ((String) n)));
                            Ids.addNode(id);
                            RESULT=Ids;
    :}
    |
    Id:i 
    {:
    Node Ids = new Node("Argu");
                            Ids.addNode(new Node("Id", ((String) i)));
                            RESULT=Ids;
    :}
    |
    Num:n
    {:
    Node Ids = new Node("Argu");
                            Ids.addNode(new Node("Integer", ((String) n)));
                            RESULT=Ids;
    :}
    |
    Cadena:n
    {:
    Node Ids = new Node("Argu");
                            Ids.addNode(new Node("String", ((String) n)));
                            RESULT=Ids;
    :}
    |
    
    Bool:n
    {:
    Node Ids = new Node("Argu");
                            Ids.addNode(new Node("Boolean", ((String) n)));
                            RESULT=Ids;
    :}
    | error {:System.out.println("Ids"); Syntax.Ids_Error(); :}
;


CONCAT ::=
    Id:i1 Igual:s Id:i2 SENT_CONCAT:sc
    {:
    Node Concat = new Node("Concat");
                            Concat.addNode(new Node("Id", ((String) i1),i1right,i1left));
                            Concat.addNode(new Node("Igual", ((String) s)));
                            Concat.addNode(new Node("Id", ((String) i2),i2right,i2left));
                            Concat.addNode(sc);
                            RESULT=Concat;
    :}
    |
    Id:i1 Igual:s Cadena:ca SENT_CONCAT:sc
    {:
    Node Concat = new Node("Concat");
                            Concat.addNode(new Node("Id", ((String) i1),i1right,i1left));
                            Concat.addNode(new Node("Igual", ((String) s)));
                            Concat.addNode(new Node("String", ((String) ca)));
                            Concat.addNode(sc);
                            RESULT=Concat;
    :}
    | error {:System.out.println("Concat"); Syntax.Concat_Error(); :}
;

SENT_CONCAT ::=
    Ampersand Id:i1 SENT_CONCAT:sc 
    {:
    Node SConcat = new Node("Sent-concat");
                            SConcat.addNode(new Node("Id", ((String) i1),i1right,i1left));
                            SConcat.addNode(sc);
                            RESULT=SConcat;
    :}
    |
    Ampersand Cadena:cs SENT_CONCAT:sc 
    {:
    Node SConcat = new Node("Sent-concat");
                            SConcat.addNode(new Node("ContString", ((String) cs)));
                            SConcat.addNode(sc);
                            RESULT=SConcat;
    :}
    |
    Ampersand Id:i1 
    {:
    Node SConcat = new Node("Sent-concat");
                            SConcat.addNode(new Node("Id", ((String) i1),i1right,i1left));
                            RESULT=SConcat;
    :}
    |
    Ampersand Cadena:cs
    {:
    Node SConcat = new Node("Sent-concat");
                            SConcat.addNode(new Node("ContString", ((String) cs)));
                            RESULT=SConcat;
    :}
    |
    Ampersand2 Newline Id:i1 SENT_CONCAT:sc 
    {:
    Node SConcat = new Node("Sent-concat");
                            SConcat.addNode(new Node("Id", ((String) i1),i1right,i1left));
                            SConcat.addNode(sc);
                            RESULT=SConcat;
    :}
    |
    Ampersand2 Newline Cadena:cs SENT_CONCAT:sc 
    {:
    Node SConcat = new Node("Sent-concat");
                            SConcat.addNode(new Node("ContString", ((String) cs)));
                            SConcat.addNode(sc);
                            RESULT=SConcat;
    :}
    |
    Ampersand2 Newline Id:i1 
    {:
    Node SConcat = new Node("Sent-concat");
                            SConcat.addNode(new Node("Id", ((String) i1),i1right,i1left));
                            RESULT=SConcat;
    :}
    |
    Ampersand2 Newline Cadena:cs
    {:
    Node SConcat = new Node("Sent-concat");
                            SConcat.addNode(new Node("ContString", ((String) cs)));
                            RESULT=SConcat;
    :}
    | error {:System.out.println("Sent Concat"); Syntax.SentConcat_Error(); :}
;

ASIG_VAR ::=
    Id:i Igual:s OP_AR:o Newline 
    {:
    Node AsigVar = new Node("Asignar-var");
                            AsigVar.addNode(new Node("Id", ((String) i),iright,ileft));
                            AsigVar.addNode(new Node("Igual", ((String) s)));
                            AsigVar.addNode(o);
                            RESULT=AsigVar;
    :}
    |
    Id:i1 Igual:s Id:i2 Parizq Parder Newline 
    {:
    Node AsigVar = new Node("Asignar-varF");
                            AsigVar.addNode(new Node("Id", ((String) i1),i1right,i1left));
                            AsigVar.addNode(new Node("Igual", ((String) s)));
                            AsigVar.addNode(new Node("Id", ((String) i2),i2right,i2left));
                            RESULT=AsigVar;
    :}    
    |
    Id:i1 Igual:s Id:i2 Parizq IDS:id Parder Newline
    {:
    Node AsigVar = new Node("Asignar-varF");
                            AsigVar.addNode(new Node("Id", ((String) i1),i1right,i1left));
                            AsigVar.addNode(new Node("Igual", ((String) s)));
                            AsigVar.addNode(new Node("Id", ((String) i2),i2right,i2left));
                            AsigVar.addNode(id);
                            RESULT=AsigVar;
    :}
    |Id:i Igual:s Bool:b Newline
    {:
    Node AsigVar = new Node("Asignar-var");
                            AsigVar.addNode(new Node("Id", ((String) i),iright,ileft));
                            AsigVar.addNode(new Node("Igual", ((String) s)));
                            AsigVar.addNode(new Node("Boolean", ((String) b)));
                            RESULT=AsigVar;
    :}
    |Id:i Igual:s Cadena:c Newline
     {:
    Node AsigVar = new Node("Asignar-var");
                            AsigVar.addNode(new Node("Id", ((String) i),iright,ileft));
                            AsigVar.addNode(new Node("Igual", ((String) s)));
                            AsigVar.addNode(new Node("String", ((String) c)));
                            RESULT=AsigVar;
    :}
    | Id Igual error {:System.out.println("Asig Variable"); Syntax.AsigVar_Error(); :}

;

ASIG_STRUCT::=
    Id:i1 Punto Id:i2 Igual:s VALUE:v Newline
    {:
     Node AsigVars = new Node("Asignar-varS1");
                        AsigVars.addNode(new Node("Id", ((String) i1),i1right,i1left));
                        AsigVars.addNode(new Node("Id", ((String) i2),i2right,i2left));
                        AsigVars.addNode(new Node("Igual", ((String) s)));
                        AsigVars.addNode(v);
                        RESULT=AsigVars;
     :}
    |
    Id:i1 Igual:s Id:i2 Punto Id:i3 Newline
    {:
     Node AsigVars = new Node("Asignar-varS2");
                        AsigVars.addNode(new Node("Id", ((String) i1),i1right,i1left));
                        AsigVars.addNode(new Node("Igual", ((String) s)));
                        AsigVars.addNode(new Node("Id", ((String) i2),i2right,i2left));
                        AsigVars.addNode(new Node("Id", ((String) i3),i3right,i3left));
                        RESULT=AsigVars;
     :}
    | Id error {:System.out.println("ASIG_STRUCT"); Syntax.AsigStruct_Error(); :}
;

VALUE::=
    Id:i
    {:
    Node Value=new Node("Id", ((String) i),iright,ileft);
                       RESULT=Value;
    :}
    |
    Bool:i
    {:
    Node Value=new Node("Boolean", ((String) i),iright,ileft);
                       RESULT=Value;
    :}
    |
    Cadena:i
    {:
    Node Value=new Node("String", ((String) i),iright,ileft);
                       RESULT=Value;
    :}
    |
    Num:i
    {:
    Node Value=new Node("Integer", ((String) i),iright,ileft);
                       RESULT=Value;
    :}
;