package proyectocompi;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.StringReader;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import java_cup.runtime.Symbol;
import javax.swing.JFileChooser;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
    }

    private void analizarLexico() throws IOException {
        try {
            String expr = (String) ta_entrada.getText();
            Lexer lexer = new Lexer(new StringReader(expr));
            String resultado = "";
            while (true) {
                Tokens tokens = lexer.yylex();
                if (tokens == null) {
                    resultado += "# Fin del archivo #";
                    // ta_syntax_result.setText(resultado);
                    return;
                }
                switch (tokens) {
                    case Error:
                        resultado += "Simbolo no definido\n";
                        break;
                    case Newline:
                        resultado += "< " + tokens + " >" + "\n";
                        break;
                    case Num:
                    case Parizq:
                    case Parder:
                    case Coma:
                    case End:
                    case Write:
                    case Read:
                    case SumaResta:
                    case MultDiv:
                    case Igual:
                    case OpRel:
                    case Ampersand:
                    case If:
                    case Then:
                    case Else:
                    case ElseIf:
                    case For:
                    case To:
                    case Next:
                    case Step:
                    case Do:
                    case While:
                    case Loop:
                    case ByVal:
                    case Function:
                    case Sub:
                    case Structure:
                    case Module:
                    case TypeBoolean:
                    case TypeInteger:
                    case TypeString:
                    case Dim:
                    case As:
                    case Id:
                    case ContString:
                        resultado += "< " + tokens + ", " + lexer.lexema + " >" + "\n";
                        break;
                    default:
                        resultado += "Token: " + tokens + "\n";
                        break;
                }
            }
        } catch (Exception e) {

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        arbolin = new javax.swing.JDialog();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jtree = new javax.swing.JTree();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        ta_entrada = new javax.swing.JTextArea();
        jScrollPane5 = new javax.swing.JScrollPane();
        ta_syntax_result = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        bt_abrir = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        label_linea = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        label_columna = new javax.swing.JLabel();
        bt_syntax1 = new javax.swing.JButton();
        bt_syntax2 = new javax.swing.JButton();

        jLabel2.setText("AST");

        jButton1.setText("Generar arbol");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        jtree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jScrollPane4.setViewportView(jtree);

        javax.swing.GroupLayout arbolinLayout = new javax.swing.GroupLayout(arbolin.getContentPane());
        arbolin.getContentPane().setLayout(arbolinLayout);
        arbolinLayout.setHorizontalGroup(
            arbolinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(arbolinLayout.createSequentialGroup()
                .addGap(284, 284, 284)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 100, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(93, 93, 93))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, arbolinLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4)
                .addGap(49, 49, 49))
        );
        arbolinLayout.setVerticalGroup(
            arbolinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(arbolinLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(arbolinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jButton1))
                .addGap(31, 31, 31)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(41, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Código", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 18))); // NOI18N

        ta_entrada.setColumns(20);
        ta_entrada.setRows(5);
        ta_entrada.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                ta_entradaCaretUpdate(evt);
            }
        });
        jScrollPane2.setViewportView(ta_entrada);

        ta_syntax_result.setColumns(20);
        ta_syntax_result.setRows(5);
        jScrollPane5.setViewportView(ta_syntax_result);

        jLabel3.setText("SALIDA");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(13, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 508, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(167, 167, 167)
                        .addComponent(jLabel3))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 399, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 515, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        bt_abrir.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        bt_abrir.setText("Abrir");
        bt_abrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_abrirActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabel1.setText("Línea:");

        label_linea.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        label_linea.setText("0");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabel5.setText("Columna");

        label_columna.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        label_columna.setText("0");

        bt_syntax1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        bt_syntax1.setText("Arbol");
        bt_syntax1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_syntax1ActionPerformed(evt);
            }
        });

        bt_syntax2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        bt_syntax2.setText("Compilar");
        bt_syntax2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_syntax2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(label_linea)
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(label_columna)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                .addComponent(bt_syntax1)
                .addGap(31, 31, 31)
                .addComponent(bt_syntax2)
                .addGap(46, 46, 46)
                .addComponent(bt_abrir)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bt_abrir)
                    .addComponent(jLabel1)
                    .addComponent(label_linea)
                    .addComponent(jLabel5)
                    .addComponent(label_columna)
                    .addComponent(bt_syntax1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bt_syntax2))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(35, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bt_abrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_abrirActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);
        File archivo = new File(chooser.getSelectedFile().getAbsolutePath());
        try {
            String ST = new String(Files.readAllBytes(archivo.toPath()));
            ta_entrada.setText(ST);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_bt_abrirActionPerformed

    private void ta_entradaCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_ta_entradaCaretUpdate
        try {
            int caretpos = ta_entrada.getCaretPosition();
            int x1 = ta_entrada.getLineOfOffset(caretpos);
            //System.out.println("x1: " + x1);
            label_linea.setText(String.valueOf(x1 + 1));
            int x2 = caretpos - ta_entrada.getLineStartOffset(x1);
            //System.out.println("x2: " + x2);
            label_columna.setText(String.valueOf(x2 + 1));
        } catch (Exception e) {
        }
    }//GEN-LAST:event_ta_entradaCaretUpdate

    private void bt_syntax1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_syntax1ActionPerformed
        try {
            arbolin.setModal(true);
            arbolin.pack();
            arbolin.setLocationRelativeTo(this);
            arbolin.setVisible(true);
        } catch (Exception e) {
        }
    }//GEN-LAST:event_bt_syntax1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            arbol = new DefaultMutableTreeNode(root);
            DefaultTreeModel modelo = (DefaultTreeModel) jtree.getModel();
            llenar(root, arbol);
            modelo.setRoot(arbol);
            jtree.setModel(modelo);
        } catch (Exception e) {
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void bt_syntax2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_syntax2ActionPerformed
////////////////////////////Reinicio//////////////////////////////////////////////////////////////////////////////
        tabla_simbolos = new ArrayList<Entry>();
        Errores_compTipos = new ArrayList<String>();
        Errores_ambito = new ArrayList<String>();

        ambito_cont = 1;
        ambito_control = -1;
        offset = 0;
        ambito = "";

        cuadruplos = new ArrayList();
        temporales = 0;
        cantparam = 0;
        etiquetas = 0;

/////////////////////////////Parte lexica/////////////////////////////////////////////////////////////////////////
        try {
            analizarLexico();
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
/////////////////////////////Parte sintactica//////////////////////////////////////////////////////////////////////
        String ST = ta_entrada.getText();
        s = new Syntax(new proyectocompi.Lexer_Syn(new StringReader(ST)));
        String temporal = "------Errores Sintacticos------\n";
        try {
            s.parse();
        } catch (Exception ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (Syntax.Errores.isEmpty()) {
            try {
                root = s.raiz;
                System.out.println("Analisis rizado correctamente");

            } catch (Exception ex) {
                ex.printStackTrace();
            }
        } else {
            try {
                Symbol sym = s.getS();
                temporal = temporal + Syntax.Errores;
                //temporal = temporal + "Error de sintaxis. Linea: " + (sym.right + 1) + " Columna: " + (sym.left + 1) + ", Texto: \"" + sym.value + "\" \n";
                System.out.println(temporal);
                temporal = "";
                Syntax.Errores.clear();
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
//////////////////////////////Parte Semantica////////////////////////////////////////////////////////////////////////
////--------------------------Comprobar tipos ---------------------------------------------------------------------
        tabla_simbolos = new ArrayList<Entry>();
        Errores_compTipos = new ArrayList();
        llenar_tabla_simbolos(root);

        ambito_cont = 1;
        ambito_control = -1;
        offset = 0;
        ambito = "";
        segundaPasada(root);
        try {
            ta_syntax_result.setText("Analisis completo");
            String mensaje = "";
            for (int i = 0; i < tabla_simbolos.size(); i++) {
                mensaje += "ID: " + tabla_simbolos.get(i).id
                        + " TIPO: " + tabla_simbolos.get(i).tipo
                        + " AMBITO: " + tabla_simbolos.get(i).ambito
                        + " OFFSET: " + tabla_simbolos.get(i).offset + "\n";
            }
            System.out.println(mensaje);
        } catch (Exception e) {
        }

        System.out.println("Errorees tipos");
        for (int i = 0; i < Errores_compTipos.size(); i++) {
            System.out.println(Errores_compTipos.get(i));
        }
        System.out.println("Errores ambito");
        for (int i = 0; i < Errores_ambito.size(); i++) {
            System.out.println(Errores_ambito.get(i));
        }

        System.out.println("\n");
        Cuadruplos(root);
        String mensaje = "";
        mensaje += "---------------------\n";
        for (int i = 0; i < cuadruplos.size(); i++) {
            mensaje += cuadruplos.get(i) + "\n";
        }
        System.out.println(mensaje);
    }//GEN-LAST:event_bt_syntax2ActionPerformed

    public static void llenar(Node root, DefaultMutableTreeNode current) {
        for (int i = 0; i < root.hijos.size(); i++) {
            current.add(new DefaultMutableTreeNode(root.hijos.get(i)));
            if (!root.hijos.get(i).hijos.isEmpty()) {
                llenar(root.hijos.get(i), (DefaultMutableTreeNode) current.getChildAt(i));
            }
        }
    }
/////////////////////////////////////Comprobar Tipos//////////////////////////////////////////////////////////////////////////

    public static void llenar_tabla_simbolos(Node actual) {
        if (actual.nombre.equals("For")
                || actual.nombre.equals("For-step")
                || actual.nombre.equals("If")
                || actual.nombre.equals("Else")
                || actual.nombre.equals("Else_if")
                || actual.nombre.equals("Do-While")) {
            ambito += "," + ambito_cont;
            ambito_cont++;
            ambito_control++;
            inicioff = offset;
        }

//////////////////////////////////Function///////////////////////////////////////////////////////////////////////////////        
        if (actual.nombre.equals("Function")) {
            if (actual.hijos.size() == 4) {
                String a = actual.hijos.get(0).valor;
                tipos_param(actual, a);
                String tipo = tiposf;
                tiposf = "";
                tipo = tipo.substring(0, tipo.length() - 2);
                tipo += "->" + actual.hijos.get(2).valor;
                tabla_simbolos.add(new Entry(actual.hijos.get(0).valor, tipo, "module", -1, activo));
                offset = 0;
                agregar_param(actual, a);
            }
            if (actual.hijos.size() == 3) {
                String tipo1 = "void->" + actual.hijos.get(1).valor;
                tabla_simbolos.add(new Entry(actual.hijos.get(0).valor, tipo1, "module", -1, activo));
                offset = 0;
            }
        }
//--------------------------------Agregar parametros---------------------------------------       

//////////////////////////////////Sub////////////////////////////////////////////////////////////////////////////////////////////////        
        if (actual.nombre.equals("Sub")) {
            //agregarE(new Entry(actual.hijos.get(0).valor, "sub", "module", offset, activo), actual.hijos.get(0).linea, actual.hijos.get(0).columna);

            if (actual.hijos.size() == 3) {
                String a = actual.hijos.get(0).valor;
                tipos_param(actual, a);
                String tipo = tiposf;
                tiposf = "";
                tipo = tipo.substring(0, tipo.length() - 2);
                tipo += "->void";
                tabla_simbolos.add(new Entry(actual.hijos.get(0).valor, tipo, "module", -1, activo));
                offset = 0;
                agregar_param(actual, a);
            }

            if (actual.hijos.size() == 2) {
                String tipo = "void->void";
                tabla_simbolos.add(new Entry(actual.hijos.get(0).valor, tipo, "module", -1, activo));
                offset = 0;
            }

        }
/////////////////////////////////Structure/////////////////////////////////////////////////////////////////////////////////////      
        if (actual.nombre.equals("Structure")) {
            // agregarE(new Entry(actual.hijos.get(0).valor, "Structure", "module", offset, activo), actual.hijos.get(0).linea, actual.hijos.get(0).columna);
            tabla_simbolos.add(new Entry(actual.hijos.get(0).valor, "void->void", "module", -1, activo));
            offset = 0;
        }
        if (actual.nombre.equals("Struct-body")) {
            agregar(new Entry(actual.hijos.get(0).valor, actual.hijos.get(1).valor, ambito, offset, activo), actual.hijos.get(0).linea, actual.hijos.get(0).columna);
        }

////////////////////////////////////////Dim////////////////////////////////////////////////////////////////////////////////////
        if (actual.nombre.equals("Dim")) {
            if (actual.hijos.get(1).valor.equals("String")
                    || actual.hijos.get(1).valor.equals("Boolean")
                    || actual.hijos.get(1).valor.equals("Integer")) {
                agregar(new Entry(actual.hijos.get(0).valor, actual.hijos.get(1).valor, ambito, offset, activo), actual.hijos.get(0).linea, actual.hijos.get(0).columna);
            }
            if (actual.hijos.get(1).nombre.equals("Id")) {
                int amb = existeE(actual.hijos.get(1).valor);
                if (amb == 1) {
                    String t1 = get_tipo(actual.hijos.get(1).valor);
                    if (t1.equals("void->void")) {
                        agregar(new Entry(actual.hijos.get(0).valor, actual.hijos.get(1).valor, ambito, offset, activo), actual.hijos.get(0).linea, actual.hijos.get(0).columna);
                    } else {
                        Errores_compTipos.add("Error de tipo en Declaracion con la variable " + actual.hijos.get(1).valor + ". Linea: " + (actual.hijos.get(1).linea) + " Columna: " + actual.hijos.get(1).columna);
                    }
                } else {
                    Errores_ambito.add("Error ambito en Declaracion con la variable " + actual.hijos.get(1).valor + ". Linea: " + (actual.hijos.get(1).linea) + " Columna: " + actual.hijos.get(1).columna);
                }
            }
        }
        if (actual.nombre.equals("Dim-read")) {
            agregar(new Entry(actual.hijos.get(0).valor, actual.hijos.get(1).valor, ambito, offset, activo), actual.hijos.get(0).linea, actual.hijos.get(0).columna);
        }
////////////////////////////////////////Asignar///////////////////////////////////////////////////////////////////////////////        

        if (actual.nombre.equals("Asignar-var")) {
            if (actual.hijos.get(2).hijos.size() > 1) {
                Node temp = actual.hijos.get(2);
                validar_oa(temp);
            }
//----------------------------------solo 1  valor Id o Num--------------------------------------------------------------      
            if (actual.hijos.get(2).hijos.size() == 1) {
                Node temp = actual.hijos.get(2).hijos.get(0);
                if (temp.nombre.equals("Valor")) {
                    //id
                    if (temp.hijos.get(0).nombre.equals("Id")) {
                        int amb1 = validar_variable(actual.hijos.get(0).valor),
                                amb2 = validar_variable(temp.hijos.get(0).valor);
                        if (amb1 == 1
                                && amb2 == 1) {
                            String t1 = get_tipo(actual.hijos.get(0).valor),
                                    t2 = get_tipo(temp.hijos.get(0).valor);
                            if (t1.equals(t2)) {
                            } else {
                                Errores_compTipos.add("Error de tipo en Asignacion con la variable " + temp.hijos.get(0).valor + ". Linea: " + (temp.hijos.get(0).linea) + " Columna: " + temp.hijos.get(0).columna);

                            }
                        } else {
                            if (amb1 != 1) {
                                Errores_ambito.add("Error ambito en Asignacion con la variable " + actual.hijos.get(0).valor + ". Linea: " + (actual.hijos.get(0).linea) + " Columna: " + actual.hijos.get(0).columna);
                            }
                            if (amb2 != 1) {
                                Errores_ambito.add("Error ambito en Condicion con la variable " + temp.hijos.get(0).valor + ". Linea: " + (temp.hijos.get(0).linea) + " Columna: " + temp.hijos.get(0).columna);
                            }
                        }
                    }
                    //Integer
                    if (temp.hijos.get(0).nombre.equals("Integer")) {
                        int amb1 = validar_variable(actual.hijos.get(0).valor);
                        if (amb1 == 1) {
                            String t1 = get_tipo(actual.hijos.get(0).valor);
                            if (t1.equals("Integer")) {
                            } else {
                                if (!t1.equals("Integer")) {
                                    Errores_compTipos.add("Error de tipo en Asignacion con la variable " + actual.hijos.get(0).valor + ". Linea: " + (actual.hijos.get(0).linea) + " Columna: " + actual.hijos.get(0).columna);
                                }
                            }
                        } else {
                            if (amb1 != 1) {
                                Errores_ambito.add("Error ambito en Asignacion con la variable " + actual.hijos.get(0).valor + ". Linea: " + (actual.hijos.get(0).linea) + " Columna: " + actual.hijos.get(0).columna);
                            }
                        }
                    }
                }
            }
            //boolean
            if (actual.hijos.get(2).nombre.equals("Boolean")) {
                if (validar_variable(actual.hijos.get(0).valor) == 1) {
                    String t = get_tipo(actual.hijos.get(0).valor);
                    if (t.equals("Boolean")) {
                    } else {
                        Errores_compTipos.add("Error de tipo en Asignacion con la variable " + actual.hijos.get(0).valor + ". Linea: " + (actual.hijos.get(0).linea) + " Columna: " + actual.hijos.get(0).columna);
                    }
                } else {
                    Errores_ambito.add("Error ambito en Asignacion con la variable " + actual.hijos.get(0).valor + ". Linea: " + (actual.hijos.get(0).linea) + " Columna: " + actual.hijos.get(0).columna);
                }
            }
            //String
            if (actual.hijos.get(2).nombre.equals("String")) {
                if (validar_variable(actual.hijos.get(0).valor) == 1) {
                    String t = get_tipo(actual.hijos.get(0).valor);
                    if (t.equals("String")) {
                    } else {
                        Errores_compTipos.add("Error de tipo en Asignacion con la variable " + actual.hijos.get(0).valor + ". Linea: " + (actual.hijos.get(0).linea) + " Columna: " + actual.hijos.get(0).columna);
                    }
                } else {
                    Errores_ambito.add("Error ambito en Asignacion con la variable " + actual.hijos.get(0).valor + ". Linea: " + (actual.hijos.get(0).linea) + " Columna: " + actual.hijos.get(0).columna);
                }
            }
        }

//------------------------concatenacion-----------------------------------------------        
        //inicio de concatenacion    
        if (actual.nombre.equals("Concat")) {
            int amb1 = validar_variable(actual.hijos.get(0).valor);
            if (amb1 == 1) {
                String t1 = get_tipo(actual.hijos.get(0).valor);
                if (t1.equals("String")) {
                } else {
                    Errores_compTipos.add("Error de tipo en Concatenacion con la variable " + actual.hijos.get(0).valor + ". Linea: " + (actual.hijos.get(0).linea) + " Columna: " + actual.hijos.get(0).columna);
                }
            } else {
                Errores_ambito.add("Error ambito en Concatenacion con la variable " + actual.hijos.get(0).valor + ". Linea: " + (actual.hijos.get(0).linea) + " Columna: " + actual.hijos.get(0).columna);
            }

            if (actual.hijos.get(2).nombre.equals("Id")) {//inicio de la concatenacion hay variabke
                int amb2 = validar_variable(actual.hijos.get(2).valor);
                if (amb2 == 1) {
                } else {
                    Errores_ambito.add("Error ambito en Concatenacion con la variable " + actual.hijos.get(2).valor + ". Linea: " + (actual.hijos.get(2).linea) + " Columna: " + actual.hijos.get(2).columna);
                }
            }
        }
        //resto de la concatenacion
        if (actual.nombre.equals("Sent-concat")) {
            if (actual.hijos.get(0).nombre.equals("Id")) {//inicio de la concatenacion hay variabke
                int amb2 = validar_variable(actual.hijos.get(0).valor);
                if (amb2 == 1) {
                } else {
                    Errores_ambito.add("Error ambito en Concatenacion con la variable " + actual.hijos.get(0).valor + ". Linea: " + (actual.hijos.get(0).linea) + " Columna: " + actual.hijos.get(0).columna);
                }
            }
        }
///////////////////////////////Comprobar for//////////////////////////////////////////////////////////////////////////////////
        if (actual.nombre.equals("For")) {
            if (validar_variable(actual.hijos.get(0).valor) == 1) {
                if (get_tipo(actual.hijos.get(0).valor).equals("Integer")) {
                    if (actual.hijos.get(2).nombre.equals("Integer")) {
                    } else {
                        Errores_compTipos.add("Error de tipo en For con la variable " + actual.hijos.get(0).valor + ". Linea: " + (actual.hijos.get(2).linea) + " Columna: " + actual.hijos.get(2).columna);
                    }
                    if (actual.hijos.get(3).nombre.equals("Integer")) {
                    } else {
                        Errores_compTipos.add("Error de tipo en For con la variable " + actual.hijos.get(0).valor + ". Linea: " + (actual.hijos.get(3).linea) + " Columna: " + actual.hijos.get(3).columna);
                    }

                } else {
                    Errores_compTipos.add("Error de tipo en For con la variable " + actual.hijos.get(0).valor + ". Linea: " + (actual.hijos.get(0).linea) + " Columna: " + actual.hijos.get(0).columna);
                }
            } else {
                Errores_ambito.add("Error ambito en For con la variable " + actual.hijos.get(0).valor + ". Linea: " + (actual.hijos.get(0).linea) + " Columna: " + actual.hijos.get(0).columna);
            }
        }
///////////////////////////////Comprobar Write////////////////////////////////////////////////////////////////////////////////
        if (actual.nombre.equals("Write")) {
            if (validar_variable(actual.hijos.get(0).valor) == 1) {
                if (get_tipo(actual.hijos.get(0).valor).equals("Integer")
                        || get_tipo(actual.hijos.get(0).valor).equals("String")) {
                } else {
                    Errores_compTipos.add("Error de tipo en Console.write con la variable " + actual.hijos.get(0).valor + ". Linea: " + (actual.hijos.get(0).linea) + " Columna: " + actual.hijos.get(0).columna);
                }
            } else {
                Errores_ambito.add("Error ambito en Console.write con la variable " + actual.hijos.get(0).valor + ". Linea: " + (actual.hijos.get(0).linea) + " Columna: " + actual.hijos.get(0).columna);
            }
        }

///////////////////////////////Comprobar for-step////////////////////////////////////////////////////////////////////////////
        if (actual.nombre.equals("For-step")) {
            if (validar_variable(actual.hijos.get(0).valor) == 1) {
                if (get_tipo(actual.hijos.get(0).valor).equals("Integer")) {
                    if (actual.hijos.get(2).nombre.equals("Integer")) {
                    } else {
                        Errores_compTipos.add("Error de tipo en For con la variable " + actual.hijos.get(0).valor + ". Linea: " + (actual.hijos.get(2).linea) + " Columna: " + actual.hijos.get(2).columna);
                    }
                    if (actual.hijos.get(3).nombre.equals("Integer")) {
                    } else {
                        Errores_compTipos.add("Error de tipo en For con la variable " + actual.hijos.get(0).valor + ". Linea: " + (actual.hijos.get(3).linea) + " Columna: " + actual.hijos.get(3).columna);
                    }
                    if (actual.hijos.get(4).nombre.equals("Integer")) {
                    } else {
                        Errores_compTipos.add("Error de tipo en For con la variable " + actual.hijos.get(0).valor + ". Linea: " + (actual.hijos.get(4).linea) + " Columna: " + actual.hijos.get(4).columna);
                    }

                } else {
                    Errores_compTipos.add("Error de tipo en For con la variable " + actual.hijos.get(0).valor + ". Linea: " + (actual.hijos.get(0).linea) + " Columna: " + actual.hijos.get(0).columna);
                }
            } else {
                Errores_ambito.add("Error ambito en For con la variable " + actual.hijos.get(0).valor + ". Linea: " + (actual.hijos.get(0).linea) + " Columna: " + actual.hijos.get(0).columna);
            }
        }
///////////////////////////////Condicion//////////////////////////////////////////////////////////////////////////////////////
        if (actual.nombre.equals("Condicion")
                && actual.hijos.size() > 1 //Validar si es la condicion <,>,<=,>=,
                ) {
            if (actual.hijos.get(0).nombre.equals("Id") && actual.hijos.get(2).nombre.equals("Id")) {
                int amb1 = validar_variable(actual.hijos.get(0).valor),
                        amb2 = validar_variable(actual.hijos.get(2).valor);
                if (amb1 == 1 && amb2 == 1) {
                    String t1 = get_tipo(actual.hijos.get(0).valor),
                            t2 = get_tipo(actual.hijos.get(2).valor);
                    if (t1.equals("Integer") && t2.equals("Integer")) {
                    } else {
                        if (!t1.equals("Integer")) {
                            Errores_compTipos.add("Error de tipo en Condicion con la variable " + actual.hijos.get(0).valor + ". Linea: " + (actual.hijos.get(0).linea) + " Columna: " + actual.hijos.get(0).columna);
                        }
                        if (!t2.equals("Integer")) {
                            Errores_compTipos.add("Error de tipo en Condicion con la variable " + actual.hijos.get(2).valor + ". Linea: " + (actual.hijos.get(2).linea) + " Columna: " + actual.hijos.get(2).columna);
                        }
                    }
                } else {
                    if (amb1 != 1) {
                        Errores_ambito.add("Error ambito en Condicion con la variable " + actual.hijos.get(0).valor + ". Linea: " + (actual.hijos.get(0).linea) + " Columna: " + actual.hijos.get(0).columna);
                    }
                    if (amb2 != 1) {
                        Errores_ambito.add("Error ambito en Condicion con la variable " + actual.hijos.get(2).valor + ". Linea: " + (actual.hijos.get(2).linea) + " Columna: " + actual.hijos.get(2).columna);
                    }
                }
            }
            if (actual.hijos.get(0).nombre.equals("Id") && actual.hijos.get(2).nombre.equals("Integer")) {
                int amb1 = validar_variable(actual.hijos.get(0).valor);
                if (amb1 == 1) {
                    String t1 = get_tipo(actual.hijos.get(0).valor);
                    if (t1.equals("Integer")) {
                    } else {
                        if (!t1.equals("Integer")) {
                            Errores_compTipos.add("Error de tipo en Condicion con la variable " + actual.hijos.get(0).valor + ". Linea: " + (actual.hijos.get(0).linea) + " Columna: " + actual.hijos.get(0).columna);
                        }
                    }
                } else {
                    if (amb1 != 1) {
                        Errores_ambito.add("Error ambito en Condicion con la variable " + actual.hijos.get(0).valor + ". Linea: " + (actual.hijos.get(0).linea) + " Columna: " + actual.hijos.get(0).columna);
                    }
                }
            }
            if (actual.hijos.get(0).nombre.equals("Integer") && actual.hijos.get(2).nombre.equals("Id")) {
                int amb2 = validar_variable(actual.hijos.get(2).valor);
                if (amb2 == 1) {
                    String t2 = get_tipo(actual.hijos.get(2).valor);
                    if (t2.equals("Integer")) {
                    } else {
                        if (!t2.equals("Integer")) {
                            Errores_compTipos.add("Error de tipo en Condicion con la variable " + actual.hijos.get(2).valor + ". Linea: " + (actual.hijos.get(2).linea) + " Columna: " + actual.hijos.get(2).columna);
                        }
                    }
                } else {
                    if (amb2 != 1) {
                        Errores_ambito.add("Error ambito en Condicion con la variable " + actual.hijos.get(2).valor + ". Linea: " + (actual.hijos.get(2).linea) + " Columna: " + actual.hijos.get(2).columna);
                    }
                }
            }
            if (actual.hijos.get(0).nombre.equals("Integer") && actual.hijos.get(2).nombre.equals("Integer")) {
            }
        }
        /////---------------------------otra condicion menor presedencia----------------------------
        if (actual.nombre.equals("Condicion-I")
                && actual.hijos.size() > 1 //Validar si es la condicion ==,!=
                ) {
            if (actual.hijos.get(0).nombre.equals("Id") && actual.hijos.get(2).nombre.equals("Id")) {
                int amb1 = validar_variable(actual.hijos.get(0).valor),
                        amb2 = validar_variable(actual.hijos.get(2).valor);
                if (amb1 == 1 && amb2 == 1) {
                    String t1 = get_tipo(actual.hijos.get(0).valor),
                            t2 = get_tipo(actual.hijos.get(2).valor);
                    if (t1.equals("Integer") && t2.equals("Integer")) {
                    } else {
                        if (!t1.equals("Integer")) {
                            Errores_compTipos.add("Error de tipo en Condicion con la variable " + actual.hijos.get(0).valor + ". Linea: " + (actual.hijos.get(0).linea) + " Columna: " + actual.hijos.get(0).columna);
                        }
                        if (!t2.equals("Integer")) {
                            Errores_compTipos.add("Error de tipo en Condicion con la variable " + actual.hijos.get(2).valor + ". Linea: " + (actual.hijos.get(2).linea) + " Columna: " + actual.hijos.get(2).columna);
                        }
                    }
                } else {
                    if (amb1 != 1) {
                        Errores_ambito.add("Error ambito en Condicion con la variable " + actual.hijos.get(0).valor + ". Linea: " + (actual.hijos.get(0).linea) + " Columna: " + actual.hijos.get(0).columna);
                    }
                    if (amb2 != 1) {
                        Errores_ambito.add("Error ambito en Condicion con la variable " + actual.hijos.get(2).valor + ". Linea: " + (actual.hijos.get(2).linea) + " Columna: " + actual.hijos.get(2).columna);
                    }
                }
            }
            if (actual.hijos.get(0).nombre.equals("Id") && actual.hijos.get(2).nombre.equals("Integer")) {
                int amb1 = validar_variable(actual.hijos.get(0).valor);
                if (amb1 == 1) {
                    String t1 = get_tipo(actual.hijos.get(0).valor);
                    if (t1.equals("Integer")) {
                    } else {
                        if (!t1.equals("Integer")) {
                            Errores_compTipos.add("Error de tipo en Condicion con la variable " + actual.hijos.get(0).valor + ". Linea: " + (actual.hijos.get(0).linea) + " Columna: " + actual.hijos.get(0).columna);
                        }
                    }
                } else {
                    if (amb1 != 1) {
                        Errores_ambito.add("Error ambito en Condicion con la variable " + actual.hijos.get(0).valor + ". Linea: " + (actual.hijos.get(0).linea) + " Columna: " + actual.hijos.get(0).columna);
                    }
                }
            }
            if (actual.hijos.get(0).nombre.equals("Integer") && actual.hijos.get(2).nombre.equals("Id")) {
                int amb2 = validar_variable(actual.hijos.get(2).valor);
                if (amb2 == 1) {
                    String t2 = get_tipo(actual.hijos.get(2).valor);
                    if (t2.equals("Integer")) {
                    } else {
                        if (!t2.equals("Integer")) {
                            Errores_compTipos.add("Error de tipo en Condicion con la variable " + actual.hijos.get(2).valor + ". Linea: " + (actual.hijos.get(2).linea) + " Columna: " + actual.hijos.get(2).columna);
                        }
                    }
                } else {
                    if (amb2 != 1) {
                        Errores_ambito.add("Error ambito en Condicion con la variable " + actual.hijos.get(2).valor + ". Linea: " + (actual.hijos.get(2).linea) + " Columna: " + actual.hijos.get(2).columna);
                    }
                }
            }
            if (actual.hijos.get(0).nombre.equals("Integer") && actual.hijos.get(2).nombre.equals("Integer")) {
            }
        }

///////////////////////////////Recorrer arbol////////////////////////////////////////////////////////////////////////////////
        for (int i = 0; i < actual.hijos.size(); i++) {
            if (actual.nombre.equals("Function")) {
                ambito = actual.hijos.get(0).valor;
                //offset = 0;
                ambito_cont = 1;
            } else if (actual.nombre.equals("Sub")) {
                ambito = actual.hijos.get(0).valor;
                //offset = 0;
                ambito_cont = 1;
            } else if (actual.nombre.equals("Structure")) {
                ambito = actual.hijos.get(0).valor;
                // offset = 0;
                ambito_cont = 1;
            }

            if (!actual.hijos.get(i).hijos.isEmpty()) {
                llenar_tabla_simbolos(actual.hijos.get(i));
            }
        }
////////////////////////////////////////////////////////////////////////////////////////////        
        if (ambito_control >= 0
                && (actual.nombre.equals("For")
                || actual.nombre.equals("For-step")
                || actual.nombre.equals("If")
                || actual.nombre.equals("Else")
                || actual.nombre.equals("Else_if")
                || actual.nombre.equals("Do-While"))) {
            ambito = ambito.substring(0, ambito.lastIndexOf(","));
            offset = inicioff;
            ambito_control--;
        }
    }

    public static void segundaPasada(Node actual) {
        if (actual.nombre.equals("For")
                || actual.nombre.equals("For-step")
                || actual.nombre.equals("If")
                || actual.nombre.equals("Else")
                || actual.nombre.equals("Else_if")
                || actual.nombre.equals("Do-While")) {
            ambito += "," + ambito_cont;
            ambito_cont++;
            ambito_control++;

        }
///////////////////////////////Comprobaciones ///////////////////////////////////////////////////////////////     
        if (actual.nombre.equals("Function")) {
            String id = actual.hijos.get(0).valor;
            int linea = actual.hijos.get(0).linea;
            int columna = actual.hijos.get(0).columna;
            verificaE(id, linea, columna);
        }
        if (actual.nombre.equals("Sub")) {
            String id = actual.hijos.get(0).valor;
            int linea = actual.hijos.get(0).linea;
            int columna = actual.hijos.get(0).columna;
            verificaE(id, linea, columna);
        }
        if (actual.nombre.equals("Structure")) {
            String id = actual.hijos.get(0).valor;
            int linea = actual.hijos.get(0).linea;
            int columna = actual.hijos.get(0).columna;
            verificaE(id, linea, columna);
        }

        if (actual.nombre.equals("Asignar-var")) {
            /////////////////////////Asignacion de una funcion a una variable
            //Sin argumentos
            if (actual.hijos.get(2).nombre.equals("Id")) {
                if (actual.hijos.size() == 3) {
                    int a1 = validar_variable(actual.hijos.get(0).valor),
                            a2 = existeE(actual.hijos.get(2).valor);
                    if (a1 == 1 && a2 == 1) {
                        String t1 = get_tipo(actual.hijos.get(0).valor),
                                t2 = get_tipo(actual.hijos.get(2).valor);
                        t2 = t2.substring(t2.lastIndexOf(">"), t2.length());
                        t2 = t2.substring(1, t2.length());
                        if (t1.equals(t2)) {
                            comprobar_param(root, actual.hijos.get(2).valor, actual.hijos.get(2).linea);
                        } else {
                            Errores_compTipos.add("Error de tipo en Asignacion con la variable " + actual.hijos.get(2).valor + ". Linea: " + (actual.hijos.get(2).linea) + " Columna: " + actual.hijos.get(2).columna);
                        }
                    } else {
                        if (a1 != 1) {
                            Errores_ambito.add("Error ambito en Asignacion con la variable " + actual.hijos.get(0).valor + ". Linea: " + (actual.hijos.get(0).linea) + " Columna: " + actual.hijos.get(0).columna);
                        }
                        if (a2 != 1) {
                            Errores_ambito.add("Error ambito en Asignacion con la variable " + actual.hijos.get(2).valor + ". Linea: " + (actual.hijos.get(2).linea) + " Columna: " + actual.hijos.get(2).columna);
                        }
                    }
                }

                /// Con argumentos 
                if (actual.hijos.size() == 4) {
                    int a1 = validar_variable(actual.hijos.get(0).valor),
                            a2 = existeE(actual.hijos.get(2).valor);
                    if (a1 == 1 && a2 == 1) {
                        String t1 = get_tipo(actual.hijos.get(0).valor),
                                t2 = get_tipo(actual.hijos.get(2).valor);
                        t2 = t2.substring(t2.lastIndexOf(">"), t2.length());
                        t2 = t2.substring(1, t2.length());
                        if (t1.equals(t2)) {
                            verifica_params(actual.hijos.get(3), actual.hijos.get(2).valor, actual.hijos.get(0).linea);
                        } else {
                            Errores_compTipos.add("Error de tipo en Asignacion con la variable " + actual.hijos.get(2).valor + ". Linea: " + (actual.hijos.get(2).linea) + " Columna: " + actual.hijos.get(2).columna);
                        }
                    } else {
                        if (a1 != 1) {
                            Errores_ambito.add("Error ambito en Asignacion con la variable " + actual.hijos.get(0).valor + ". Linea: " + (actual.hijos.get(0).linea) + " Columna: " + actual.hijos.get(0).columna);
                        }
                        if (a2 != 1) {
                            Errores_ambito.add("Error ambito en Asignacion con la variable " + actual.hijos.get(2).valor + ". Linea: " + (actual.hijos.get(2).linea) + " Columna: " + actual.hijos.get(2).columna);
                        }
                    }
                }
            }

        }

        //----------------------- y utilizacion de structure------------------------------
        if (actual.nombre.equals("Asignar-varS1")) {
            int tipo1 = validar_variable(actual.hijos.get(0).valor);
            if (tipo1 == 1) {
                String tipo2 = get_tipo(actual.hijos.get(0).valor);
                int amb1 = existeE(tipo2);
                int amb2 = validar_variable(actual.hijos.get(3).valor);
                if (amb1 == 1 && amb2 == 1) {
                    String t1 = EncontrarVE(tipo2, actual.hijos.get(1).valor);
                    String t2 = get_tipo(actual.hijos.get(3).valor);
                    if (!t1.equals("")) {
                        if (t1.equals(t2)) {
                        } else {
                            Errores_compTipos.add("Error de tipo en Asignacion con la variable " + actual.hijos.get(3).valor + ". Linea: " + (actual.hijos.get(3).linea) + " Columna: " + actual.hijos.get(3).columna);
                        }
                    } else {
                        Errores_ambito.add("Error ambito en Asignacion con la variable " + actual.hijos.get(1).valor + ". Linea: " + (actual.hijos.get(1).linea) + " Columna: " + actual.hijos.get(1).columna);
                    }
                } else {
                    if (amb1 != 1) {
                        Errores_ambito.add("Error ambito en Asignacion con la variable " + actual.hijos.get(0).valor + ". Linea: " + (actual.hijos.get(0).linea) + " Columna: " + actual.hijos.get(0).columna);
                    }
                    if (amb2 != 1) {
                        Errores_ambito.add("Error ambito en Asignacion con la variable " + actual.hijos.get(3).valor + ". Linea: " + (actual.hijos.get(3).linea) + " Columna: " + actual.hijos.get(3).columna);
                    }
                }
            } else {
                if (tipo1 != 1) {
                    Errores_ambito.add("Error ambito en Asignacion con la variable " + actual.hijos.get(0).valor + ". Linea: " + (actual.hijos.get(0).linea) + " Columna: " + actual.hijos.get(0).columna);
                }
            }

        }
        if (actual.nombre.equals("Asignar-varS2")) {
            int tipo1 = validar_variable(actual.hijos.get(2).valor);
            if (tipo1 == 1) {
                String tipo2 = get_tipo(actual.hijos.get(2).valor);
                int amb1 = existeE(tipo2);
                int amb2 = validar_variable(actual.hijos.get(0).valor);

                if (amb1 == 1 && amb2 == 1) {
                    String t1 = EncontrarVE(tipo2, actual.hijos.get(3).valor);
                    String t2 = get_tipo(actual.hijos.get(0).valor);
                    if (!t1.equals("")) {
                        if (t1.equals(t2)) {
                        } else {
                            Errores_compTipos.add("Error de tipo en Asignacion con la variable " + actual.hijos.get(3).valor + ". Linea: " + (actual.hijos.get(3).linea) + " Columna: " + actual.hijos.get(3).columna);
                        }
                    } else {
                        Errores_ambito.add("Error ambito en Asignacion con la variable " + actual.hijos.get(3).valor + ". Linea: " + (actual.hijos.get(3).linea) + " Columna: " + actual.hijos.get(3).columna);
                    }
                } else {
                    if (amb1 != 1) {
                        Errores_ambito.add("Error ambito en Asignacion con la variable " + actual.hijos.get(2).valor + ". Linea: " + (actual.hijos.get(2).linea) + " Columna: " + actual.hijos.get(2).columna);
                    }
                    if (amb2 != 1) {
                        Errores_ambito.add("Error ambito en Asignacion con la variable " + actual.hijos.get(0).valor + ". Linea: " + (actual.hijos.get(0).linea) + " Columna: " + actual.hijos.get(0).columna);
                    }
                }
            } else {
                Errores_ambito.add("Error ambito en Asignacion con la variable " + actual.hijos.get(2).valor + ". Linea: " + (actual.hijos.get(2).linea) + " Columna: " + actual.hijos.get(2).columna);
            }
        }
///////////////////////////////Recorrer arbol////////////////////////////////////////////////////////////////////////////////
        for (int i = 0; i < actual.hijos.size(); i++) {
            if (actual.nombre.equals("Function")) {
                ambito = actual.hijos.get(0).valor;
                // offset = 0;
                ambito_cont = 1;
            } else if (actual.nombre.equals("Sub")) {
                ambito = actual.hijos.get(0).valor;
                //offset = 0;
                ambito_cont = 1;
            } else if (actual.nombre.equals("Structure")) {
                ambito = actual.hijos.get(0).valor;
                //offset = 0;
                ambito_cont = 1;
            }

            if (!actual.hijos.get(i).hijos.isEmpty()) {
                segundaPasada(actual.hijos.get(i));
            }
        }
////////////////////////////////////////////////////////////////////////////////////////////        
        if (ambito_control >= 0
                && (actual.nombre.equals("For")
                || actual.nombre.equals("For-step")
                || actual.nombre.equals("If")
                || actual.nombre.equals("Else")
                || actual.nombre.equals("Else_if")
                || actual.nombre.equals("Do-While"))) {
            ambito = ambito.substring(0, ambito.lastIndexOf(","));
            ambito_control--;
        }
    }

    public static void agregar(Entry e, int linea, int columna) {
        boolean verifica = false;
        for (int i = 0; i < tabla_simbolos.size(); i++) {
            if (e.id.equals(tabla_simbolos.get(i).id)) {
                if (ambito.contains(tabla_simbolos.get(i).ambito)) {
                    verifica = true;
                    break;
                }
            }

        }
        if (verifica == true) {
            Errores_ambito.add("Error linea: " + linea + " columna: " + columna + " la variable " + e.id + " ya fue declarada en el mismo ambito");
        } else {
            tabla_simbolos.add(e);
            if (e.tipo.equals("Integer")) {
                offset += 4;
            } else if (e.tipo.equals("String")) {
                offset += 4;
            } else if (e.tipo.equals("Boolean")) {
                offset += 2;
            }

        }

    }

///Agregar estructura FUNCTION, SUB , STRUCTURE
    public static void verificaE(String id, int linea, int columna) {
        int verifica = 0;
        for (int i = 0; i < tabla_simbolos.size(); i++) {
            if (tabla_simbolos.get(i).ambito.equals("module")) {
                if (id.equals(tabla_simbolos.get(i).id)) {
                    verifica++;
                }
            }
        }
        if (verifica > 1) {
            Errores_ambito.add("Error linea: " + linea + " columna: " + columna + " la variable " + id + " ya fue declarada en el mismo ambito");
        }

    }

// Valida que la variable exista en el ambito
    public static int validar_variable(String e) {
        int verifica = 0;
        for (int i = 0; i < tabla_simbolos.size(); i++) {
            if (e.equals(tabla_simbolos.get(i).id)) {
                if (ambito.contains(tabla_simbolos.get(i).ambito)) {
                    verifica = 1;
                    break;
                }
            }
        }
        return verifica;
    }

///Valida la operacion aritmetica
    public static void validar_oa(Node e) {//validar operacion aritmetica

        if (e.nombre.equals("Valor")) {
            if (e.hijos.get(0).nombre.equals("Id")) {
                if (validar_variable(e.hijos.get(0).valor) == 1) {
                    if (get_tipo(e.hijos.get(0).valor).equals("Integer")) {
                    } else {
                        Errores_compTipos.add("Error de tipo en Condicion con la variable " + e.hijos.get(0).valor + ". Linea: " + (e.hijos.get(0).linea) + " Columna: " + e.hijos.get(0).columna);
                    }
                } else {
                    Errores_ambito.add("Error ambito en Condicion con la variable " + e.hijos.get(0).valor + ". Linea: " + (e.hijos.get(0).linea) + " Columna: " + e.hijos.get(0).columna);
                }
            }
        }

        for (int i = 0; i < e.hijos.size(); i++) {
            if (!e.hijos.get(i).hijos.isEmpty()) {
                validar_oa(e.hijos.get(i));
            }
        }
    }
////////////////////////////////miras los tipos de los parametros

    public static void tipos_param(Node e, String a) {
        if (e.nombre.equals("Param")) {
            tiposf += e.hijos.get(1).valor + " x ";
        }

        for (int i = 0; i < e.hijos.size(); i++) {
            if (!e.hijos.get(i).hijos.isEmpty()) {
                tipos_param(e.hijos.get(i), a);
            }
        }
    }

///Agrega los parametros de una function
    public static void agregar_param(Node e, String a) {
        if (e.nombre.equals("Param")) {
            tabla_simbolos.add(new Entry(e.hijos.get(0).valor, e.hijos.get(1).valor, a, -1, activo));
        }

        for (int i = 0; i < e.hijos.size(); i++) {
            if (!e.hijos.get(i).hijos.isEmpty()) {
                agregar_param(e.hijos.get(i), a);
            }
        }
    }

//Obtiene el tipo de una variable
    public static String get_tipo(String nombre) {////////obtener el tipo de una variable
        for (int i = 0; i < tabla_simbolos.size(); i++) {
            if (tabla_simbolos.get(i).id.equals(nombre)) {
                return tabla_simbolos.get(i).tipo;
            }
        }
        return "";
    }

    public static boolean existe(String s) {
        for (int i = 0; i < tabla_simbolos.size(); i++) {
            if (s.equals(tabla_simbolos.get(i).id)) {
                if (ambito.contains(tabla_simbolos.get(i).ambito)) {
                    return true;
                }
            }
        }
        return false;
    }

//revisa las estructuras Funtion
    public static int existeE(String s) {///esxiste function o structure
        int validar = 0;
        for (int i = 0; i < tabla_simbolos.size(); i++) {
            if (s.equals(tabla_simbolos.get(i).id)) {
                validar++;
            }
        }
        if (validar > 0) {
            return 1;
        } else {
            return 0;
        }
    }

//verifica los parametros
    public static void verifica_params(Node actual, String f, int linea) {
        auxiliarParams = 0;
        Params = new ArrayList<String>();
        Argumentos = new ArrayList<String>();
        show_argumentos(actual);
        add_params(f, root);
        if (auxiliarParams == 0) {
            Errores_ambito.add("Error en la funcion " + f + " ya que es sin parametros linea " + linea);
        }
        if (Params.size() == Argumentos.size()) {
            int tam = Params.size();
            for (int i = 0; i < tam; i++) {
                if (Params.get(i).equals(Argumentos.get(i))) {
                } else {
                    Errores_compTipos.add("Error de tipos en los argumentos linea: " + linea + " inconpatibles " + Params.get(i) + " con " + Argumentos.get(i));
                }
            }
        } else {
            Errores_ambito.add("Error en tamaño de los argumentos linea: " + linea);
        }
        auxiliarParams = 0;
        Params = new ArrayList<String>();
        Argumentos = new ArrayList<String>();

    }

    public static void show_argumentos(Node e) {
        if (e.nombre.equals("Argu")) {
            if (e.hijos.get(0).nombre.equals("Id")) {
                if (validar_variable(e.hijos.get(0).valor) == 1) {
                    Argumentos.add(get_tipo(e.hijos.get(0).valor));
                } else {
                    Errores_ambito.add("Error ambito en Argumentos con la variable " + e.hijos.get(0).valor + ". Linea: " + (e.hijos.get(0).linea) + " Columna: " + e.hijos.get(0).columna);
                }
            }
            if (e.hijos.get(0).nombre.equals("Integer")
                    || e.hijos.get(0).nombre.equals("String")
                    || e.hijos.get(0).nombre.equals("Boolean")) {
                Argumentos.add(e.hijos.get(0).nombre);
            }
        }

        for (int i = 0; i < e.hijos.size(); i++) {
            if (!e.hijos.get(i).hijos.isEmpty()) {
                show_argumentos(e.hijos.get(i));
            }
        }

    }

    public static void add_params(String f, Node e) {
        if (e.nombre.equals("Function") && e.hijos.get(0).valor.equals(f)) {
            if (e.hijos.size() == 4) {
                auxiliarParams++;
                show_params(e);
            }
        }
        for (int i = 0; i < e.hijos.size(); i++) {
            if (!e.hijos.get(i).hijos.isEmpty()) {
                add_params(f, e.hijos.get(i));
            }
        }
    }

    public static void show_params(Node e) {
        if (e.nombre.equals("Param")) {
            Params.add(e.hijos.get(1).valor);
        }

        for (int i = 0; i < e.hijos.size(); i++) {
            if (!e.hijos.get(i).hijos.isEmpty()) {
                show_params(e.hijos.get(i));
            }
        }
    }

//verifica si la funcion es void
    public static void comprobar_param(Node e, String f, int linea) {
        if (e.nombre.equals("Function") && e.hijos.get(0).valor.equals(f)) {
            if (e.hijos.size() == 3) {
            } else {
                Errores_ambito.add("Error en la funcion " + f + " ya que esta tiene parametros linea " + linea);
            }
        }

        for (int i = 0; i < e.hijos.size(); i++) {
            if (!e.hijos.get(i).hijos.isEmpty()) {
                comprobar_param(e.hijos.get(i), f, linea);
            }
        }
    }

    public static String EncontrarVE(String nombre, String var) {
        auxiliarStr = "";
        AyudaE(root, nombre, var);
        String retorno = auxiliarStr;
        auxiliarStr = "";
        return retorno;
    }

    public static void AyudaE(Node e, String nombre, String var) {
        if (e.nombre.equals("Structure") && e.hijos.get(0).valor.equals(nombre)) {
            VerV(e, var);
        }
        for (int i = 0; i < e.hijos.size(); i++) {
            if (!e.hijos.get(i).hijos.isEmpty()) {
                AyudaE(e.hijos.get(i), nombre, var);
            }
        }
    }

    public static void VerV(Node e, String var) {
        if (e.nombre.equals("Struct-body")) {
            if (e.hijos.get(0).valor.equals(var)) {
                auxiliarStr = e.hijos.get(1).valor;
            }
        }
        for (int i = 0; i < e.hijos.size(); i++) {
            if (!e.hijos.get(i).hijos.isEmpty()) {
                VerV(e.hijos.get(i), var);
            }
        }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////      Codigo intermedio
    public static void Cuadruplos(Node root) {
        boolean salto = false;
        boolean code_block = false;
        boolean falta = false;
        boolean func = false;
        boolean sub = false;
        padre = root;
        if (root.nombre.equals("Code") && root.hijos.size() > 1) {
            if (root.hijos.get(1).nombre.equals("Do-While")
                    || root.hijos.get(1).nombre.equals("For")
                    || root.hijos.get(1).nombre.equals("If")) {
                code_block = true;
                root.siguiente = etiqueta_nueva();
                root.hijos.get(1).siguiente = root.siguiente;
            }
        } else if (root.nombre.equals("Code") && root.hijos.size() == 1) {
            if (root.hijos.get(0).nombre.equals("Do-While")
                    || root.hijos.get(0).nombre.equals("For")
                    || root.hijos.get(0).nombre.equals("If")) {
                code_block = true;
                root.siguiente = etiqueta_nueva();
                root.hijos.get(0).siguiente = root.siguiente;
            }
        }
        if (root.nombre.equals("Do-While")) {
            salto = true;
            root.comienzo = etiqueta_nueva();
            cuadruplos.add(new Cuadruplo("ETIQ", root.comienzo, "", ""));
            root.hijos.get(0).verdadera = etiqueta_nueva();
            root.hijos.get(0).falsa = root.siguiente;
            System.out.println(root.hijos.get(0).nombre);
            codigoCondicion(root.hijos.get(0));
            cuadruplos.add(new Cuadruplo("ETIQ", root.hijos.get(0).verdadera, "", ""));
            root.hijos.get(1).siguiente = root.comienzo;
            Cuadruplos(root.hijos.get(1));
            cuadruplos.add(new Cuadruplo("GOTO", root.comienzo, "", ""));
        } else if (root.nombre.equals("For")) {
            salto = true;
            cuadruplos.add(new Cuadruplo("=", root.hijos.get(2).valor, "", root.hijos.get(0).valor));
            root.comienzo = etiqueta_nueva();
            cuadruplos.add(new Cuadruplo("ETIQ", root.comienzo, "", ""));
            codigoOpcionales(root.hijos.get(3));
            String verdadera = etiqueta_nueva();
            cuadruplos.add(new Cuadruplo("if <=", root.hijos.get(1).valor, root.hijos.get(3).lugar, verdadera));
            cuadruplos.add(new Cuadruplo("GOTO", root.siguiente, "", ""));
            root.asig = etiqueta_nueva();
            root.hijos.get(4).siguiente = root.asig;
            cuadruplos.add(new Cuadruplo("ETIQ", verdadera, "", ""));
            Cuadruplos(root.hijos.get(4));
            cuadruplos.add(new Cuadruplo("ETIQ", root.asig, "", ""));
            String temp = temporal_nuevo();
            cuadruplos.add(new Cuadruplo("+", root.hijos.get(0).valor, "1", temp));
            cuadruplos.add(new Cuadruplo("=", temp, "", root.hijos.get(0).valor));
            cuadruplos.add(new Cuadruplo("GOTO", root.comienzo, "", ""));
        } else if (root.nombre.equals("For-step")) {
            salto = true;
            cuadruplos.add(new Cuadruplo("=", root.hijos.get(2).valor, "", root.hijos.get(0).valor));
            root.comienzo = etiqueta_nueva();
            cuadruplos.add(new Cuadruplo("ETIQ", root.comienzo, "", ""));
            codigoOpcionales(root.hijos.get(3));
            String verdadera = etiqueta_nueva();
            cuadruplos.add(new Cuadruplo("if <=", root.hijos.get(1).valor, root.hijos.get(3).lugar, verdadera));
            cuadruplos.add(new Cuadruplo("GOTO", root.siguiente, "", ""));
            root.asig = etiqueta_nueva();
            root.hijos.get(5).siguiente = root.asig;
            cuadruplos.add(new Cuadruplo("ETIQ", verdadera, "", ""));
            Cuadruplos(root.hijos.get(5));
            cuadruplos.add(new Cuadruplo("ETIQ", root.asig, "", ""));
            String temp = temporal_nuevo();
            cuadruplos.add(new Cuadruplo("+", root.hijos.get(0).valor, root.hijos.get(4).valor, temp));
            cuadruplos.add(new Cuadruplo("=", temp, "", root.hijos.get(0).valor));
            cuadruplos.add(new Cuadruplo("GOTO", root.comienzo, "", ""));
        } else if (root.nombre.equals("Write")) {
            if (root.hijos.get(0).nombre.equals("Integer")) {
                cuadruplos.add(new Cuadruplo("print", root.hijos.get(0).valor, "Integer", ""));
            } else if (root.hijos.get(0).nombre.equals("Id")) {
                codigoOpcionales(root.hijos.get(0));
                cuadruplos.add(new Cuadruplo("print", root.hijos.get(0).valor, get_tipo(root.hijos.get(0).valor), ""));
            }
        } else if (root.nombre.equals("Asignar-var")) {
            ///Asignacion normal con id,Boolean, String, Integer
            if (root.hijos.size() == 3) {
                if (root.hijos.get(2).hijos.size() == 0) {///para String y Boolean
                    codigoOpcionales(root.hijos.get(2));
                    cuadruplos.add(new Cuadruplo("=", root.hijos.get(2).lugar, "", root.hijos.get(0).valor));
                }
                if (root.hijos.get(2).hijos.size() == 1) {//para id y Integer
                    String valor = root.hijos.get(2).hijos.get(0).hijos.get(0).nombre;
                    if (valor.equals("Integer")) {///Integer
                        String asignar = root.hijos.get(2).hijos.get(0).hijos.get(0).valor;
                        cuadruplos.add(new Cuadruplo("=", asignar, "", root.hijos.get(0).valor));
                    }
                    if (valor.equals("Id")) {
                        String asignar = root.hijos.get(2).hijos.get(0).hijos.get(0).valor;
                        cuadruplos.add(new Cuadruplo("=", asignar, "", root.hijos.get(0).valor));
                    }
                }
            }
        } else if (root.nombre.equals("Asignar-varF")) {
            contparam=0;
            if (root.hijos.size() == 3) {
                cuadruplos.add(new Cuadruplo("call", root.hijos.get(2).valor, "0", ""));
                root.hijos.get(2).lugar = temporal_nuevo();
                cuadruplos.add(new Cuadruplo("=", "RET", "", root.hijos.get(2).lugar));
                cuadruplos.add(new Cuadruplo("=", root.hijos.get(2).lugar, "", root.hijos.get(0).valor));
            }
            if (root.hijos.size() == 4) {
                agregar_paramIntermedio(root.hijos.get(3));
                cuadruplos.add(new Cuadruplo("call", root.hijos.get(2).valor, ""+contparam, ""));
                root.hijos.get(2).lugar = temporal_nuevo();
                cuadruplos.add(new Cuadruplo("=", "RET", "", root.hijos.get(2).lugar));
                cuadruplos.add(new Cuadruplo("=", root.hijos.get(2).lugar, "", root.hijos.get(0).valor));
            }
        } else if (root.nombre.equals("Function")) {
            func = true;
            cuadruplos.add(new Cuadruplo("F_ETIQ", root.hijos.get(0).valor, "", ""));
        } else if (root.nombre.equals("Sub")) {
            sub = true;
            cuadruplos.add(new Cuadruplo("S_ETIQ", root.hijos.get(0).valor, "", ""));
        } else if (root.nombre.equals("Dim-read")) {
            cuadruplos.add(new Cuadruplo("read", root.hijos.get(0).valor, get_tipo(root.hijos.get(0).valor), ""));
        } else if (root.nombre.equals("If")) {
            salto = true;
            if (root.hijos.size() > 1) {
                if (padre.hijos.size() == 1) {
                    root.hijos.get(0).verdadera = etiqueta_nueva();
                    root.hijos.get(0).falsa = root.siguiente;
                    codigoCondicion(root.hijos.get(0));
                    cuadruplos.add(new Cuadruplo("ETIQ", root.hijos.get(0).verdadera, "", ""));
                    root.hijos.get(1).siguiente = root.siguiente;
                    Cuadruplos(root.hijos.get(1));
                } else if (padre.hijos.size() == 2 && padre.hijos.get(1).nombre.equals("Code")) {
                    //solo if
                    root.hijos.get(0).verdadera = etiqueta_nueva();
                    root.hijos.get(0).falsa = root.siguiente;
                    codigoCondicion(root.hijos.get(0));
                    cuadruplos.add(new Cuadruplo("ETIQ", root.hijos.get(0).verdadera, "", ""));
                    root.hijos.get(1).siguiente = root.siguiente;
                    Cuadruplos(root.hijos.get(1));
                } else {
                    //if con else o else if
                    root.hijos.get(0).verdadera = etiqueta_nueva();
                    root.hijos.get(0).falsa = etiqueta_nueva();
                    codigoCondicion(root.hijos.get(0));
                    cuadruplos.add(new Cuadruplo("ETIQ", root.hijos.get(0).verdadera, "", ""));
                    root.hijos.get(1).siguiente = root.siguiente;
                    padre.hijos.get(1).siguiente = padre.siguiente;
                    Cuadruplos(root.hijos.get(1));
                    cuadruplos.add(new Cuadruplo("GOTO", root.siguiente, "", ""));
                    cuadruplos.add(new Cuadruplo("ETIQ", root.hijos.get(0).falsa, "", ""));
                    //f.hijos.get(1).siguiente = root.siguiente;
                    //cuadruplos(f.hijos.get(1));
                }
            }
        }

        for (int i = 0; i < root.hijos.size(); i++) {
            if (root.nombre.equals("CODE")) {
                for (int j = 0; j < root.hijos.size(); j++) {
                    if (root.hijos.get(j).nombre.equals("If")) {
                        padre = root;
                        break;
                    }
                }
            }
            if (code_block) {
                if (i == root.hijos.size() - 1 && !root.hijos.get(i).nombre.equals("Code")) {
                    falta = true;
                }
                if (root.hijos.get(i).nombre.equals("Code")) {
                    cuadruplos.add(new Cuadruplo("ETIQ", root.siguiente, "", ""));
                    falta = false;
                }
            }
            if (!salto) {
                Cuadruplos(root.hijos.get(i));
            }
        }
        if (falta) {
            cuadruplos.add(new Cuadruplo("ETIQ", root.siguiente, "", ""));
        }
        if (func) {
            cuadruplos.add(new Cuadruplo("E_ETIQ", "fin" + root.hijos.get(0).valor, "", ""));
        }
        if (sub) {
            cuadruplos.add(new Cuadruplo("S_ETIQ", "fin" + root.hijos.get(0).valor, "", ""));
        }
    }

    public static void codigoCondicion(Node actual) {
        if (actual.nombre.equals("Condicion") && actual.hijos.size() > 1) {
            codigoOpcionales(actual.hijos.get(0));
            codigoOpcionales(actual.hijos.get(2));
            String val = "if " + actual.hijos.get(1).valor;
            cuadruplos.add(new Cuadruplo(val, actual.hijos.get(0).lugar, actual.hijos.get(2).lugar, actual.verdadera));
            cuadruplos.add(new Cuadruplo("GOTO", actual.falsa, "", ""));
        } else if (actual.nombre.equals("Condicion") && actual.hijos.size() == 1) {
            codigoOpcionales(actual.hijos.get(0).hijos.get(0));
            codigoOpcionales(actual.hijos.get(0).hijos.get(2));
            String val = "if " + actual.hijos.get(0).hijos.get(1).valor;
            cuadruplos.add(new Cuadruplo(val, actual.hijos.get(0).hijos.get(0).lugar, actual.hijos.get(0).hijos.get(2).lugar, actual.hijos.get(0).verdadera));
            cuadruplos.add(new Cuadruplo("GOTO", actual.hijos.get(0).falsa, "", ""));
        }
    }

    public static void codigoOpcionales(Node root) {
        for (int i = 0; i < root.hijos.size(); i++) {
            codigoOpcionales(root.hijos.get(i));
        }
        boolean funcion = false;
        if (root.nombre.equals("ID")) {
            String type = get_tipo(root.valor);
            //verificar
            if (type.contains("->")) {
                funcion = true;
            }
        }
        //////////////////
        if (root.nombre.equals("Integer") || root.nombre.equals("Id") && root.hijos.size() == 0
                && !funcion || root.nombre.equals("String") || root.nombre.equals("Boolean")) {
            root.lugar = root.valor;
        }
    }

    public static String temporal_nuevo() {
        String r = "t" + temporales;
        temporales = temporales + 1;
        return r;
    }

    public static String etiqueta_nueva() {
        String r = "etiq" + etiquetas;
        etiquetas = etiquetas + 1;
        return r;
    }
    
    public static void agregar_paramIntermedio(Node e) {
        if (e.nombre.equals("Argu")) {
            String tam="";
            contparam++;
            if (e.hijos.get(0).nombre.equals("Integer")
                || e.hijos.get(0).nombre.equals("String")    
                ) {
                tam="4";
            }else if(e.hijos.get(0).nombre.equals("Boolean")){
                tam="2";
            }else if(e.hijos.get(0).nombre.equals("Id")){
                String temp=get_tipo(e.hijos.get(0).valor);
                if (temp.equals("Integer") || temp.equals("String")) {
                    tam="4";
                }else if (temp.equals("Boolean")) {
                    tam="2";
                }
            }
             cuadruplos.add(new Cuadruplo("param", e.hijos.get(0).valor, tam, ""));
        }

        for (int i = 0; i < e.hijos.size(); i++) {
            if (!e.hijos.get(i).hijos.isEmpty()) {
                agregar_paramIntermedio(e.hijos.get(i));
            }
        }
    }
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////   Codigo final

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }
//verifica si la funcion es en realidad con params o sin params

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog arbolin;
    private javax.swing.JButton bt_abrir;
    private javax.swing.JButton bt_syntax1;
    private javax.swing.JButton bt_syntax2;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTree jtree;
    private javax.swing.JLabel label_columna;
    private javax.swing.JLabel label_linea;
    private javax.swing.JTextArea ta_entrada;
    private javax.swing.JTextArea ta_syntax_result;
    // End of variables declaration//GEN-END:variables
    public static Node root, padre;
    DefaultMutableTreeNode arbol;
    ///////////////////tipos///////////////////////////////////////////
    public static ArrayList<Entry> tabla_simbolos = new ArrayList<Entry>();
    public static ArrayList<String> Errores_compTipos = new ArrayList<String>();
    public static Syntax s;
    public static ArrayList<String> Params = new ArrayList<String>();//auxiliar de comprobacion
    public static String tiposf = "";
    public static ArrayList<String> Argumentos = new ArrayList<String>();//auxiliar de comprobacion
    public static int auxiliarParams = 0;
    public static String auxiliarStr = "";
    ///////////////////////////////////ambito//////////////////
    public static int ambito_cont = 0, ambito_control = -1, offset = 0, inicioff = 0;
    public static String ambito = "";
    public static boolean activo = true;
    public static ArrayList<String> Errores_ambito = new ArrayList<String>();
    /////////////////////////////////codigo intermedio//////////////////////////
    public static ArrayList<Cuadruplo> cuadruplos = new ArrayList();
    public static int temporales = 0, cantparam = 0, etiquetas = 0,contparam=0;
    ////////////////////////////////codigo final///////////////////////////////////
}
