package proyectocompi;

import java.awt.BorderLayout;
import java.awt.Color;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StringReader;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import java_cup.runtime.Symbol;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.JTextPane;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
    }

    private void analizarLexico() throws IOException {
        try {
            String expr = (String) ta_entrada.getText();
            Lexer lexer = new Lexer(new StringReader(expr));
            String resultado = "";
            while (true) {
                Tokens tokens = lexer.yylex();
                if (tokens == null) {
                    resultado += "# Fin del archivo #";
                    ta_syntax_result.setText(resultado);
                    return;
                }
                switch (tokens) {
                    case Error:
                        resultado += "Simbolo no definido\n";
                        break;
                    case Newline:
                        resultado += "< " + tokens + " >" + "\n";
                        break;
                    case Num:
                    case Parizq:
                    case Parder:
                    case Coma:
                    case End:
                    case Write:
                    case Read:
                    case SumaResta:
                    case MultDiv:
                    case Igual:
                    case OpRel:
                    case Ampersand:
                    case If:
                    case Then:
                    case Else:
                    case ElseIf:
                    case For:
                    case To:
                    case Next:
                    case Step:
                    case Do:
                    case While:
                    case Loop:
                    case ByVal:
                    case Function:
                    case Sub:
                    case Structure:
                    case Module:
                    case TypeBoolean:
                    case TypeInteger:
                    case TypeString:
                    case Dim:
                    case As:
                    case Id:
                    case ContString:
                        resultado += "< " + tokens + ", " + lexer.lexema + " >" + "\n";
                        break;
                    default:
                        resultado += "Token: " + tokens + "\n";
                        break;
                }
            }
        } catch (Exception e) {

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        arbolin = new javax.swing.JDialog();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jtree = new javax.swing.JTree();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        ta_entrada = new javax.swing.JTextArea();
        jScrollPane5 = new javax.swing.JScrollPane();
        ta_syntax_result = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        bt_abrir = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        label_linea = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        label_columna = new javax.swing.JLabel();
        bt_syntax1 = new javax.swing.JButton();
        bt_syntax2 = new javax.swing.JButton();

        jLabel2.setText("AST");

        jButton1.setText("Generar arbol");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        jtree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jScrollPane4.setViewportView(jtree);

        javax.swing.GroupLayout arbolinLayout = new javax.swing.GroupLayout(arbolin.getContentPane());
        arbolin.getContentPane().setLayout(arbolinLayout);
        arbolinLayout.setHorizontalGroup(
            arbolinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(arbolinLayout.createSequentialGroup()
                .addGap(284, 284, 284)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 100, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(93, 93, 93))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, arbolinLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4)
                .addGap(49, 49, 49))
        );
        arbolinLayout.setVerticalGroup(
            arbolinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(arbolinLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(arbolinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jButton1))
                .addGap(31, 31, 31)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(41, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Código", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 18))); // NOI18N

        ta_entrada.setColumns(20);
        ta_entrada.setRows(5);
        ta_entrada.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                ta_entradaCaretUpdate(evt);
            }
        });
        jScrollPane2.setViewportView(ta_entrada);

        ta_syntax_result.setColumns(20);
        ta_syntax_result.setRows(5);
        jScrollPane5.setViewportView(ta_syntax_result);

        jLabel3.setText("SALIDA");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(13, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 508, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(167, 167, 167)
                        .addComponent(jLabel3))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 399, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 515, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        bt_abrir.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        bt_abrir.setText("Abrir");
        bt_abrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_abrirActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabel1.setText("Línea:");

        label_linea.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        label_linea.setText("0");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabel5.setText("Columna");

        label_columna.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        label_columna.setText("0");

        bt_syntax1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        bt_syntax1.setText("Arbol");
        bt_syntax1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_syntax1ActionPerformed(evt);
            }
        });

        bt_syntax2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        bt_syntax2.setText("Compilar");
        bt_syntax2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_syntax2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(label_linea)
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(label_columna)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                .addComponent(bt_syntax1)
                .addGap(31, 31, 31)
                .addComponent(bt_syntax2)
                .addGap(46, 46, 46)
                .addComponent(bt_abrir)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bt_abrir)
                    .addComponent(jLabel1)
                    .addComponent(label_linea)
                    .addComponent(jLabel5)
                    .addComponent(label_columna)
                    .addComponent(bt_syntax1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bt_syntax2))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(35, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bt_abrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_abrirActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);
        File archivo = new File(chooser.getSelectedFile().getAbsolutePath());
        try {
            String ST = new String(Files.readAllBytes(archivo.toPath()));
            ta_entrada.setText(ST);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_bt_abrirActionPerformed

    private void ta_entradaCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_ta_entradaCaretUpdate
        try {
            int caretpos = ta_entrada.getCaretPosition();
            int x1 = ta_entrada.getLineOfOffset(caretpos);
            //System.out.println("x1: " + x1);
            label_linea.setText(String.valueOf(x1 + 1));
            int x2 = caretpos - ta_entrada.getLineStartOffset(x1);
            //System.out.println("x2: " + x2);
            label_columna.setText(String.valueOf(x2 + 1));
        } catch (Exception e) {
        }
    }//GEN-LAST:event_ta_entradaCaretUpdate

    private void bt_syntax1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_syntax1ActionPerformed
        try {
            arbolin.setModal(true);
            arbolin.pack();
            arbolin.setLocationRelativeTo(this);
            arbolin.setVisible(true);
        } catch (Exception e) {
        }
    }//GEN-LAST:event_bt_syntax1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            arbol = new DefaultMutableTreeNode(root);
            DefaultTreeModel modelo = (DefaultTreeModel) jtree.getModel();
            llenar(root, arbol);
            modelo.setRoot(arbol);
            jtree.setModel(modelo);
        } catch (Exception e) {
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void bt_syntax2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_syntax2ActionPerformed
////////////////////////////Reinicio//////////////////////////////////////////////////////////////////////////////
        tabla_simbolos = new ArrayList<Entry>();
        Errores_compTipos = new ArrayList<String>();
        Errores_ambito = new ArrayList<String>();
        ambito_cont = 1;
        ambito_control = -1;
        offset = 0;
        ambito = "";

/////////////////////////////Parte lexica/////////////////////////////////////////////////////////////////////////
        try {
            analizarLexico();
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
/////////////////////////////Parte sintactica//////////////////////////////////////////////////////////////////////
        String ST = ta_entrada.getText();
        s = new Syntax(new proyectocompi.Lexer_Syn(new StringReader(ST)));

        try {
            s.parse();
            root = s.raiz;
            ta_syntax_result.setText("Análisis sintáctico finalizado");
            ta_syntax_result.setForeground(new Color(25, 111, 61));
        } catch (Exception ex) {
            Symbol sym = s.getS();
            ta_syntax_result.setText("Error de sintaxis. Linea: " + (sym.right + 1) + " Columna: " + (sym.left + 1) + ", Texto: \"" + sym.value + "\"");
            ta_syntax_result.setForeground(Color.red);
        }
//////////////////////////////Parte Semantica////////////////////////////////////////////////////////////////////////
////--------------------------Comprobar tipos ---------------------------------------------------------------------
        tabla_simbolos = new ArrayList<Entry>();
        Errores_compTipos = new ArrayList();
        llenar_tabla_simbolos(root);

        try {
            String mensaje = "";
            for (int i = 0; i < tabla_simbolos.size(); i++) {
                mensaje += "ID: " + tabla_simbolos.get(i).id
                        + " TIPO: " + tabla_simbolos.get(i).tipo
                        + " AMBITO: " + tabla_simbolos.get(i).ambito
                        + " OFFSET: " + tabla_simbolos.get(i).offset + "\n";
            }
            System.out.println(mensaje);
        } catch (Exception e) {
        }
        System.out.println("Errorees tipos" + Errores_compTipos.size());
        for (int i = 0; i < Errores_compTipos.size(); i++) {
            System.out.println(Errores_compTipos.get(i));
        }
        System.out.println("Errores ambito");
        for (int i = 0; i < Errores_ambito.size(); i++) {
            System.out.println(Errores_ambito.get(i));
        }
    }//GEN-LAST:event_bt_syntax2ActionPerformed
    public static void llenar(Node root, DefaultMutableTreeNode current) {
        for (int i = 0; i < root.hijos.size(); i++) {
            current.add(new DefaultMutableTreeNode(root.hijos.get(i)));
            if (!root.hijos.get(i).hijos.isEmpty()) {
                llenar(root.hijos.get(i), (DefaultMutableTreeNode) current.getChildAt(i));
            }
        }
    }
/////////////////////////////////////Comprobar Tipos//////////////////////////////////////////////////////////////////////////

    public static void llenar_tabla_simbolos(Node actual) {
        if (actual.nombre.equals("For")
                || actual.nombre.equals("For-step")
                || actual.nombre.equals("If")
                || actual.nombre.equals("Else")
                || actual.nombre.equals("Else_if")
                || actual.nombre.equals("Do-While")) {
            ambito += "," + ambito_cont;
            ambito_cont++;
            ambito_control++;

        }
////////////////////////////////////////Dim////////////////////////////////////////////////////////////////////////////////////
        if (actual.nombre.equals("Dim")) {
            agregar(new Entry(actual.hijos.get(0).valor, actual.hijos.get(1).valor, ambito, offset, activo), actual.hijos.get(0).linea, actual.hijos.get(0).columna);
        }
////////////////////////////////////////Asignar///////////////////////////////////////////////////////////////////////////////        

        if (actual.nombre.equals("Asignar-var")) {
            if (actual.hijos.get(2).hijos.size() > 1) {
                Node temp = actual.hijos.get(2);
                validar_oa(temp);
            }
//----------------------------------solo 1  valor Id o Num--------------------------------------------------------------      
            if (actual.hijos.get(2).hijos.size() == 1) {
                Node temp = actual.hijos.get(2).hijos.get(0);
                if (temp.nombre.equals("Valor")) {
                    //id
                    if (temp.hijos.get(0).nombre.equals("Id")) {
                        int amb1 = validar_variable(actual.hijos.get(0).valor),
                                amb2 = validar_variable(temp.hijos.get(0).valor);
                        if (amb1 == 1
                                && amb2 == 1) {
                            String t1 = get_tipo(actual.hijos.get(0).valor),
                                    t2 = get_tipo(temp.hijos.get(0).valor);
                            if (t1.equals("Integer") && t2.equals("Integer")) {
                            } else {
                                if (!t1.equals("Integer")) {
                                    Errores_compTipos.add("Error de tipo en Asignacion con la variable " + actual.hijos.get(0).valor + ". Linea: " + (actual.hijos.get(0).linea) + " Columna: " + actual.hijos.get(0).columna);
                                }
                                if (!t2.equals("Integer")) {
                                    Errores_compTipos.add("Error de tipo en Asignacion con la variable " + temp.hijos.get(0).valor + ". Linea: " + (temp.hijos.get(0).linea) + " Columna: " + temp.hijos.get(0).columna);
                                }
                            }
                        } else {
                            if (amb1 != 1) {
                                Errores_ambito.add("Error ambito en Asignacion con la variable " + actual.hijos.get(0).valor + ". Linea: " + (actual.hijos.get(0).linea) + " Columna: " + actual.hijos.get(0).columna);
                            }
                            if (amb2 != 1) {
                                Errores_ambito.add("Error ambito en Condicion con la variable " + temp.hijos.get(0).valor + ". Linea: " + (temp.hijos.get(0).linea) + " Columna: " + temp.hijos.get(0).columna);
                            }
                        }
                    }
                    //Integer
                    if (temp.hijos.get(0).nombre.equals("Integer")) {
                        int amb1 = validar_variable(actual.hijos.get(0).valor);
                        if (amb1 == 1) {
                            String t1 = get_tipo(actual.hijos.get(0).valor);
                            if (t1.equals("Integer")) {
                            } else {
                                if (!t1.equals("Integer")) {
                                    Errores_compTipos.add("Error de tipo en Asignacion con la variable " + actual.hijos.get(0).valor + ". Linea: " + (actual.hijos.get(0).linea) + " Columna: " + actual.hijos.get(0).columna);
                                }
                            }
                        } else {
                            if (amb1 != 1) {
                                Errores_ambito.add("Error ambito en Asignacion con la variable " + actual.hijos.get(0).valor + ". Linea: " + (actual.hijos.get(0).linea) + " Columna: " + actual.hijos.get(0).columna);
                            }
                        }
                    }
                }
            }

        }

///////////////////////////////Comprobar for//////////////////////////////////////////////////////////////////////////////////
        if (actual.nombre.equals("For")) {
            if (validar_variable(actual.hijos.get(0).valor) == 1) {
                if (get_tipo(actual.hijos.get(0).valor).equals("Integer")) {
                    if (actual.hijos.get(2).nombre.equals("Integer")) {
                    } else {
                        Errores_compTipos.add("Error de tipo en For con la variable " + actual.hijos.get(0).valor + ". Linea: " + (actual.hijos.get(2).linea) + " Columna: " + actual.hijos.get(2).columna);
                    }
                    if (actual.hijos.get(3).nombre.equals("Integer")) {
                    } else {
                        Errores_compTipos.add("Error de tipo en For con la variable " + actual.hijos.get(0).valor + ". Linea: " + (actual.hijos.get(3).linea) + " Columna: " + actual.hijos.get(3).columna);
                    }

                } else {
                    System.out.println("llegamos");
                    Errores_compTipos.add("Error de tipo en For con la variable " + actual.hijos.get(0).valor + ". Linea: " + (actual.hijos.get(0).linea) + " Columna: " + actual.hijos.get(0).columna);
                }
            } else {
                Errores_ambito.add("Error ambito en For con la variable " + actual.hijos.get(0).valor + ". Linea: " + (actual.hijos.get(0).linea) + " Columna: " + actual.hijos.get(0).columna);
            }
        }
///////////////////////////////Comprobar Write////////////////////////////////////////////////////////////////////////////////
        if (actual.nombre.equals("Write")) {
            if (validar_variable(actual.hijos.get(0).valor) == 1) {
                if (get_tipo(actual.hijos.get(0).valor).equals("Integer")
                        || get_tipo(actual.hijos.get(0).valor).equals("String")) {
                } else {
                    Errores_compTipos.add("Error de tipo en Console.write con la variable " + actual.hijos.get(0).valor + ". Linea: " + (actual.hijos.get(0).linea) + " Columna: " + actual.hijos.get(0).columna);
                }
            } else {
                Errores_ambito.add("Error ambito en Console.write con la variable " + actual.hijos.get(0).valor + ". Linea: " + (actual.hijos.get(0).linea) + " Columna: " + actual.hijos.get(0).columna);
            }
        }

///////////////////////////////Comprobar for-step////////////////////////////////////////////////////////////////////////////
        if (actual.nombre.equals("For-step")) {
            if (validar_variable(actual.hijos.get(0).valor) == 1) {
                if (get_tipo(actual.hijos.get(0).valor).equals("Integer")) {
                    if (actual.hijos.get(2).nombre.equals("Integer")) {
                    } else {
                        Errores_compTipos.add("Error de tipo en For con la variable " + actual.hijos.get(0).valor + ". Linea: " + (actual.hijos.get(2).linea) + " Columna: " + actual.hijos.get(2).columna);
                    }
                    if (actual.hijos.get(3).nombre.equals("Integer")) {
                    } else {
                        Errores_compTipos.add("Error de tipo en For con la variable " + actual.hijos.get(0).valor + ". Linea: " + (actual.hijos.get(3).linea) + " Columna: " + actual.hijos.get(3).columna);
                    }
                    if (actual.hijos.get(4).nombre.equals("Integer")) {
                    } else {
                        Errores_compTipos.add("Error de tipo en For con la variable " + actual.hijos.get(0).valor + ". Linea: " + (actual.hijos.get(4).linea) + " Columna: " + actual.hijos.get(4).columna);
                    }

                } else {
                    Errores_compTipos.add("Error de tipo en For con la variable " + actual.hijos.get(0).valor + ". Linea: " + (actual.hijos.get(0).linea) + " Columna: " + actual.hijos.get(0).columna);
                }
            } else {
                Errores_ambito.add("Error ambito en For con la variable " + actual.hijos.get(0).valor + ". Linea: " + (actual.hijos.get(0).linea) + " Columna: " + actual.hijos.get(0).columna);
            }
        }
///////////////////////////////Condicion//////////////////////////////////////////////////////////////////////////////////////
        if (actual.nombre.equals("Condicion")
                && actual.hijos.size() > 1 //Validar si es la condicion <,>,<=,>=,
                ) {
            if (actual.hijos.get(0).nombre.equals("Id") && actual.hijos.get(2).nombre.equals("Id")) {
                int amb1 = validar_variable(actual.hijos.get(0).valor),
                        amb2 = validar_variable(actual.hijos.get(2).valor);
                if (amb1 == 1 && amb2 == 1) {
                    String t1 = get_tipo(actual.hijos.get(0).valor),
                            t2 = get_tipo(actual.hijos.get(2).valor);
                    if (t1.equals("Integer") && t2.equals("Integer")) {
                    } else {
                        if (!t1.equals("Integer")) {
                            Errores_compTipos.add("Error de tipo en Condicion con la variable " + actual.hijos.get(0).valor + ". Linea: " + (actual.hijos.get(0).linea) + " Columna: " + actual.hijos.get(0).columna);
                        }
                        if (!t2.equals("Integer")) {
                            Errores_compTipos.add("Error de tipo en Condicion con la variable " + actual.hijos.get(2).valor + ". Linea: " + (actual.hijos.get(2).linea) + " Columna: " + actual.hijos.get(2).columna);
                        }
                    }
                } else {
                    if (amb1 != 1) {
                        Errores_ambito.add("Error ambito en Condicion con la variable " + actual.hijos.get(0).valor + ". Linea: " + (actual.hijos.get(0).linea) + " Columna: " + actual.hijos.get(0).columna);
                    }
                    if (amb2 != 1) {
                        Errores_ambito.add("Error ambito en Condicion con la variable " + actual.hijos.get(2).valor + ". Linea: " + (actual.hijos.get(2).linea) + " Columna: " + actual.hijos.get(2).columna);
                    }
                }
            }
            if (actual.hijos.get(0).nombre.equals("Id") && actual.hijos.get(2).nombre.equals("Integer")) {
                int amb1 = validar_variable(actual.hijos.get(0).valor);
                if (amb1 == 1) {
                    String t1 = get_tipo(actual.hijos.get(0).valor);
                    if (t1.equals("Integer")) {
                    } else {
                        if (!t1.equals("Integer")) {
                            Errores_compTipos.add("Error de tipo en Condicion con la variable " + actual.hijos.get(0).valor + ". Linea: " + (actual.hijos.get(0).linea) + " Columna: " + actual.hijos.get(0).columna);
                        }
                    }
                } else {
                    if (amb1 != 1) {
                        Errores_ambito.add("Error ambito en Condicion con la variable " + actual.hijos.get(0).valor + ". Linea: " + (actual.hijos.get(0).linea) + " Columna: " + actual.hijos.get(0).columna);
                    }
                }
            }
            if (actual.hijos.get(0).nombre.equals("Integer") && actual.hijos.get(2).nombre.equals("Id")) {
                int amb2 = validar_variable(actual.hijos.get(2).valor);
                if (amb2 == 1) {
                    String t2 = get_tipo(actual.hijos.get(2).valor);
                    if (t2.equals("Integer")) {
                    } else {
                        if (!t2.equals("Integer")) {
                            Errores_compTipos.add("Error de tipo en Condicion con la variable " + actual.hijos.get(2).valor + ". Linea: " + (actual.hijos.get(2).linea) + " Columna: " + actual.hijos.get(2).columna);
                        }
                    }
                } else {
                    if (amb2 != 1) {
                        Errores_ambito.add("Error ambito en Condicion con la variable " + actual.hijos.get(2).valor + ". Linea: " + (actual.hijos.get(2).linea) + " Columna: " + actual.hijos.get(2).columna);
                    }
                }
            }
            if (actual.hijos.get(0).nombre.equals("Integer") && actual.hijos.get(2).nombre.equals("Integer")) {
            }
        }
        /////---------------------------otra condicion menor presedencia----------------------------
        if (actual.nombre.equals("Condicion-I")
                && actual.hijos.size() > 1 //Validar si es la condicion ==,!=
                ) {
            if (actual.hijos.get(0).nombre.equals("Id") && actual.hijos.get(2).nombre.equals("Id")) {
                int amb1 = validar_variable(actual.hijos.get(0).valor),
                        amb2 = validar_variable(actual.hijos.get(2).valor);
                if (amb1 == 1 && amb2 == 1) {
                    String t1 = get_tipo(actual.hijos.get(0).valor),
                            t2 = get_tipo(actual.hijos.get(2).valor);
                    if (t1.equals("Integer") && t2.equals("Integer")) {
                    } else {
                        if (!t1.equals("Integer")) {
                            Errores_compTipos.add("Error de tipo en Condicion con la variable " + actual.hijos.get(0).valor + ". Linea: " + (actual.hijos.get(0).linea) + " Columna: " + actual.hijos.get(0).columna);
                        }
                        if (!t2.equals("Integer")) {
                            Errores_compTipos.add("Error de tipo en Condicion con la variable " + actual.hijos.get(2).valor + ". Linea: " + (actual.hijos.get(2).linea) + " Columna: " + actual.hijos.get(2).columna);
                        }
                    }
                } else {
                    if (amb1 != 1) {
                        Errores_ambito.add("Error ambito en Condicion con la variable " + actual.hijos.get(0).valor + ". Linea: " + (actual.hijos.get(0).linea) + " Columna: " + actual.hijos.get(0).columna);
                    }
                    if (amb2 != 1) {
                        Errores_ambito.add("Error ambito en Condicion con la variable " + actual.hijos.get(2).valor + ". Linea: " + (actual.hijos.get(2).linea) + " Columna: " + actual.hijos.get(2).columna);
                    }
                }
            }
            if (actual.hijos.get(0).nombre.equals("Id") && actual.hijos.get(2).nombre.equals("Integer")) {
                int amb1 = validar_variable(actual.hijos.get(0).valor);
                if (amb1 == 1) {
                    String t1 = get_tipo(actual.hijos.get(0).valor);
                    if (t1.equals("Integer")) {
                    } else {
                        if (!t1.equals("Integer")) {
                            Errores_compTipos.add("Error de tipo en Condicion con la variable " + actual.hijos.get(0).valor + ". Linea: " + (actual.hijos.get(0).linea) + " Columna: " + actual.hijos.get(0).columna);
                        }
                    }
                } else {
                    if (amb1 != 1) {
                        Errores_ambito.add("Error ambito en Condicion con la variable " + actual.hijos.get(0).valor + ". Linea: " + (actual.hijos.get(0).linea) + " Columna: " + actual.hijos.get(0).columna);
                    }
                }
            }
            if (actual.hijos.get(0).nombre.equals("Integer") && actual.hijos.get(2).nombre.equals("Id")) {
                int amb2 = validar_variable(actual.hijos.get(2).valor);
                if (amb2 == 1) {
                    String t2 = get_tipo(actual.hijos.get(2).valor);
                    if (t2.equals("Integer")) {
                    } else {
                        if (!t2.equals("Integer")) {
                            Errores_compTipos.add("Error de tipo en Condicion con la variable " + actual.hijos.get(2).valor + ". Linea: " + (actual.hijos.get(2).linea) + " Columna: " + actual.hijos.get(2).columna);
                        }
                    }
                } else {
                    if (amb2 != 1) {
                        Errores_ambito.add("Error ambito en Condicion con la variable " + actual.hijos.get(2).valor + ". Linea: " + (actual.hijos.get(2).linea) + " Columna: " + actual.hijos.get(2).columna);
                    }
                }
            }
            if (actual.hijos.get(0).nombre.equals("Integer") && actual.hijos.get(2).nombre.equals("Integer")) {
            }
        }

///////////////////////////////Recorrer arbol////////////////////////////////////////////////////////////////////////////////
        for (int i = 0; i < actual.hijos.size(); i++) {
            if (actual.nombre.equals("Function")) {
                ambito = actual.hijos.get(0).valor;
                offset = 0;
                ambito_cont = 1;
            } else if (actual.nombre.equals("Sub")) {
                ambito = actual.hijos.get(0).valor;
                offset = 0;
                ambito_cont = 1;
            } else if (actual.nombre.equals("Structure")) {
                ambito = actual.hijos.get(0).valor;
                offset = 0;
                ambito_cont = 1;
            }

            if (!actual.hijos.get(i).hijos.isEmpty()) {
                llenar_tabla_simbolos(actual.hijos.get(i));
            }
        }
        if (ambito_control >= 0
                && (actual.nombre.equals("For")
                || actual.nombre.equals("For-step")
                || actual.nombre.equals("If")
                || actual.nombre.equals("Else")
                || actual.nombre.equals("Else_if")
                || actual.nombre.equals("Do-While"))) {
            ambito = ambito.substring(0, ambito.lastIndexOf(","));
            ambito_control--;
            //System.out.println(ambito);
        }
    }

    public static void agregar(Entry e, int linea, int columna) {
        boolean verifica = false;
        for (int i = 0; i < tabla_simbolos.size(); i++) {
            if (e.id.equals(tabla_simbolos.get(i).id)) {
                if (ambito.contains(tabla_simbolos.get(i).ambito)) {
                    verifica = true;
                    break;
                }
            }

        }
        if (verifica == true) {
            Errores_ambito.add("Error linea: " + linea + " columna:" + columna + "la variable " + e.id + " ya fue declarada en el mismo ambito");
        } else {
            tabla_simbolos.add(e);
            //offset += getSize(e.tipo);
            offset += e.tipo.length();

        }

    }

    public static int validar_variable(String e) {
        int verifica = 0;
        for (int i = 0; i < tabla_simbolos.size(); i++) {
            if (e.equals(tabla_simbolos.get(i).id)) {
                if (ambito.contains(tabla_simbolos.get(i).ambito)) {
                    verifica = 1;
                    break;
                }
            }
        }
        return verifica;
    }

    public static void validar_oa(Node e) {
        
        if (e.nombre.equals("Valor")) {
            if (e.hijos.get(0).nombre.equals("Id")) {
                 if (validar_variable(e.hijos.get(0).valor)==1) {
                     if (get_tipo(e.hijos.get(0).valor).equals("Integer")) {
                     }else{
                      Errores_compTipos.add("Error de tipo en Condicion con la variable " + e.hijos.get(0).valor + ". Linea: " + (e.hijos.get(0).linea) + " Columna: " + e.hijos.get(0).columna);
                     }
                }else{
                    Errores_ambito.add("Error ambito en Condicion con la variable " + e.hijos.get(0).valor + ". Linea: " + (e.hijos.get(0).linea) + " Columna: " + e.hijos.get(0).columna);
                }
            }
        }
        
        
        for (int i = 0; i < e.hijos.size(); i++) {
            if (!e.hijos.get(i).hijos.isEmpty()) {
                validar_oa(e.hijos.get(i));
            }
        }
    }

    public static String get_tipo(String nombre) {
        for (int i = 0; i < tabla_simbolos.size(); i++) {
            if (tabla_simbolos.get(i).id.equals(nombre)) {
                return tabla_simbolos.get(i).tipo;
            }
        }
        return "";
    }

    public static boolean existe(String s) {
        for (int i = 0; i < tabla_simbolos.size(); i++) {
            if (s.equals(tabla_simbolos.get(i).id)) {
                if (ambito.contains(tabla_simbolos.get(i).ambito)) {
                    return true;
                }
            }
        }
        return false;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog arbolin;
    private javax.swing.JButton bt_abrir;
    private javax.swing.JButton bt_syntax1;
    private javax.swing.JButton bt_syntax2;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTree jtree;
    private javax.swing.JLabel label_columna;
    private javax.swing.JLabel label_linea;
    private javax.swing.JTextArea ta_entrada;
    private javax.swing.JTextArea ta_syntax_result;
    // End of variables declaration//GEN-END:variables
    public static Node root;
    DefaultMutableTreeNode arbol;
    ///////////////////tipos///////////////////////////////////////////
    public static ArrayList<Entry> tabla_simbolos = new ArrayList<Entry>();
    public static ArrayList<String> Errores_compTipos = new ArrayList<String>();
    public static Syntax s;
    ///////////////////////////////////ambito//////////////////
    public static int ambito_cont = 0, ambito_control = -1, offset = 0;
    public static String ambito = "";
    public static boolean activo = true;
    public static ArrayList<String> Errores_ambito = new ArrayList<String>();
    /////////////////////////////////codigo intermedio//////////////////////////

    ////////////////////////////////codigo final///////////////////////////////////
}
