
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package proyectocompi;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Syntax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Syntax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Syntax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\137\000\002\002\004\000\002\002\003\000\002\003" +
    "\010\000\002\003\002\000\002\005\005\000\002\005\004" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\026\015\000\002\026\014\000\002\027\013\000\002" +
    "\027\012\000\002\030\010\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\006\006\000\002\006\010" +
    "\000\002\010\004\000\002\010\003\000\002\010\004\000" +
    "\002\010\003\000\002\010\004\000\002\010\003\000\002" +
    "\010\004\000\002\010\003\000\002\010\006\000\002\010" +
    "\005\000\002\010\007\000\002\010\006\000\002\010\004" +
    "\000\002\010\003\000\002\010\004\000\002\010\003\000" +
    "\002\010\004\000\002\010\003\000\002\010\005\000\002" +
    "\010\004\000\002\010\004\000\002\010\003\000\002\031" +
    "\007\000\002\031\007\000\002\032\014\000\002\033\016" +
    "\000\002\034\007\000\002\042\005\000\002\042\007\000" +
    "\002\035\011\000\002\037\013\000\002\036\007\000\002" +
    "\036\007\000\002\011\006\000\002\011\007\000\002\013" +
    "\005\000\002\013\003\000\002\022\005\000\002\023\003" +
    "\000\002\023\003\000\002\017\005\000\002\017\003\000" +
    "\002\020\005\000\002\020\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\005\000\002\025\005\000\002\025" +
    "\005\000\002\025\005\000\002\025\005\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\015\006\000\002\015\006\000\002\024\005\000\002" +
    "\024\005\000\002\024\004\000\002\024\004\000\002\024" +
    "\006\000\002\024\006\000\002\024\005\000\002\024\005" +
    "\000\002\016\006\000\002\016\010\000\002\016\011\000" +
    "\002\016\006\000\002\016\006\000\002\043\010\000\002" +
    "\043\010\000\002\044\003\000\002\044\003\000\002\044" +
    "\003\000\002\044\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\343\000\006\002\ufffe\045\004\001\002\000\004\053" +
    "\010\001\002\000\004\002\000\001\002\000\004\002\007" +
    "\001\002\000\004\002\001\001\002\000\004\007\011\001" +
    "\002\000\010\042\012\043\014\044\013\001\002\000\004" +
    "\053\325\001\002\000\004\053\313\001\002\000\004\053" +
    "\026\001\002\000\004\007\ufffa\001\002\000\004\007\024" +
    "\001\002\000\004\014\022\001\002\000\004\007\ufff9\001" +
    "\002\000\004\007\ufffb\001\002\000\004\045\023\001\002" +
    "\000\004\002\uffff\001\002\000\012\014\ufffc\042\012\043" +
    "\014\044\013\001\002\000\004\014\ufffd\001\002\000\004" +
    "\010\027\001\002\000\006\011\030\041\031\001\002\000" +
    "\004\007\307\001\002\000\004\053\302\001\002\000\004" +
    "\011\033\001\002\000\004\007\034\001\002\000\016\015" +
    "\054\026\036\032\050\036\045\051\046\053\041\001\002" +
    "\000\032\014\uffed\015\uffed\026\uffed\030\uffed\031\uffed\032" +
    "\uffed\034\uffed\036\uffed\040\uffed\051\uffed\053\uffed\056\uffed" +
    "\001\002\000\006\004\125\053\121\001\002\000\032\014" +
    "\uffe9\015\uffe9\026\uffe9\030\uffe9\031\uffe9\032\uffe9\034\uffe9" +
    "\036\uffe9\040\uffe9\051\uffe9\053\uffe9\056\uffe9\001\002\000" +
    "\032\014\uffe7\015\uffe7\026\uffe7\030\uffe7\031\uffe7\032\uffe7" +
    "\034\uffe7\036\uffe7\040\uffe7\051\uffe7\053\uffe7\056\uffe7\001" +
    "\002\000\006\013\200\021\201\001\002\000\032\014\uffd9" +
    "\015\uffd9\026\uffd9\030\uffd9\031\uffd9\032\uffd9\034\uffd9\036" +
    "\uffd9\040\uffd9\051\uffd9\053\uffd9\056\uffd9\001\002\000\020" +
    "\014\176\015\054\026\036\032\050\036\045\051\046\053" +
    "\041\001\002\000\004\007\175\001\002\000\004\037\167" +
    "\001\002\000\004\053\151\001\002\000\010\030\116\031" +
    "\115\056\144\001\002\000\004\053\065\001\002\000\032" +
    "\014\uffeb\015\uffeb\026\uffeb\030\uffeb\031\uffeb\032\uffeb\034" +
    "\uffeb\036\uffeb\040\uffeb\051\uffeb\053\uffeb\056\uffeb\001\002" +
    "\000\032\014\uffdf\015\uffdf\026\uffdf\030\uffdf\031\uffdf\032" +
    "\uffdf\034\uffdf\036\uffdf\040\uffdf\051\uffdf\053\uffdf\056\uffdf" +
    "\001\002\000\032\014\uffdd\015\uffdd\026\uffdd\030\uffdd\031" +
    "\uffdd\032\uffdd\034\uffdd\036\uffdd\040\uffdd\051\uffdd\053\uffdd" +
    "\056\uffdd\001\002\000\004\010\056\001\002\000\032\014" +
    "\uffe1\015\uffe1\026\uffe1\030\uffe1\031\uffe1\032\uffe1\034\uffe1" +
    "\036\uffe1\040\uffe1\051\uffe1\053\uffe1\056\uffe1\001\002\000" +
    "\006\004\060\053\057\001\002\000\004\011\063\001\002" +
    "\000\004\011\061\001\002\000\004\007\062\001\002\000" +
    "\032\014\uffcf\015\uffcf\026\uffcf\030\uffcf\031\uffcf\032\uffcf" +
    "\034\uffcf\036\uffcf\040\uffcf\051\uffcf\053\uffcf\056\uffcf\001" +
    "\002\000\004\007\064\001\002\000\032\014\uffce\015\uffce" +
    "\026\uffce\030\uffce\031\uffce\032\uffce\034\uffce\036\uffce\040" +
    "\uffce\051\uffce\053\uffce\056\uffce\001\002\000\004\021\066" +
    "\001\002\000\004\004\067\001\002\000\004\033\070\001" +
    "\002\000\004\004\071\001\002\000\006\007\072\035\073" +
    "\001\002\000\016\015\054\026\036\032\050\036\045\051" +
    "\046\053\041\001\002\000\004\004\074\001\002\000\004" +
    "\007\075\001\002\000\016\015\054\026\036\032\050\036" +
    "\045\051\046\053\041\001\002\000\020\015\054\026\036" +
    "\032\050\034\110\036\045\051\046\053\041\001\002\000" +
    "\032\014\uffee\015\uffee\026\uffee\030\uffee\031\uffee\032\uffee" +
    "\034\uffee\036\uffee\040\uffee\051\uffee\053\uffee\056\uffee\001" +
    "\002\000\032\014\uffea\015\uffea\026\uffea\030\uffea\031\uffea" +
    "\032\uffea\034\uffea\036\uffea\040\uffea\051\uffea\053\uffea\056" +
    "\uffea\001\002\000\032\014\uffe8\015\uffe8\026\uffe8\030\uffe8" +
    "\031\uffe8\032\uffe8\034\uffe8\036\uffe8\040\uffe8\051\uffe8\053" +
    "\uffe8\056\uffe8\001\002\000\032\014\uffda\015\uffda\026\uffda" +
    "\030\uffda\031\uffda\032\uffda\034\uffda\036\uffda\040\uffda\051" +
    "\uffda\053\uffda\056\uffda\001\002\000\004\007\140\001\002" +
    "\000\010\030\116\031\115\056\113\001\002\000\032\014" +
    "\uffec\015\uffec\026\uffec\030\uffec\031\uffec\032\uffec\034\uffec" +
    "\036\uffec\040\uffec\051\uffec\053\uffec\056\uffec\001\002\000" +
    "\032\014\uffe0\015\uffe0\026\uffe0\030\uffe0\031\uffe0\032\uffe0" +
    "\034\uffe0\036\uffe0\040\uffe0\051\uffe0\053\uffe0\056\uffe0\001" +
    "\002\000\032\014\uffde\015\uffde\026\uffde\030\uffde\031\uffde" +
    "\032\uffde\034\uffde\036\uffde\040\uffde\051\uffde\053\uffde\056" +
    "\uffde\001\002\000\004\007\112\001\002\000\032\014\uffe2" +
    "\015\uffe2\026\uffe2\030\uffe2\031\uffe2\032\uffe2\034\uffe2\036" +
    "\uffe2\040\uffe2\051\uffe2\053\uffe2\056\uffe2\001\002\000\032" +
    "\014\uffd5\015\uffd5\026\uffd5\030\uffd5\031\uffd5\032\uffd5\034" +
    "\uffd5\036\uffd5\040\uffd5\051\uffd5\053\uffd5\056\uffd5\001\002" +
    "\000\004\007\137\001\002\000\004\056\135\001\002\000" +
    "\006\004\125\053\121\001\002\000\004\007\117\001\002" +
    "\000\016\015\054\026\036\032\050\036\045\051\046\053" +
    "\041\001\002\000\020\015\054\026\036\032\050\036\045" +
    "\051\046\053\041\056\uffd3\001\002\000\012\007\uffc7\022" +
    "\uffc7\023\uffc7\027\uffc7\001\002\000\004\027\132\001\002" +
    "\000\006\022\127\023\126\001\002\000\006\007\uffca\027" +
    "\uffca\001\002\000\012\007\uffc8\022\uffc8\023\uffc8\027\uffc8" +
    "\001\002\000\006\004\125\053\121\001\002\000\006\004" +
    "\125\053\121\001\002\000\006\007\uffcb\027\uffcb\001\002" +
    "\000\006\007\uffc9\027\uffc9\001\002\000\004\007\133\001" +
    "\002\000\016\015\054\026\036\032\050\036\045\051\046" +
    "\053\041\001\002\000\020\015\054\026\036\032\050\036" +
    "\045\051\046\053\041\056\uffd2\001\002\000\004\007\136" +
    "\001\002\000\032\014\uffe4\015\uffe4\026\uffe4\030\uffe4\031" +
    "\uffe4\032\uffe4\034\uffe4\036\uffe4\040\uffe4\051\uffe4\053\uffe4" +
    "\056\uffe4\001\002\000\032\014\uffe6\015\uffe6\026\uffe6\030" +
    "\uffe6\031\uffe6\032\uffe6\034\uffe6\036\uffe6\040\uffe6\051\uffe6" +
    "\053\uffe6\056\uffe6\001\002\000\032\014\uffdc\015\uffdc\026" +
    "\uffdc\030\uffdc\031\uffdc\032\uffdc\034\uffdc\036\uffdc\040\uffdc" +
    "\051\uffdc\053\uffdc\056\uffdc\001\002\000\020\015\054\026" +
    "\036\032\050\034\142\036\045\051\046\053\041\001\002" +
    "\000\004\007\143\001\002\000\032\014\uffd6\015\uffd6\026" +
    "\uffd6\030\uffd6\031\uffd6\032\uffd6\034\uffd6\036\uffd6\040\uffd6" +
    "\051\uffd6\053\uffd6\056\uffd6\001\002\000\004\007\150\001" +
    "\002\000\004\056\146\001\002\000\004\007\147\001\002" +
    "\000\032\014\uffe3\015\uffe3\026\uffe3\030\uffe3\031\uffe3\032" +
    "\uffe3\034\uffe3\036\uffe3\040\uffe3\051\uffe3\053\uffe3\056\uffe3" +
    "\001\002\000\032\014\uffe5\015\uffe5\026\uffe5\030\uffe5\031" +
    "\uffe5\032\uffe5\034\uffe5\036\uffe5\040\uffe5\051\uffe5\053\uffe5" +
    "\056\uffe5\001\002\000\004\052\152\001\002\000\012\046" +
    "\153\047\156\050\154\053\155\001\002\000\012\007\ufff3" +
    "\011\ufff3\012\ufff3\021\ufff3\001\002\000\012\007\ufff1\011" +
    "\ufff1\012\ufff1\021\ufff1\001\002\000\004\007\166\001\002" +
    "\000\012\007\ufff2\011\ufff2\012\ufff2\021\ufff2\001\002\000" +
    "\006\007\160\021\161\001\002\000\032\014\uffd8\015\uffd8" +
    "\026\uffd8\030\uffd8\031\uffd8\032\uffd8\034\uffd8\036\uffd8\040" +
    "\uffd8\051\uffd8\053\uffd8\056\uffd8\001\002\000\004\016\162" +
    "\001\002\000\004\010\163\001\002\000\004\011\164\001" +
    "\002\000\004\007\165\001\002\000\032\014\uffd0\015\uffd0" +
    "\026\uffd0\030\uffd0\031\uffd0\032\uffd0\034\uffd0\036\uffd0\040" +
    "\uffd0\051\uffd0\053\uffd0\056\uffd0\001\002\000\032\014\uffd7" +
    "\015\uffd7\026\uffd7\030\uffd7\031\uffd7\032\uffd7\034\uffd7\036" +
    "\uffd7\040\uffd7\051\uffd7\053\uffd7\056\uffd7\001\002\000\006" +
    "\004\125\053\121\001\002\000\004\007\171\001\002\000" +
    "\016\015\054\026\036\032\050\036\045\051\046\053\041" +
    "\001\002\000\020\015\054\026\036\032\050\036\045\040" +
    "\173\051\046\053\041\001\002\000\004\007\174\001\002" +
    "\000\032\014\uffd1\015\uffd1\026\uffd1\030\uffd1\031\uffd1\032" +
    "\uffd1\034\uffd1\036\uffd1\040\uffd1\051\uffd1\053\uffd1\056\uffd1" +
    "\001\002\000\032\014\uffdb\015\uffdb\026\uffdb\030\uffdb\031" +
    "\uffdb\032\uffdb\034\uffdb\036\uffdb\040\uffdb\051\uffdb\053\uffdb" +
    "\056\uffdb\001\002\000\004\043\177\001\002\000\004\007" +
    "\ufff6\001\002\000\004\053\266\001\002\000\014\004\211" +
    "\005\207\006\210\011\204\053\203\001\002\000\006\007" +
    "\265\017\235\001\002\000\020\007\uffc1\010\237\013\241" +
    "\017\uffc1\020\uffc1\024\214\025\215\001\002\000\010\004" +
    "\211\011\204\053\231\001\002\000\012\007\uffc5\010\uffc5" +
    "\017\uffc5\020\230\001\002\000\012\007\uffc3\010\uffc3\017" +
    "\uffc3\020\uffc3\001\002\000\004\007\227\001\002\000\010" +
    "\007\212\024\214\025\215\001\002\000\012\007\uffc2\010" +
    "\uffc2\017\uffc2\020\uffc2\001\002\000\032\014\uffa9\015\uffa9" +
    "\026\uffa9\030\uffa9\031\uffa9\032\uffa9\034\uffa9\036\uffa9\040" +
    "\uffa9\051\uffa9\053\uffa9\056\uffa9\001\002\000\004\007\uffb6" +
    "\001\002\000\006\006\224\053\223\001\002\000\004\007" +
    "\216\001\002\000\006\006\220\053\217\001\002\000\010" +
    "\007\uffaf\024\214\025\215\001\002\000\010\007\uffae\024" +
    "\214\025\215\001\002\000\004\007\uffb0\001\002\000\004" +
    "\007\uffb1\001\002\000\010\007\uffb3\024\214\025\215\001" +
    "\002\000\010\007\uffb2\024\214\025\215\001\002\000\004" +
    "\007\uffb4\001\002\000\004\007\uffb5\001\002\000\032\014" +
    "\uffaa\015\uffaa\026\uffaa\030\uffaa\031\uffaa\032\uffaa\034\uffaa" +
    "\036\uffaa\040\uffaa\051\uffaa\053\uffaa\056\uffaa\001\002\000" +
    "\010\004\211\011\204\053\231\001\002\000\012\007\uffc1" +
    "\010\uffc1\017\uffc1\020\uffc1\001\002\000\012\007\uffc4\010" +
    "\uffc4\017\uffc4\020\uffc4\001\002\000\006\010\234\017\235" +
    "\001\002\000\012\007\uffc0\010\uffc0\017\uffc0\020\uffc0\001" +
    "\002\000\010\004\211\011\204\053\231\001\002\000\012" +
    "\007\uffc6\010\uffc6\017\uffc6\020\230\001\002\000\014\004" +
    "\251\005\247\006\250\011\246\053\244\001\002\000\004" +
    "\007\uffb7\001\002\000\004\053\242\001\002\000\004\007" +
    "\243\001\002\000\032\014\uffa7\015\uffa7\026\uffa7\030\uffa7" +
    "\031\uffa7\032\uffa7\034\uffa7\036\uffa7\040\uffa7\051\uffa7\053" +
    "\uffa7\056\uffa7\001\002\000\006\011\uffbb\012\263\001\002" +
    "\000\004\011\261\001\002\000\004\007\260\001\002\000" +
    "\006\011\uffb8\012\256\001\002\000\006\011\uffb9\012\254" +
    "\001\002\000\006\011\uffba\012\252\001\002\000\012\004" +
    "\251\005\247\006\250\053\244\001\002\000\004\011\uffbe" +
    "\001\002\000\012\004\251\005\247\006\250\053\244\001" +
    "\002\000\004\011\uffbd\001\002\000\012\004\251\005\247" +
    "\006\250\053\244\001\002\000\004\011\uffbc\001\002\000" +
    "\032\014\uffac\015\uffac\026\uffac\030\uffac\031\uffac\032\uffac" +
    "\034\uffac\036\uffac\040\uffac\051\uffac\053\uffac\056\uffac\001" +
    "\002\000\004\007\262\001\002\000\032\014\uffab\015\uffab" +
    "\026\uffab\030\uffab\031\uffab\032\uffab\034\uffab\036\uffab\040" +
    "\uffab\051\uffab\053\uffab\056\uffab\001\002\000\012\004\251" +
    "\005\247\006\250\053\244\001\002\000\004\011\uffbf\001" +
    "\002\000\032\014\uffad\015\uffad\026\uffad\030\uffad\031\uffad" +
    "\032\uffad\034\uffad\036\uffad\040\uffad\051\uffad\053\uffad\056" +
    "\uffad\001\002\000\004\021\267\001\002\000\012\004\272" +
    "\005\273\006\274\053\270\001\002\000\004\007\uffa6\001" +
    "\002\000\004\007\275\001\002\000\004\007\uffa3\001\002" +
    "\000\004\007\uffa5\001\002\000\004\007\uffa4\001\002\000" +
    "\032\014\uffa8\015\uffa8\026\uffa8\030\uffa8\031\uffa8\032\uffa8" +
    "\034\uffa8\036\uffa8\040\uffa8\051\uffa8\053\uffa8\056\uffa8\001" +
    "\002\000\004\027\277\001\002\000\004\007\300\001\002" +
    "\000\016\015\054\026\036\032\050\036\045\051\046\053" +
    "\041\001\002\000\024\015\054\026\036\030\uffd4\031\uffd4" +
    "\032\050\036\045\051\046\053\041\056\uffd4\001\002\000" +
    "\004\052\303\001\002\000\010\046\153\047\156\050\154" +
    "\001\002\000\006\011\ufff0\012\305\001\002\000\004\041" +
    "\031\001\002\000\004\011\uffef\001\002\000\016\015\054" +
    "\026\036\032\050\036\045\051\046\053\041\001\002\000" +
    "\020\014\311\015\054\026\036\032\050\036\045\051\046" +
    "\053\041\001\002\000\004\043\312\001\002\000\004\007" +
    "\ufff5\001\002\000\004\007\314\001\002\000\004\053\315" +
    "\001\002\000\004\052\321\001\002\000\004\014\317\001" +
    "\002\000\004\044\320\001\002\000\004\007\ufff4\001\002" +
    "\000\010\046\153\047\156\050\154\001\002\000\004\007" +
    "\323\001\002\000\006\014\uffcd\053\315\001\002\000\004" +
    "\014\uffcc\001\002\000\004\010\326\001\002\000\006\011" +
    "\327\041\031\001\002\000\004\052\340\001\002\000\004" +
    "\011\331\001\002\000\004\052\332\001\002\000\010\046" +
    "\153\047\156\050\154\001\002\000\004\007\334\001\002" +
    "\000\016\015\054\026\036\032\050\036\045\051\046\053" +
    "\041\001\002\000\020\014\336\015\054\026\036\032\050" +
    "\036\045\051\046\053\041\001\002\000\004\042\337\001" +
    "\002\000\004\007\ufff8\001\002\000\010\046\153\047\156" +
    "\050\154\001\002\000\004\007\342\001\002\000\016\015" +
    "\054\026\036\032\050\036\045\051\046\053\041\001\002" +
    "\000\020\014\344\015\054\026\036\032\050\036\045\051" +
    "\046\053\041\001\002\000\004\042\345\001\002\000\004" +
    "\007\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\343\000\006\002\005\003\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\004\015\005\016\026\020\027" +
    "\014\030\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\004\015\005\024\026" +
    "\020\027\014\030\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\010\042\015\043\016\041\031\034\032\036\033\037\034" +
    "\046\035\054\036\051\037\052\043\050\001\001\000\002" +
    "\001\001\000\010\013\275\022\123\023\122\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\015\102\016\101\031\076\032\077\033" +
    "\100\034\103\035\110\036\105\037\106\043\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\042\144\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\010\140\015\043\016\041\031\034\032\036\033\037" +
    "\034\046\035\054\036\051\037\052\043\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\010\075\015\043" +
    "\016\041\031\034\032\036\033\037\034\046\035\054\036" +
    "\051\037\052\043\050\001\001\000\026\015\102\016\101" +
    "\031\076\032\077\033\100\034\103\035\110\036\105\037" +
    "\106\043\104\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\042\113\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\013\121\022\123\023\122\001\001\000\002\001\001\000" +
    "\030\010\117\015\043\016\041\031\034\032\036\033\037" +
    "\034\046\035\054\036\051\037\052\043\050\001\001\000" +
    "\026\015\102\016\101\031\076\032\077\033\100\034\103" +
    "\035\110\036\105\037\106\043\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\130\001\001\000\004\023" +
    "\127\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\010\133\015\043\016\041\031\034\032" +
    "\036\033\037\034\046\035\054\036\051\037\052\043\050" +
    "\001\001\000\026\015\102\016\101\031\076\032\077\033" +
    "\100\034\103\035\110\036\105\037\106\043\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\015\102\016\101\031\076\032\077" +
    "\033\100\034\103\035\110\036\105\037\106\043\104\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\156\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\013\167" +
    "\022\123\023\122\001\001\000\002\001\001\000\030\010" +
    "\171\015\043\016\041\031\034\032\036\033\037\034\046" +
    "\035\054\036\051\037\052\043\050\001\001\000\026\015" +
    "\102\016\101\031\076\032\077\033\100\034\103\035\110" +
    "\036\105\037\106\043\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\017\201\020\204\021" +
    "\205\001\001\000\002\001\001\000\004\024\237\001\001" +
    "\000\010\017\232\020\204\021\205\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\212" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\221\001\001\000\004\024\220\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\225\001\001" +
    "\000\004\024\224\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\231\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\020\235\021\205\001\001\000\002\001\001" +
    "\000\004\025\244\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\252\001\001" +
    "\000\002\001\001\000\004\025\254\001\001\000\002\001" +
    "\001\000\004\025\256\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\263\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\044\270\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\010\300\015\043\016\041\031\034\032\036" +
    "\033\037\034\046\035\054\036\051\037\052\043\050\001" +
    "\001\000\026\015\102\016\101\031\076\032\077\033\100" +
    "\034\103\035\110\036\105\037\106\043\104\001\001\000" +
    "\002\001\001\000\004\007\303\001\001\000\002\001\001" +
    "\000\004\006\305\001\001\000\002\001\001\000\030\010" +
    "\307\015\043\016\041\031\034\032\036\033\037\034\046" +
    "\035\054\036\051\037\052\043\050\001\001\000\026\015" +
    "\102\016\101\031\076\032\077\033\100\034\103\035\110" +
    "\036\105\037\106\043\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\315\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\321\001\001\000\002\001\001" +
    "\000\004\011\323\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\327\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\332\001\001\000" +
    "\002\001\001\000\030\010\334\015\043\016\041\031\034" +
    "\032\036\033\037\034\046\035\054\036\051\037\052\043" +
    "\050\001\001\000\026\015\102\016\101\031\076\032\077" +
    "\033\100\034\103\035\110\036\105\037\106\043\104\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\340" +
    "\001\001\000\002\001\001\000\030\010\342\015\043\016" +
    "\041\031\034\032\036\033\037\034\046\035\054\036\051" +
    "\037\052\043\050\001\001\000\026\015\102\016\101\031" +
    "\076\032\077\033\100\034\103\035\110\036\105\037\106" +
    "\043\104\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static Node raiz;
    private Symbol s;

    public void syntax_error(Symbol s){
        this.s=s;
    }

    public Symbol getS(){
        return this.s;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Syntax$actions {
  private final Syntax parser;

  /** Constructor */
  CUP$Syntax$actions(Syntax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action_part00000000(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntax$result;

      /* select the action based on the action number */
      switch (CUP$Syntax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = start_val;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntax$parser.done_parsing();
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= CONTENIDO 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
        Syntax.raiz=(Node)c;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CONTENIDO ::= Module Id Newline PROCEDIMIENTO_ST End Module 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		 Node Contenido = new Node("Contenido");
                            Contenido.addNode(new Node("Id", ((String) i)));
                            Contenido.addNode(p);
                            RESULT=Contenido;
     
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONTENIDO",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CONTENIDO ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONTENIDO",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PROCEDIMIENTO_ST ::= PROCEDIMIENTO Newline PROCEDIMIENTO_ST 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object p2 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Procedimientos = new Node("Procedimientos");
                            Procedimientos.addNode(p1);
                            Procedimientos.addNode(p2);
                            RESULT=Procedimientos;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PROCEDIMIENTO_ST",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PROCEDIMIENTO_ST ::= PROCEDIMIENTO Newline 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
    Node Procedimientos = new Node("Procedimientos");
                            Procedimientos.addNode(p1);
                            RESULT=Procedimientos;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PROCEDIMIENTO_ST",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PROCEDIMIENTO ::= FUNCTION 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Procedimiento = new Node("Procedimiento");
                            Procedimiento.addNode(f);
                            RESULT=Procedimiento;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PROCEDIMIENTO",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // PROCEDIMIENTO ::= SUB 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Procedimiento = new Node("Procedimiento");
                            Procedimiento.addNode(s);
                            RESULT=Procedimiento;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PROCEDIMIENTO",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // PROCEDIMIENTO ::= STRUCTURE 
            {
              Object RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Procedimiento = new Node("Procedimiento");
                            Procedimiento.addNode(st);
                            RESULT=Procedimiento;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PROCEDIMIENTO",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FUNCTION ::= Function Id Parizq PARAMS Parder As VAR_TIPOS Newline BODY End Function 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		
    Node Function = new Node("Function");
                            Function.addNode(new Node("Id", ((String) i),iright,ileft));
                            Function.addNode(p1);
                            Function.addNode(v);
                            Function.addNode(b);
                            RESULT=Function;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FUNCTION",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FUNCTION ::= Function Id Parizq Parder As VAR_TIPOS Newline BODY End Function 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		
    Node Function = new Node("Function");
                            Function.addNode(new Node("Id", ((String) i),iright,ileft));
                            Function.addNode(v);
                            Function.addNode(b);
                            RESULT=Function;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FUNCTION",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SUB ::= Sub Id Parizq PARAMS Parder Newline BODY End Sub 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		
    Node Sub = new Node("Sub");
                            Sub.addNode(new Node("Id", ((String) i)));
                            Sub.addNode(p1);
                            Sub.addNode(b);
                            RESULT=Sub;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SUB",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SUB ::= Sub Id Parizq Parder Newline BODY End Sub 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		
    Node Sub = new Node("Sub");
                            Sub.addNode(new Node("Id", ((String) i)));
                            Sub.addNode(b);
                            RESULT=Sub;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SUB",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // STRUCTURE ::= Structure Id Newline STRUCT_BODY End Structure 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int sbleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sbright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object sb = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		
    Node Procedimiento = new Node("Structure");
                            Procedimiento.addNode(new Node("Id", ((String) i)));
                            Procedimiento.addNode(sb);
                            RESULT=Procedimiento;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("STRUCTURE",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VAR_TIPOS ::= TypeBoolean 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Tipo=new Node("Boolean", ((String) t) );
                             RESULT=Tipo;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VAR_TIPOS",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VAR_TIPOS ::= TypeInteger 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Tipo = new Node("Integer", ((String) t) );
                            RESULT=Tipo;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VAR_TIPOS",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VAR_TIPOS ::= TypeString 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Tipo = new Node("String", ((String) t) );
                            RESULT=Tipo;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VAR_TIPOS",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // PARAMS ::= ByVal Id As VAR_TIPOS 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Parametros = new Node("Param");
                            Parametros.addNode(new Node("Id", ((String) i),iright,ileft));
                            Parametros.addNode(v);
                            RESULT=Parametros;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMS",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PARAMS ::= ByVal Id As VAR_TIPOS Coma PARAMS 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Parametro = new Node("Param");
                            Parametro.addNode(new Node("Id", ((String) i),iright,ileft));
                            Parametro.addNode(v);
                            Parametro.addNode(m);
                            RESULT=Parametro;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMS",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // BODY ::= BODY DIM 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Body = new Node("Code");
                            Body.addNode(b);
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // BODY ::= DIM 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Body = new Node("Code");
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // BODY ::= BODY ASIG_STRUCT 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Body = new Node("Code");
                            Body.addNode(b);
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // BODY ::= ASIG_STRUCT 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Body = new Node("Code");
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // BODY ::= BODY FOR 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Body = new Node("Code");
                            Body.addNode(b);
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // BODY ::= FOR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Body = new Node("Code");
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // BODY ::= BODY FOR_STEP 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Body = new Node("Code");
                            Body.addNode(b);
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // BODY ::= FOR_STEP 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Body = new Node("Code");
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // BODY ::= BODY IF EndIf Newline 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		
    Node Body = new Node("Code");
                            Body.addNode(b);
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // BODY ::= IF EndIf Newline 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		
    Node Body = new Node("Code");
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // BODY ::= BODY IF ELSE EndIf Newline 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		
    Node Body = new Node("Code");
                            Body.addNode(b);
                            Body.addNode(c);
                            Body.addNode(e);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // BODY ::= IF ELSE EndIf Newline 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		
    Node Body = new Node("Code");
                            Body.addNode(c);
                            Body.addNode(e);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // BODY ::= BODY DO_WHILE 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Body = new Node("Code");
                            Body.addNode(b);
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // BODY ::= DO_WHILE 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Body = new Node("Code");
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // BODY ::= BODY WRITE 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Body = new Node("Code");
                            Body.addNode(b);
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // BODY ::= WRITE 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Body = new Node("Code");
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // BODY ::= BODY DIM_READ 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Body = new Node("Code");
                            Body.addNode(b);
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // BODY ::= DIM_READ 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Body = new Node("Code");
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // BODY ::= BODY CONCAT Newline 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
    Node Body = new Node("Code");
                            Body.addNode(b);
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // BODY ::= CONCAT Newline 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
    Node Body = new Node("Code");
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // BODY ::= BODY ASIG_VAR 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Body = new Node("Code");
                            Body.addNode(b);
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // BODY ::= ASIG_VAR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Body = new Node("Code");
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DIM ::= Dim Id As VAR_TIPOS Newline 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
    Node Body1 = new Node("Dim");
                            Body1.addNode(new Node("Id", ((String) i), iright,ileft));
                            Body1.addNode(v);
                            RESULT=Body1;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DIM",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DIM ::= Dim Id As Id Newline 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
    Node Body1 = new Node("Dim");
                            Body1.addNode(new Node("Id", ((String) i), iright,ileft));
                            Body1.addNode(new Node("Id", ((String) v), vright,vleft));
                            RESULT=Body1;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DIM",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FOR ::= For Id Igual Num To Num Newline BODY Next Newline 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object b1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		
    Node Body2 = new Node("For");
                            Body2.addNode(new Node("Id", ((String) i), iright,ileft));
                            Body2.addNode(new Node("Igual", ((String) s)));
                            Body2.addNode(new Node("Integer", ((String) n1), iright,ileft));
                            Body2.addNode(new Node("Integer", ((String) n2), iright,ileft));
                            Body2.addNode(b1);
                            RESULT=Body2;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FOR",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FOR_STEP ::= For Id Igual Num To Num Step Num Newline BODY Next Newline 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object b1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		
    Node Body3 = new Node("For-step");
                            Body3.addNode(new Node("Id", ((String) i), iright,ileft));
                            Body3.addNode(new Node("Igual", ((String) s)));
                            Body3.addNode(new Node("Integer", ((String) n1), iright,ileft));
                            Body3.addNode(new Node("Integer", ((String) n2), iright,ileft));
                            Body3.addNode(new Node("Integer", ((String) n3), iright,ileft));
                            Body3.addNode(b1);
                            RESULT=Body3;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FOR_STEP",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-11)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // IF ::= If CONDICION Then Newline BODY 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object b1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Body4 = new Node("If");
                            Body4.addNode(c);
                            Body4.addNode(b1);
                            RESULT=Body4;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("IF",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ELSE ::= Else Newline BODY 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Else = new Node("Else");
                            Else.addNode(b);
                            RESULT=Else;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ELSE",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ELSE ::= ElseIf CONDICION Then Newline BODY 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Else = new Node("Else_if");
                            Else.addNode(c);
                            Else.addNode(b);
                            RESULT=Else;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ELSE",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DO_WHILE ::= Do While CONDICION Newline BODY Loop Newline 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object b1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		
    Node Body5 = new Node("Do-While");
                            Body5.addNode(c);
                            Body5.addNode(b1);
                            RESULT=Body5;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DIM_READ ::= Dim Id As VAR_TIPOS Igual Read Parizq Parder Newline 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		
    Node Body6 = new Node("Dim-read");
                            Body6.addNode(new Node("Id", ((String) i)));
                            Body6.addNode(v);
                            Body6.addNode(new Node("Igual", ((String) s)));
                            RESULT=Body6;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DIM_READ",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // WRITE ::= Write Parizq Num Parder Newline 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		
    Node Body7 = new Node("Write");
                            Body7.addNode(new Node("Integer", ((String) n1)));
                            RESULT=Body7;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("WRITE",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // WRITE ::= Write Parizq Id Parder Newline 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		
    Node Body7 = new Node("Write");
                            Body7.addNode(new Node("Id", ((String) i), iright,ileft));
                            RESULT=Body7;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("WRITE",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // STRUCT_BODY ::= Id As VAR_TIPOS Newline 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
    Node SBody = new Node("Struct-body");
                            SBody.addNode(new Node("Id", ((String) i),iright,ileft));
                            SBody.addNode(v);
                            RESULT=SBody;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("STRUCT_BODY",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // STRUCT_BODY ::= Id As VAR_TIPOS Newline STRUCT_BODY 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int sbleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sbright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object sb = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node SBody = new Node("Struct-body");
                            SBody.addNode(new Node("Id", ((String) i),iright,ileft));
                            SBody.addNode(v);
                            SBody.addNode(sb);
                            RESULT=SBody;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("STRUCT_BODY",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CONDICION ::= Z OpRel Z 
            {
              Object RESULT =null;
		int z1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int z1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object z1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int z2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int z2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object z2 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Condicion = new Node("Condicion");
                            Condicion.addNode(z1);
                            Condicion.addNode(new Node("OP_RELA", ((String) o)));
                            Condicion.addNode(z2);
                            RESULT=Condicion;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CONDICION ::= Y 
            {
              Object RESULT =null;
		int yleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Condicion = new Node("Condicion");
                            Condicion.addNode(y);
                            RESULT=Condicion;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Y ::= Z OpRel2 Z 
            {
              Object RESULT =null;
		int z1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int z1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object z1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int z2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int z2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object z2 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Condicion2 = new Node("Condicion-I");
                            Condicion2.addNode(z1);
                            Condicion2.addNode(new Node("OP_RELA", ((String) o)));
                            Condicion2.addNode(z2);
                            RESULT=Condicion2;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Y",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Z ::= Num 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Valor=new Node("Integer", ((String) n),nright,nleft);
                          RESULT=Valor;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Z",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Z ::= Id 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Valor=new Node("Id", ((String) i),iright,ileft);
                           RESULT=Valor;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Z",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OP_AR ::= OP_AR SumaResta T 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Operacion = new Node("Operacion");
                            Operacion.addNode(o);
                            Operacion.addNode(new Node("SumaResta", ((String) s)));
                            Operacion.addNode(t);
                            RESULT=Operacion;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OP_AR",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OP_AR ::= T 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Operacion = new Node("Operacion");
                            Operacion.addNode(t);
                            RESULT=Operacion;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OP_AR",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // T ::= T MultDiv F 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Oper2 = new Node("MultDiv");
                            Oper2.addNode(t);
                            Oper2.addNode(new Node("MultDiv", ((String) m)));
                            Oper2.addNode(f);
                            RESULT=Oper2;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("T",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // T ::= F 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Oper2 = new Node("Valor");
                            Oper2.addNode(f);
                            RESULT=Oper2;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("T",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // F ::= Num 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Valor=new Node("Integer", ((String) n),nright,nleft);
                           RESULT=Valor;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("F",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // F ::= Id 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Valor=new Node("Id", ((String) i),iright,ileft);
                           RESULT=Valor;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("F",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // F ::= Parder OP_AR Parizq 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
    Node Valor=new Node("oper");
                           Valor.addNode(o);
                           RESULT=Valor;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("F",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // IDS ::= Id Coma IDS 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Ids = new Node("Argu");
                            Ids.addNode(new Node("Id", ((String) i)));
                            Ids.addNode(id);
                            RESULT=Ids;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("IDS",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // IDS ::= Num Coma IDS 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Ids = new Node("Argu");
                            Ids.addNode(new Node("Integer", ((String) n)));
                            Ids.addNode(id);
                            RESULT=Ids;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("IDS",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // IDS ::= Cadena Coma IDS 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Ids = new Node("Argu");
                            Ids.addNode(new Node("String", ((String) n)));
                            Ids.addNode(id);
                            RESULT=Ids;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("IDS",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // IDS ::= Bool Coma IDS 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Ids = new Node("Argu");
                            Ids.addNode(new Node("Boolean", ((String) n)));
                            Ids.addNode(id);
                            RESULT=Ids;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("IDS",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // IDS ::= Id 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Ids = new Node("Argu");
                            Ids.addNode(new Node("Id", ((String) i)));
                            RESULT=Ids;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("IDS",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // IDS ::= Num 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Ids = new Node("Argu");
                            Ids.addNode(new Node("Integer", ((String) n)));
                            RESULT=Ids;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("IDS",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // IDS ::= Cadena 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Ids = new Node("Argu");
                            Ids.addNode(new Node("String", ((String) n)));
                            RESULT=Ids;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("IDS",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // IDS ::= Bool 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Ids = new Node("Argu");
                            Ids.addNode(new Node("Boolean", ((String) n)));
                            RESULT=Ids;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("IDS",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CONCAT ::= Id Igual Id SENT_CONCAT 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Concat = new Node("Concat");
                            Concat.addNode(new Node("Id", ((String) i1),i1right,i1left));
                            Concat.addNode(new Node("Igual", ((String) s)));
                            Concat.addNode(new Node("Id", ((String) i2),i2right,i2left));
                            Concat.addNode(sc);
                            RESULT=Concat;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONCAT",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CONCAT ::= Id Igual Cadena SENT_CONCAT 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Concat = new Node("Concat");
                            Concat.addNode(new Node("Id", ((String) i1),i1right,i1left));
                            Concat.addNode(new Node("Igual", ((String) s)));
                            Concat.addNode(new Node("String", ((String) ca)));
                            Concat.addNode(sc);
                            RESULT=Concat;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONCAT",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SENT_CONCAT ::= Ampersand Id SENT_CONCAT 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node SConcat = new Node("Sent-concat");
                            SConcat.addNode(new Node("Id", ((String) i1),i1right,i1left));
                            SConcat.addNode(sc);
                            RESULT=SConcat;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENT_CONCAT",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SENT_CONCAT ::= Ampersand Cadena SENT_CONCAT 
            {
              Object RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node SConcat = new Node("Sent-concat");
                            SConcat.addNode(new Node("ContString", ((String) cs)));
                            SConcat.addNode(sc);
                            RESULT=SConcat;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENT_CONCAT",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SENT_CONCAT ::= Ampersand Id 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node SConcat = new Node("Sent-concat");
                            SConcat.addNode(new Node("Id", ((String) i1),i1right,i1left));
                            RESULT=SConcat;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENT_CONCAT",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SENT_CONCAT ::= Ampersand Cadena 
            {
              Object RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node SConcat = new Node("Sent-concat");
                            SConcat.addNode(new Node("ContString", ((String) cs)));
                            RESULT=SConcat;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENT_CONCAT",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SENT_CONCAT ::= Ampersand2 Newline Id SENT_CONCAT 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node SConcat = new Node("Sent-concat");
                            SConcat.addNode(new Node("Id", ((String) i1),i1right,i1left));
                            SConcat.addNode(sc);
                            RESULT=SConcat;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENT_CONCAT",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SENT_CONCAT ::= Ampersand2 Newline Cadena SENT_CONCAT 
            {
              Object RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node SConcat = new Node("Sent-concat");
                            SConcat.addNode(new Node("ContString", ((String) cs)));
                            SConcat.addNode(sc);
                            RESULT=SConcat;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENT_CONCAT",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SENT_CONCAT ::= Ampersand2 Newline Id 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node SConcat = new Node("Sent-concat");
                            SConcat.addNode(new Node("Id", ((String) i1),i1right,i1left));
                            RESULT=SConcat;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENT_CONCAT",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SENT_CONCAT ::= Ampersand2 Newline Cadena 
            {
              Object RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node SConcat = new Node("Sent-concat");
                            SConcat.addNode(new Node("ContString", ((String) cs)));
                            RESULT=SConcat;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENT_CONCAT",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ASIG_VAR ::= Id Igual OP_AR Newline 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
    Node AsigVar = new Node("Asignar-var");
                            AsigVar.addNode(new Node("Id", ((String) i),iright,ileft));
                            AsigVar.addNode(new Node("Igual", ((String) s)));
                            AsigVar.addNode(o);
                            RESULT=AsigVar;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIG_VAR",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ASIG_VAR ::= Id Igual Id Parizq Parder Newline 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		
    Node AsigVar = new Node("Asignar-var");
                            AsigVar.addNode(new Node("Id", ((String) i1),i1right,i1left));
                            AsigVar.addNode(new Node("Igual", ((String) s)));
                            AsigVar.addNode(new Node("Id", ((String) i2),i2right,i2left));
                            RESULT=AsigVar;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIG_VAR",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ASIG_VAR ::= Id Igual Id Parizq IDS Parder Newline 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		
    Node AsigVar = new Node("Asignar-var");
                            AsigVar.addNode(new Node("Id", ((String) i1),i1right,i1left));
                            AsigVar.addNode(new Node("Igual", ((String) s)));
                            AsigVar.addNode(new Node("Id", ((String) i2),i2right,i2left));
                            AsigVar.addNode(id);
                            RESULT=AsigVar;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIG_VAR",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ASIG_VAR ::= Id Igual Bool Newline 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
    Node AsigVar = new Node("Asignar-var");
                            AsigVar.addNode(new Node("Id", ((String) i),iright,ileft));
                            AsigVar.addNode(new Node("Igual", ((String) s)));
                            AsigVar.addNode(new Node("Boolean", ((String) b)));
                            RESULT=AsigVar;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIG_VAR",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ASIG_VAR ::= Id Igual Cadena Newline 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
    Node AsigVar = new Node("Asignar-var");
                            AsigVar.addNode(new Node("Id", ((String) i),iright,ileft));
                            AsigVar.addNode(new Node("Igual", ((String) s)));
                            AsigVar.addNode(new Node("String", ((String) c)));
                            RESULT=AsigVar;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIG_VAR",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ASIG_STRUCT ::= Id Punto Id Igual VALUE Newline 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
         Node AsigVars = new Node("Asignar-varS1");
                            AsigVars.addNode(new Node("Id", ((String) i1),i1right,i1left));
                            AsigVars.addNode(new Node("Id", ((String) i2),i2right,i2left));
                            AsigVars.addNode(new Node("Igual", ((String) s)));
                            AsigVars.addNode(v);
                            RESULT=AsigVars;
         
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIG_STRUCT",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ASIG_STRUCT ::= Id Igual Id Punto Id Newline 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int i3left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int i3right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object i3 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
         Node AsigVars = new Node("Asignar-varS2");
                            AsigVars.addNode(new Node("Id", ((String) i1),i1right,i1left));
                            AsigVars.addNode(new Node("Igual", ((String) s)));
                            AsigVars.addNode(new Node("Id", ((String) i2),i2right,i2left));
                            AsigVars.addNode(new Node("Id", ((String) i3),i3right,i3left));
                            RESULT=AsigVars;
         
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIG_STRUCT",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // VALUE ::= Id 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
        Node Value=new Node("Id", ((String) i),iright,ileft);
                           RESULT=Value;
        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALUE",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // VALUE ::= Bool 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
        Node Value=new Node("Boolean", ((String) i),iright,ileft);
                           RESULT=Value;
        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALUE",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // VALUE ::= Cadena 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
        Node Value=new Node("String", ((String) i),iright,ileft);
                           RESULT=Value;
        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALUE",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // VALUE ::= Num 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
        Node Value=new Node("Integer", ((String) i),iright,ileft);
                           RESULT=Value;
        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALUE",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Syntax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
              return CUP$Syntax$do_action_part00000000(
                               CUP$Syntax$act_num,
                               CUP$Syntax$parser,
                               CUP$Syntax$stack,
                               CUP$Syntax$top);
    }
}

}
