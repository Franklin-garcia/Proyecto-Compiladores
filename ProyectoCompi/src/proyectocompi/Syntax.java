
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package proyectocompi;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Syntax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Syntax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Syntax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\162\000\002\002\004\000\002\002\003\000\002\003" +
    "\010\000\002\003\003\000\002\005\005\000\002\005\004" +
    "\000\002\005\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\026\015\000\002\026\014\000\002" +
    "\026\004\000\002\027\013\000\002\027\012\000\002\027" +
    "\004\000\002\030\010\000\002\030\004\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\006\006\000" +
    "\002\006\010\000\002\006\004\000\002\010\004\000\002" +
    "\010\003\000\002\010\004\000\002\010\003\000\002\010" +
    "\004\000\002\010\003\000\002\010\004\000\002\010\003" +
    "\000\002\010\006\000\002\010\005\000\002\010\007\000" +
    "\002\010\006\000\002\010\004\000\002\010\003\000\002" +
    "\010\004\000\002\010\003\000\002\010\004\000\002\010" +
    "\003\000\002\010\005\000\002\010\004\000\002\010\004" +
    "\000\002\010\003\000\002\031\007\000\002\031\007\000" +
    "\002\031\004\000\002\032\014\000\002\032\004\000\002" +
    "\033\016\000\002\033\005\000\002\034\007\000\002\034" +
    "\004\000\002\042\005\000\002\042\007\000\002\042\004" +
    "\000\002\035\011\000\002\035\004\000\002\037\013\000" +
    "\002\037\003\000\002\036\007\000\002\036\007\000\002" +
    "\036\004\000\002\011\006\000\002\011\007\000\002\011" +
    "\004\000\002\013\005\000\002\013\003\000\002\022\005" +
    "\000\002\023\003\000\002\023\003\000\002\017\005\000" +
    "\002\017\003\000\002\020\005\000\002\020\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\005\000\002\025" +
    "\005\000\002\025\005\000\002\025\005\000\002\025\005" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\015\006\000\002" +
    "\015\006\000\002\015\003\000\002\024\005\000\002\024" +
    "\005\000\002\024\004\000\002\024\004\000\002\024\006" +
    "\000\002\024\006\000\002\024\005\000\002\024\005\000" +
    "\002\024\003\000\002\016\006\000\002\016\010\000\002" +
    "\016\011\000\002\016\006\000\002\016\006\000\002\016" +
    "\005\000\002\043\010\000\002\043\010\000\002\043\004" +
    "\000\002\044\003\000\002\044\003\000\002\044\003\000" +
    "\002\044\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\366\000\006\003\004\045\005\001\002\000\004\002" +
    "\ufffe\001\002\000\004\053\011\001\002\000\004\002\000" +
    "\001\002\000\004\002\010\001\002\000\004\002\001\001" +
    "\002\000\004\007\012\001\002\000\012\003\021\042\014" +
    "\043\013\044\016\001\002\000\006\003\354\053\353\001" +
    "\002\000\006\003\050\053\047\001\002\000\004\014\045" +
    "\001\002\000\006\003\027\053\026\001\002\000\004\007" +
    "\ufff8\001\002\000\004\007\ufff9\001\002\000\004\014\ufffb" +
    "\001\002\000\004\007\024\001\002\000\004\007\ufffa\001" +
    "\002\000\014\003\021\014\ufffc\042\014\043\013\044\016" +
    "\001\002\000\004\014\ufffd\001\002\000\004\007\030\001" +
    "\002\000\004\007\ufff0\001\002\000\004\053\031\001\002" +
    "\000\006\003\035\052\036\001\002\000\004\014\033\001" +
    "\002\000\004\044\034\001\002\000\004\007\ufff1\001\002" +
    "\000\004\014\uffbe\001\002\000\010\046\040\047\041\050" +
    "\037\001\002\000\012\007\uffed\011\uffed\012\uffed\021\uffed" +
    "\001\002\000\012\007\uffef\011\uffef\012\uffef\021\uffef\001" +
    "\002\000\012\007\uffee\011\uffee\012\uffee\021\uffee\001\002" +
    "\000\004\007\043\001\002\000\006\014\uffc0\053\031\001" +
    "\002\000\004\014\uffbf\001\002\000\004\045\046\001\002" +
    "\000\004\002\uffff\001\002\000\004\010\051\001\002\000" +
    "\004\007\ufff5\001\002\000\006\011\052\041\053\001\002" +
    "\000\004\052\345\001\002\000\006\003\340\053\337\001" +
    "\002\000\004\011\055\001\002\000\004\052\056\001\002" +
    "\000\010\046\040\047\041\050\037\001\002\000\004\007" +
    "\060\001\002\000\020\003\074\015\062\026\072\032\063" +
    "\036\076\051\061\053\075\001\002\000\006\003\324\053" +
    "\323\001\002\000\006\003\313\010\314\001\002\000\006" +
    "\003\273\053\272\001\002\000\004\007\271\001\002\000" +
    "\010\030\122\031\121\056\264\001\002\000\034\003\uffda" +
    "\014\uffda\015\uffda\026\uffda\030\uffda\031\uffda\032\uffda\034" +
    "\uffda\036\uffda\040\uffda\051\uffda\053\uffda\056\uffda\001\002" +
    "\000\034\003\uffe6\014\uffe6\015\uffe6\026\uffe6\030\uffe6\031" +
    "\uffe6\032\uffe6\034\uffe6\036\uffe6\040\uffe6\051\uffe6\053\uffe6" +
    "\056\uffe6\001\002\000\034\003\uffe2\014\uffe2\015\uffe2\026" +
    "\uffe2\030\uffe2\031\uffe2\032\uffe2\034\uffe2\036\uffe2\040\uffe2" +
    "\051\uffe2\053\uffe2\056\uffe2\001\002\000\034\003\uffdc\014" +
    "\uffdc\015\uffdc\026\uffdc\030\uffdc\031\uffdc\032\uffdc\034\uffdc" +
    "\036\uffdc\040\uffdc\051\uffdc\053\uffdc\056\uffdc\001\002\000" +
    "\010\003\260\004\132\053\126\001\002\000\034\003\uffd8" +
    "\014\uffd8\015\uffd8\026\uffd8\030\uffd8\031\uffd8\032\uffd8\034" +
    "\uffd8\036\uffd8\040\uffd8\051\uffd8\053\uffd8\056\uffd8\001\002" +
    "\000\036\003\uffc4\007\uffa6\014\uffc4\015\uffc4\026\uffc4\030" +
    "\uffc4\031\uffc4\032\uffc4\034\uffc4\036\uffc4\040\uffc4\051\uffc4" +
    "\053\uffc4\056\uffc4\001\002\000\010\003\155\013\156\021" +
    "\157\001\002\000\006\003\147\037\146\001\002\000\022" +
    "\003\074\014\107\015\062\026\072\032\063\036\076\051" +
    "\061\053\075\001\002\000\034\003\uffd4\014\uffd4\015\uffd4" +
    "\026\uffd4\030\uffd4\031\uffd4\032\uffd4\034\uffd4\036\uffd4\040" +
    "\uffd4\051\uffd4\053\uffd4\056\uffd4\001\002\000\034\003\uffe8" +
    "\014\uffe8\015\uffe8\026\uffe8\030\uffe8\031\uffe8\032\uffe8\034" +
    "\uffe8\036\uffe8\040\uffe8\051\uffe8\053\uffe8\056\uffe8\001\002" +
    "\000\034\003\uffe4\014\uffe4\015\uffe4\026\uffe4\030\uffe4\031" +
    "\uffe4\032\uffe4\034\uffe4\036\uffe4\040\uffe4\051\uffe4\053\uffe4" +
    "\056\uffe4\001\002\000\004\007\145\001\002\000\010\030" +
    "\122\031\121\056\117\001\002\000\034\003\uffdb\014\uffdb" +
    "\015\uffdb\026\uffdb\030\uffdb\031\uffdb\032\uffdb\034\uffdb\036" +
    "\uffdb\040\uffdb\051\uffdb\053\uffdb\056\uffdb\001\002\000\034" +
    "\003\uffe7\014\uffe7\015\uffe7\026\uffe7\030\uffe7\031\uffe7\032" +
    "\uffe7\034\uffe7\036\uffe7\040\uffe7\051\uffe7\053\uffe7\056\uffe7" +
    "\001\002\000\004\042\116\001\002\000\034\003\uffe3\014" +
    "\uffe3\015\uffe3\026\uffe3\030\uffe3\031\uffe3\032\uffe3\034\uffe3" +
    "\036\uffe3\040\uffe3\051\uffe3\053\uffe3\056\uffe3\001\002\000" +
    "\034\003\uffdd\014\uffdd\015\uffdd\026\uffdd\030\uffdd\031\uffdd" +
    "\032\uffdd\034\uffdd\036\uffdd\040\uffdd\051\uffdd\053\uffdd\056" +
    "\uffdd\001\002\000\034\003\uffd9\014\uffd9\015\uffd9\026\uffd9" +
    "\030\uffd9\031\uffd9\032\uffd9\034\uffd9\036\uffd9\040\uffd9\051" +
    "\uffd9\053\uffd9\056\uffd9\001\002\000\034\003\uffd5\014\uffd5" +
    "\015\uffd5\026\uffd5\030\uffd5\031\uffd5\032\uffd5\034\uffd5\036" +
    "\uffd5\040\uffd5\051\uffd5\053\uffd5\056\uffd5\001\002\000\034" +
    "\003\uffe9\014\uffe9\015\uffe9\026\uffe9\030\uffe9\031\uffe9\032" +
    "\uffe9\034\uffe9\036\uffe9\040\uffe9\051\uffe9\053\uffe9\056\uffe9" +
    "\001\002\000\034\003\uffe5\014\uffe5\015\uffe5\026\uffe5\030" +
    "\uffe5\031\uffe5\032\uffe5\034\uffe5\036\uffe5\040\uffe5\051\uffe5" +
    "\053\uffe5\056\uffe5\001\002\000\004\007\ufff7\001\002\000" +
    "\004\007\144\001\002\000\004\056\142\001\002\000\006" +
    "\004\132\053\126\001\002\000\006\003\124\007\123\001" +
    "\002\000\020\003\074\015\062\026\072\032\063\036\076" +
    "\051\061\053\075\001\002\000\004\056\uffc8\001\002\000" +
    "\022\003\074\015\062\026\072\032\063\036\076\051\061" +
    "\053\075\056\uffca\001\002\000\012\007\uffb9\022\uffb9\023" +
    "\uffb9\027\uffb9\001\002\000\004\027\137\001\002\000\006" +
    "\022\134\023\133\001\002\000\006\007\uffbc\027\uffbc\001" +
    "\002\000\012\007\uffba\022\uffba\023\uffba\027\uffba\001\002" +
    "\000\006\004\132\053\126\001\002\000\006\004\132\053" +
    "\126\001\002\000\006\007\uffbd\027\uffbd\001\002\000\006" +
    "\007\uffbb\027\uffbb\001\002\000\004\007\140\001\002\000" +
    "\020\003\074\015\062\026\072\032\063\036\076\051\061" +
    "\053\075\001\002\000\022\003\074\015\062\026\072\032" +
    "\063\036\076\051\061\053\075\056\uffc9\001\002\000\004" +
    "\007\143\001\002\000\034\003\uffdf\014\uffdf\015\uffdf\026" +
    "\uffdf\030\uffdf\031\uffdf\032\uffdf\034\uffdf\036\uffdf\040\uffdf" +
    "\051\uffdf\053\uffdf\056\uffdf\001\002\000\034\003\uffe1\014" +
    "\uffe1\015\uffe1\026\uffe1\030\uffe1\031\uffe1\032\uffe1\034\uffe1" +
    "\036\uffe1\040\uffe1\051\uffe1\053\uffe1\056\uffe1\001\002\000" +
    "\034\003\uffd7\014\uffd7\015\uffd7\026\uffd7\030\uffd7\031\uffd7" +
    "\032\uffd7\034\uffd7\036\uffd7\040\uffd7\051\uffd7\053\uffd7\056" +
    "\uffd7\001\002\000\006\004\132\053\126\001\002\000\034" +
    "\003\uffc6\014\uffc6\015\uffc6\026\uffc6\030\uffc6\031\uffc6\032" +
    "\uffc6\034\uffc6\036\uffc6\040\uffc6\051\uffc6\053\uffc6\056\uffc6" +
    "\001\002\000\004\007\151\001\002\000\020\003\074\015" +
    "\062\026\072\032\063\036\076\051\061\053\075\001\002" +
    "\000\022\003\074\015\062\026\072\032\063\036\076\040" +
    "\153\051\061\053\075\001\002\000\004\007\154\001\002" +
    "\000\034\003\uffc7\014\uffc7\015\uffc7\026\uffc7\030\uffc7\031" +
    "\uffc7\032\uffc7\034\uffc7\036\uffc7\040\uffc7\051\uffc7\053\uffc7" +
    "\056\uffc7\001\002\000\034\003\uff94\014\uff94\015\uff94\026" +
    "\uff94\030\uff94\031\uff94\032\uff94\034\uff94\036\uff94\040\uff94" +
    "\051\uff94\053\uff94\056\uff94\001\002\000\004\053\247\001" +
    "\002\000\016\003\166\004\164\005\165\006\162\011\160" +
    "\053\161\001\002\000\010\004\164\011\160\053\173\001" +
    "\002\000\022\003\201\007\uffb3\010\217\013\220\017\uffb3" +
    "\020\uffb3\024\203\025\204\001\002\000\012\003\201\007" +
    "\200\024\203\025\204\001\002\000\012\007\uffb7\010\uffb7" +
    "\017\uffb7\020\175\001\002\000\012\007\uffb4\010\uffb4\017" +
    "\uffb4\020\uffb4\001\002\000\004\007\177\001\002\000\034" +
    "\003\uff97\014\uff97\015\uff97\026\uff97\030\uff97\031\uff97\032" +
    "\uff97\034\uff97\036\uff97\040\uff97\051\uff97\053\uff97\056\uff97" +
    "\001\002\000\006\007\171\017\172\001\002\000\012\007" +
    "\uffb5\010\uffb5\017\uffb5\020\uffb5\001\002\000\034\003\uff9c" +
    "\014\uff9c\015\uff9c\026\uff9c\030\uff9c\031\uff9c\032\uff9c\034" +
    "\uff9c\036\uff9c\040\uff9c\051\uff9c\053\uff9c\056\uff9c\001\002" +
    "\000\010\004\164\011\160\053\173\001\002\000\012\007" +
    "\uffb3\010\uffb3\017\uffb3\020\uffb3\001\002\000\012\007\uffb8" +
    "\010\uffb8\017\uffb8\020\175\001\002\000\010\004\164\011" +
    "\160\053\173\001\002\000\012\007\uffb6\010\uffb6\017\uffb6" +
    "\020\uffb6\001\002\000\034\003\uff99\014\uff99\015\uff99\026" +
    "\uff99\030\uff99\031\uff99\032\uff99\034\uff99\036\uff99\040\uff99" +
    "\051\uff99\053\uff99\056\uff99\001\002\000\034\003\uff98\014" +
    "\uff98\015\uff98\026\uff98\030\uff98\031\uff98\032\uff98\034\uff98" +
    "\036\uff98\040\uff98\051\uff98\053\uff98\056\uff98\001\002\000" +
    "\004\007\uff9d\001\002\000\004\007\uffa7\001\002\000\006" +
    "\006\213\053\212\001\002\000\004\007\205\001\002\000" +
    "\006\006\207\053\206\001\002\000\012\003\201\007\uff9f" +
    "\024\203\025\204\001\002\000\012\003\201\007\uff9e\024" +
    "\203\025\204\001\002\000\004\007\uffa0\001\002\000\004" +
    "\007\uffa1\001\002\000\012\003\201\007\uffa3\024\203\025" +
    "\204\001\002\000\012\003\201\007\uffa2\024\203\025\204" +
    "\001\002\000\004\007\uffa4\001\002\000\004\007\uffa5\001" +
    "\002\000\004\007\uffa8\001\002\000\016\003\225\004\227" +
    "\005\230\006\231\011\226\053\223\001\002\000\004\053" +
    "\221\001\002\000\004\007\222\001\002\000\034\003\uff95" +
    "\014\uff95\015\uff95\026\uff95\030\uff95\031\uff95\032\uff95\034" +
    "\uff95\036\uff95\040\uff95\051\uff95\053\uff95\056\uff95\001\002" +
    "\000\006\011\uffad\012\243\001\002\000\004\011\241\001" +
    "\002\000\004\011\uffa9\001\002\000\004\007\240\001\002" +
    "\000\006\011\uffac\012\236\001\002\000\006\011\uffaa\012" +
    "\234\001\002\000\006\011\uffab\012\232\001\002\000\014" +
    "\003\225\004\227\005\230\006\231\053\223\001\002\000" +
    "\004\011\uffaf\001\002\000\014\003\225\004\227\005\230" +
    "\006\231\053\223\001\002\000\004\011\uffae\001\002\000" +
    "\014\003\225\004\227\005\230\006\231\053\223\001\002" +
    "\000\004\011\uffb0\001\002\000\034\003\uff9b\014\uff9b\015" +
    "\uff9b\026\uff9b\030\uff9b\031\uff9b\032\uff9b\034\uff9b\036\uff9b" +
    "\040\uff9b\051\uff9b\053\uff9b\056\uff9b\001\002\000\004\007" +
    "\242\001\002\000\034\003\uff9a\014\uff9a\015\uff9a\026\uff9a" +
    "\030\uff9a\031\uff9a\032\uff9a\034\uff9a\036\uff9a\040\uff9a\051" +
    "\uff9a\053\uff9a\056\uff9a\001\002\000\014\003\225\004\227" +
    "\005\230\006\231\053\223\001\002\000\004\011\uffb1\001" +
    "\002\000\006\010\246\017\172\001\002\000\012\007\uffb2" +
    "\010\uffb2\017\uffb2\020\uffb2\001\002\000\004\021\250\001" +
    "\002\000\012\004\253\005\254\006\255\053\251\001\002" +
    "\000\004\007\uff93\001\002\000\004\007\256\001\002\000" +
    "\004\007\uff90\001\002\000\004\007\uff92\001\002\000\004" +
    "\007\uff91\001\002\000\034\003\uff96\014\uff96\015\uff96\026" +
    "\uff96\030\uff96\031\uff96\032\uff96\034\uff96\036\uff96\040\uff96" +
    "\051\uff96\053\uff96\056\uff96\001\002\000\004\027\261\001" +
    "\002\000\010\030\uffcb\031\uffcb\056\uffcb\001\002\000\004" +
    "\007\262\001\002\000\020\003\074\015\062\026\072\032" +
    "\063\036\076\051\061\053\075\001\002\000\026\003\074" +
    "\015\062\026\072\030\uffcc\031\uffcc\032\063\036\076\051" +
    "\061\053\075\056\uffcc\001\002\000\004\007\270\001\002" +
    "\000\004\056\266\001\002\000\004\007\267\001\002\000" +
    "\034\003\uffde\014\uffde\015\uffde\026\uffde\030\uffde\031\uffde" +
    "\032\uffde\034\uffde\036\uffde\040\uffde\051\uffde\053\uffde\056" +
    "\uffde\001\002\000\034\003\uffe0\014\uffe0\015\uffe0\026\uffe0" +
    "\030\uffe0\031\uffe0\032\uffe0\034\uffe0\036\uffe0\040\uffe0\051" +
    "\uffe0\053\uffe0\056\uffe0\001\002\000\034\003\uffd6\014\uffd6" +
    "\015\uffd6\026\uffd6\030\uffd6\031\uffd6\032\uffd6\034\uffd6\036" +
    "\uffd6\040\uffd6\051\uffd6\053\uffd6\056\uffd6\001\002\000\006" +
    "\003\274\021\275\001\002\000\034\003\uffcf\014\uffcf\015" +
    "\uffcf\026\uffcf\030\uffcf\031\uffcf\032\uffcf\034\uffcf\036\uffcf" +
    "\040\uffcf\051\uffcf\053\uffcf\056\uffcf\001\002\000\034\003" +
    "\uffcd\014\uffcd\015\uffcd\026\uffcd\030\uffcd\031\uffcd\032\uffcd" +
    "\034\uffcd\036\uffcd\040\uffcd\051\uffcd\053\uffcd\056\uffcd\001" +
    "\002\000\004\004\276\001\002\000\004\033\277\001\002" +
    "\000\004\004\300\001\002\000\006\007\301\035\302\001" +
    "\002\000\020\003\074\015\062\026\072\032\063\036\076" +
    "\051\061\053\075\001\002\000\004\004\303\001\002\000" +
    "\004\007\304\001\002\000\020\003\074\015\062\026\072" +
    "\032\063\036\076\051\061\053\075\001\002\000\022\003" +
    "\074\015\062\026\072\032\063\034\306\036\076\051\061" +
    "\053\075\001\002\000\004\007\307\001\002\000\034\003" +
    "\uffce\014\uffce\015\uffce\026\uffce\030\uffce\031\uffce\032\uffce" +
    "\034\uffce\036\uffce\040\uffce\051\uffce\053\uffce\056\uffce\001" +
    "\002\000\022\003\074\015\062\026\072\032\063\034\311" +
    "\036\076\051\061\053\075\001\002\000\004\007\312\001" +
    "\002\000\034\003\uffd0\014\uffd0\015\uffd0\026\uffd0\030\uffd0" +
    "\031\uffd0\032\uffd0\034\uffd0\036\uffd0\040\uffd0\051\uffd0\053" +
    "\uffd0\056\uffd0\001\002\000\034\003\uffc1\014\uffc1\015\uffc1" +
    "\026\uffc1\030\uffc1\031\uffc1\032\uffc1\034\uffc1\036\uffc1\040" +
    "\uffc1\051\uffc1\053\uffc1\056\uffc1\001\002\000\006\004\316" +
    "\053\315\001\002\000\004\011\321\001\002\000\004\011" +
    "\317\001\002\000\004\007\320\001\002\000\034\003\uffc3" +
    "\014\uffc3\015\uffc3\026\uffc3\030\uffc3\031\uffc3\032\uffc3\034" +
    "\uffc3\036\uffc3\040\uffc3\051\uffc3\053\uffc3\056\uffc3\001\002" +
    "\000\004\007\322\001\002\000\034\003\uffc2\014\uffc2\015" +
    "\uffc2\026\uffc2\030\uffc2\031\uffc2\032\uffc2\034\uffc2\036\uffc2" +
    "\040\uffc2\051\uffc2\053\uffc2\056\uffc2\001\002\000\004\052" +
    "\325\001\002\000\034\003\uffd1\014\uffd1\015\uffd1\026\uffd1" +
    "\030\uffd1\031\uffd1\032\uffd1\034\uffd1\036\uffd1\040\uffd1\051" +
    "\uffd1\053\uffd1\056\uffd1\001\002\000\012\046\040\047\041" +
    "\050\037\053\326\001\002\000\004\007\336\001\002\000" +
    "\006\007\330\021\331\001\002\000\034\003\uffd3\014\uffd3" +
    "\015\uffd3\026\uffd3\030\uffd3\031\uffd3\032\uffd3\034\uffd3\036" +
    "\uffd3\040\uffd3\051\uffd3\053\uffd3\056\uffd3\001\002\000\004" +
    "\016\332\001\002\000\004\010\333\001\002\000\004\011" +
    "\334\001\002\000\004\007\335\001\002\000\034\003\uffc5" +
    "\014\uffc5\015\uffc5\026\uffc5\030\uffc5\031\uffc5\032\uffc5\034" +
    "\uffc5\036\uffc5\040\uffc5\051\uffc5\053\uffc5\056\uffc5\001\002" +
    "\000\034\003\uffd2\014\uffd2\015\uffd2\026\uffd2\030\uffd2\031" +
    "\uffd2\032\uffd2\034\uffd2\036\uffd2\040\uffd2\051\uffd2\053\uffd2" +
    "\056\uffd2\001\002\000\004\052\341\001\002\000\004\011" +
    "\uffea\001\002\000\010\046\040\047\041\050\037\001\002" +
    "\000\006\011\uffec\012\343\001\002\000\004\041\053\001" +
    "\002\000\004\011\uffeb\001\002\000\010\046\040\047\041" +
    "\050\037\001\002\000\004\007\347\001\002\000\020\003" +
    "\074\015\062\026\072\032\063\036\076\051\061\053\075" +
    "\001\002\000\022\003\074\014\351\015\062\026\072\032" +
    "\063\036\076\051\061\053\075\001\002\000\004\042\352" +
    "\001\002\000\004\007\ufff6\001\002\000\004\010\355\001" +
    "\002\000\004\007\ufff2\001\002\000\006\011\356\041\053" +
    "\001\002\000\004\007\365\001\002\000\004\011\360\001" +
    "\002\000\004\007\361\001\002\000\020\003\074\015\062" +
    "\026\072\032\063\036\076\051\061\053\075\001\002\000" +
    "\022\003\074\014\363\015\062\026\072\032\063\036\076" +
    "\051\061\053\075\001\002\000\004\043\364\001\002\000" +
    "\004\007\ufff4\001\002\000\020\003\074\015\062\026\072" +
    "\032\063\036\076\051\061\053\075\001\002\000\022\003" +
    "\074\014\367\015\062\026\072\032\063\036\076\051\061" +
    "\053\075\001\002\000\004\043\370\001\002\000\004\007" +
    "\ufff3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\366\000\006\002\006\003\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\004\021\005" +
    "\014\026\022\027\017\030\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\004\021\005\024\026" +
    "\022\027\017\030\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\041\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\056\001\001\000\002\001\001\000\030\010\076\015" +
    "\063\016\077\031\100\032\101\033\067\034\064\035\070" +
    "\036\065\037\072\043\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\042\264\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\013\256\022\130" +
    "\023\127\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\015\102\016\112" +
    "\031\113\032\114\033\107\034\103\035\110\036\104\037" +
    "\111\043\105\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\042\117\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\013" +
    "\126\022\130\023\127\001\001\000\002\001\001\000\030" +
    "\010\124\015\063\016\077\031\100\032\101\033\067\034" +
    "\064\035\070\036\065\037\072\043\066\001\001\000\002" +
    "\001\001\000\026\015\102\016\112\031\113\032\114\033" +
    "\107\034\103\035\110\036\104\037\111\043\105\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\135\001\001" +
    "\000\004\023\134\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\010\140\015\063\016\077" +
    "\031\100\032\101\033\067\034\064\035\070\036\065\037" +
    "\072\043\066\001\001\000\026\015\102\016\112\031\113" +
    "\032\114\033\107\034\103\035\110\036\104\037\111\043" +
    "\105\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\013\147\022\130\023" +
    "\127\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\010\151\015\063\016\077\031\100\032\101\033\067\034" +
    "\064\035\070\036\065\037\072\043\066\001\001\000\026" +
    "\015\102\016\112\031\113\032\114\033\107\034\103\035" +
    "\110\036\104\037\111\043\105\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\017\166\020\162\021\167\001\001\000\010\017\244" +
    "\020\162\021\167\001\001\000\004\024\215\001\001\000" +
    "\004\024\201\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\020\173\021\167" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\175\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\210" +
    "\001\001\000\004\024\207\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\214\001\001\000\004\024\213" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\223\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\232\001" +
    "\001\000\002\001\001\000\004\025\234\001\001\000\002" +
    "\001\001\000\004\025\236\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\243\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\044\251\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\010" +
    "\262\015\063\016\077\031\100\032\101\033\067\034\064" +
    "\035\070\036\065\037\072\043\066\001\001\000\026\015" +
    "\102\016\112\031\113\032\114\033\107\034\103\035\110" +
    "\036\104\037\111\043\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\010\307\015" +
    "\063\016\077\031\100\032\101\033\067\034\064\035\070" +
    "\036\065\037\072\043\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\010\304\015\063\016\077\031\100" +
    "\032\101\033\067\034\064\035\070\036\065\037\072\043" +
    "\066\001\001\000\026\015\102\016\112\031\113\032\114" +
    "\033\107\034\103\035\110\036\104\037\111\043\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\015\102" +
    "\016\112\031\113\032\114\033\107\034\103\035\110\036" +
    "\104\037\111\043\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\326\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\341\001\001\000\002\001\001\000\004" +
    "\006\343\001\001\000\002\001\001\000\004\007\345\001" +
    "\001\000\002\001\001\000\030\010\347\015\063\016\077" +
    "\031\100\032\101\033\067\034\064\035\070\036\065\037" +
    "\072\043\066\001\001\000\026\015\102\016\112\031\113" +
    "\032\114\033\107\034\103\035\110\036\104\037\111\043" +
    "\105\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\356\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\010\361\015\063\016\077\031\100\032\101\033\067\034" +
    "\064\035\070\036\065\037\072\043\066\001\001\000\026" +
    "\015\102\016\112\031\113\032\114\033\107\034\103\035" +
    "\110\036\104\037\111\043\105\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\010\365\015\063\016\077\031" +
    "\100\032\101\033\067\034\064\035\070\036\065\037\072" +
    "\043\066\001\001\000\026\015\102\016\112\031\113\032" +
    "\114\033\107\034\103\035\110\036\104\037\111\043\105" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static Symbol found;
    public static Node raiz;
    public static LinkedList<String> Errores = new LinkedList<String>();
    private Symbol s;

    public Symbol getS(){
        return this.s;
    }

    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        found = (Symbol)info;
        StringBuilder m = new StringBuilder("Error Sintactico");
        if (info instanceof java_cup.runtime.Symbol) {
            if (found.left >= 0) {                
                if (found.right >= 0)
                    m.append(", linea "+(found.right+1));
            }
        }
        m.append(" : "+message);
        System.err.println(m);
        Syntax.Errores.add(m.toString());

    }
   

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);

    }

    public static void Contenido_Error(){
        switch(found.sym){
            case sym.Newline: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Module \n");
                break;
            case sym.End: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Procedimiento \n");
                break;
            case sym.Module: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: End \n");
                break;
            default:
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Contenido \n");
                break;
        }
        Syntax.Errores.add("[Contenido_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }

    public static void ProcedimientoST_Error(){
        switch(found.sym){
            case sym.Newline: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Un procedimiento \n");
                break;
            default:
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: ; o proposicion \n");
                break;
        }
        Syntax.Errores.add("[ProcedientoST_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }

    public static void Procedimiento_Error(){
        switch(found.sym){
            default:
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Procedimiento \n");
                break;
        }
        Syntax.Errores.add("[Procedimiento_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }

    public static void Function_Error(){
        switch(found.sym){
            case sym.Id: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Function \n");
                break;
            case sym.Parizq: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Identificador \n");
                break;
            case sym.Parder: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Parametro o ( \n");
                break;
            case sym.As: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Cierre de parentesis \n");
                break;
            case sym.Newline: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Tipo de Variable \n");
                break;
            case sym.End: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Se espereaba el cuerpo de la funcion \n");
                break;
            case sym.Function: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: End \n");
                break;
            default:
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Function \n");
                break;
        }
        Syntax.Errores.add("[Function_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }

    public static void Sub_Error(){
        switch(found.sym){
            case sym.Id: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Sub \n");
                break;
            case sym.Parizq: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Identificador \n");
                break;
            case sym.Parder: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Parametro o ( \n");
                break;
            case sym.Newline: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: ) \n");
                break;
            case sym.End: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Se espereaba el cuerpo de Sub \n");
                break;
            case sym.Sub: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: End \n");
                break;
            default:
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Sub \n");
                break;
        }
        Syntax.Errores.add("[Sub_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }

public static void Structure_Error(){
        switch(found.sym){
            case sym.Id: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Structure \n");
                break;
            case sym.Newline: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Identificardor \n");
                break;
            case sym.End: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Cuerpo de estructura \n");
                break;
            case sym.Structure: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: End \n");
                break;
            default:
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: ; o proposicion \n");
                break;
        }
        Syntax.Errores.add("[Structure_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }


public static void Params_Error(){
        switch(found.sym){
            case sym.Id: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: ByVal \n");
                break;
            case sym.As: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Identificador \n");
                break;
            case sym.Coma: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Tipo de Variable \n");
                break;
            default:
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Parametro \n");
                break;
        }
        Syntax.Errores.add("[Parameter_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }

public static void Dim_Error(){
        switch(found.sym){
            case sym.Id: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Dim \n");
                break;
            case sym.As: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Identificador \n");
                break;
            case sym.Newline: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Tipo dee variable o Id \n");
                break;
            default:
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Dim \n");
                break;
        }
        Syntax.Errores.add("[Dim_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }

public static void For_Error(){
        switch(found.sym){
            case sym.Id: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: For \n");
                break;
            case sym.Igual: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Id \n");
                break;
            case sym.Num: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: = o To \n");
                break;
            case sym.To: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Num \n");
                break;
            case sym.Next: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Cuerpo del For \n");
                break;
            case sym.Newline: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Next \n");
                break;
            default:
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: For \n");
                break;
        }
        Syntax.Errores.add("For_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }

public static void ForStep_Error(){
        switch(found.sym){
            case sym.Id: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: For \n");
                break;
            case sym.Igual: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Id \n");
                break;
            case sym.Num: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: = o To \n");
                break;
            case sym.To: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Num \n");
                break;
            case sym.Next: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Cuerpo del For \n");
                break;
            case sym.Step: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Num \n");
                break;
            case sym.Newline: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Num o Cuerpo de for \n");
                break;
            default:
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: ; o proposicion \n");
                break;
        }
        Syntax.Errores.add("[ForStep_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }

    public static void If_Error(){
        switch(found.sym){
            case sym.Then: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Condicion \n");
                break;
            case sym.Newline: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Then \n");
                break;
            default:
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: If \n");
                break;
        }
        Syntax.Errores.add("[If_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }

    public static void Else_Error(){
        switch(found.sym){
            case sym.Newline: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Else o Then \n");
                break;
            case sym.Then: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Condicion \n");
                break;
            default:
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Else \n");
                break;
        }
        Syntax.Errores.add("[Else_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }

    public static void DoWhile_Error(){
        switch(found.sym){
            case sym.Newline: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Condicion o Loop \n");
                break;
            case sym.While: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Do \n");
                break;
            case sym.Loop: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Body \n");
                break;
            default:
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: ; Do while \n");
                break;
        }
        Syntax.Errores.add("[While_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }

    public static void DimRead_Error(){
        switch(found.sym){
            case sym.Newline: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: ) \n");
                break;
            case sym.Id: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Dim \n");
                break;
            case sym.As : 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Id \n");
                break;
            case sym.Igual: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Tipo de Variable \n");
                break;
            case sym.Read: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: = \n");
                break;
            case sym.Parizq: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Read \n");
                break;
            case sym.Parder: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: ( \n");
                break;
            default:
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Dim Read \n");
                break;
        }
        Syntax.Errores.add("[DimRead_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }

    public static void Write_Error(){
        switch(found.sym){
            case sym.Parizq: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Write \n");
                break;
            case sym.Num: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: ( \n");
                break;
            case sym.Parder: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Numero \n");
                break;
            case sym.Newline: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: ) \n");
                break;   
            default:
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Write \n");
                break;
        }
        Syntax.Errores.add("[Write_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }

    public static void Ids_Error(){
        switch(found.sym){
            case sym.Coma: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Valor \n");
                break;
            default:
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Ids \n");
                break;
        }
        Syntax.Errores.add("[Ids_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }

    public static void StructBody_Error(){
        switch(found.sym){
            case sym.Newline: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Tipo de Variable \n");
                break;
            case sym.As: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Identificador \n");
                break;
            default:
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: ; o proposicion \n");
                break;
        }
        Syntax.Errores.add("[StructBody_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
    public static void AsigStruct_Error(){
        switch(found.sym){
            case sym.Newline: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Valor o Identificador \n");
                break;
            case sym.Igual: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Identificador \n");
                break;
            case sym.Id: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: . o = \n");
                break;
            case sym.Punto: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Identificador \n");
                break;
            default:
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Struct Asignacion \n");
                break;
        }
        Syntax.Errores.add("[AsigStruct_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
    public static void AsigVar_Error(){
        switch(found.sym){
            case sym.Newline: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Operador Relacional o ) \n");
                break;
            case sym.Igual: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Identificador \n");
                break;
            case sym.Id: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: = \n");
                break;
            case sym.Parizq: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Identificador \n");
                break;
            case sym.Parder: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: ( \n");
                break;
            case sym.Bool: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: = \n");
                break;
            case sym.Cadena: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: = \n");
                break;
            default:
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: AsigVar \n");
                break;
        }
        Syntax.Errores.add("[AsigVar_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
    public static void SentConcat_Error(){
        switch(found.sym){
            case sym.Newline: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: & \n");
                break;
            case sym.Id: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: & \n");
                break;
            case sym.Cadena: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: & \n");
                break;
            default:
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: SentConcat \n");
                break;
        }
        Syntax.Errores.add("[SentConcat_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }

    public static void Concat_Error(){
        switch(found.sym){
            case sym.Igual: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Id \n");
                break;
            case sym.Cadena: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: = \n");
                break;
            case sym.Id: 
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: = \n");
                break;
            default:
                Syntax.Errores.add("[Error_Syntaxis] se esperaba: Concat \n");
                break;
        }
        Syntax.Errores.add("[Concat_Error] encontro: "+found.value.toString()+" en la linea: "+(found.right+1)+" columna: "+found.left+"\n");
    }
    


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Syntax$actions {
  private final Syntax parser;

  /** Constructor */
  CUP$Syntax$actions(Syntax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action_part00000000(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntax$result;

      /* select the action based on the action number */
      switch (CUP$Syntax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = start_val;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntax$parser.done_parsing();
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= CONTENIDO 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
        Syntax.raiz=(Node)c;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CONTENIDO ::= Module Id Newline PROCEDIMIENTO_ST End Module 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		 Node Contenido = new Node("Contenido");
                            Contenido.addNode(new Node("Id", ((String) i)));
                            Contenido.addNode(p);
                            RESULT=Contenido;
     
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONTENIDO",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CONTENIDO ::= error 
            {
              Object RESULT =null;
		System.out.println("Contenido"); Syntax.Contenido_Error(); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONTENIDO",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PROCEDIMIENTO_ST ::= PROCEDIMIENTO Newline PROCEDIMIENTO_ST 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object p2 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Procedimientos = new Node("Procedimientos");
                            Procedimientos.addNode(p1);
                            Procedimientos.addNode(p2);
                            RESULT=Procedimientos;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PROCEDIMIENTO_ST",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PROCEDIMIENTO_ST ::= PROCEDIMIENTO Newline 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
    Node Procedimientos = new Node("Procedimientos");
                            Procedimientos.addNode(p1);
                            RESULT=Procedimientos;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PROCEDIMIENTO_ST",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PROCEDIMIENTO_ST ::= error 
            {
              Object RESULT =null;
		System.out.println("ProcedimientoST"); Syntax.ProcedimientoST_Error(); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PROCEDIMIENTO_ST",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // PROCEDIMIENTO ::= FUNCTION 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Procedimiento = new Node("Procedimiento");
                            Procedimiento.addNode(f);
                            RESULT=Procedimiento;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PROCEDIMIENTO",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // PROCEDIMIENTO ::= SUB 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Procedimiento = new Node("Procedimiento");
                            Procedimiento.addNode(s);
                            RESULT=Procedimiento;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PROCEDIMIENTO",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // PROCEDIMIENTO ::= STRUCTURE 
            {
              Object RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Procedimiento = new Node("Procedimiento");
                            Procedimiento.addNode(st);
                            RESULT=Procedimiento;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PROCEDIMIENTO",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FUNCTION ::= Function Id Parizq PARAMS Parder As VAR_TIPOS Newline BODY End Function 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		
    Node Function = new Node("Function");
                            Function.addNode(new Node("Id", ((String) i),iright,ileft));
                            Function.addNode(p1);
                            Function.addNode(v);
                            Function.addNode(b);
                            RESULT=Function;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FUNCTION",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FUNCTION ::= Function Id Parizq Parder As VAR_TIPOS Newline BODY End Function 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		
    Node Function = new Node("Function");
                            Function.addNode(new Node("Id", ((String) i),iright,ileft));
                            Function.addNode(v);
                            Function.addNode(b);
                            RESULT=Function;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FUNCTION",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FUNCTION ::= Function error 
            {
              Object RESULT =null;
		System.out.println("Function"); Syntax.Function_Error(); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FUNCTION",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SUB ::= Sub Id Parizq PARAMS Parder Newline BODY End Sub 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		
    Node Sub = new Node("Sub");
                            Sub.addNode(new Node("Id", ((String) i)));
                            Sub.addNode(p1);
                            Sub.addNode(b);
                            RESULT=Sub;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SUB",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SUB ::= Sub Id Parizq Parder Newline BODY End Sub 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		
    Node Sub = new Node("Sub");
                            Sub.addNode(new Node("Id", ((String) i)));
                            Sub.addNode(b);
                            RESULT=Sub;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SUB",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SUB ::= Sub error 
            {
              Object RESULT =null;
		System.out.println("Sub"); Syntax.Sub_Error(); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SUB",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // STRUCTURE ::= Structure Id Newline STRUCT_BODY End Structure 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int sbleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sbright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object sb = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		
    Node Procedimiento = new Node("Structure");
                            Procedimiento.addNode(new Node("Id", ((String) i),iright,ileft));
                            Procedimiento.addNode(sb);
                            RESULT=Procedimiento;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("STRUCTURE",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // STRUCTURE ::= Structure error 
            {
              Object RESULT =null;
		System.out.println("Structure"); Syntax.Structure_Error(); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("STRUCTURE",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VAR_TIPOS ::= TypeBoolean 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Tipo=new Node("Boolean", ((String) t) );
                             RESULT=Tipo;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VAR_TIPOS",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VAR_TIPOS ::= TypeInteger 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Tipo = new Node("Integer", ((String) t) );
                            RESULT=Tipo;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VAR_TIPOS",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VAR_TIPOS ::= TypeString 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Tipo = new Node("String", ((String) t) );
                            RESULT=Tipo;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VAR_TIPOS",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PARAMS ::= ByVal Id As VAR_TIPOS 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Parametros = new Node("Param");
                            Parametros.addNode(new Node("Id", ((String) i),iright,ileft));
                            Parametros.addNode(v);
                            RESULT=Parametros;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMS",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PARAMS ::= ByVal Id As VAR_TIPOS Coma PARAMS 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Parametro = new Node("Param");
                            Parametro.addNode(new Node("Id", ((String) i),iright,ileft));
                            Parametro.addNode(v);
                            Parametro.addNode(m);
                            RESULT=Parametro;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMS",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PARAMS ::= ByVal error 
            {
              Object RESULT =null;
		System.out.println("Function"); Syntax.Params_Error(); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMS",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // BODY ::= BODY DIM 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Body = new Node("Code");
                            Body.addNode(b);
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // BODY ::= DIM 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Body = new Node("Code");
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // BODY ::= BODY ASIG_STRUCT 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Body = new Node("Code");
                            Body.addNode(b);
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // BODY ::= ASIG_STRUCT 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Body = new Node("Code");
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // BODY ::= BODY FOR 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Body = new Node("Code");
                            Body.addNode(b);
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // BODY ::= FOR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Body = new Node("Code");
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // BODY ::= BODY FOR_STEP 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Body = new Node("Code");
                            Body.addNode(b);
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // BODY ::= FOR_STEP 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Body = new Node("Code");
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // BODY ::= BODY IF EndIf Newline 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		
    Node Body = new Node("Code");
                            Body.addNode(b);
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // BODY ::= IF EndIf Newline 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		
    Node Body = new Node("Code");
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // BODY ::= BODY IF ELSE EndIf Newline 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		
    Node Body = new Node("Code");
                            Body.addNode(b);
                            Body.addNode(c);
                            Body.addNode(e);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // BODY ::= IF ELSE EndIf Newline 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		
    Node Body = new Node("Code");
                            Body.addNode(c);
                            Body.addNode(e);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // BODY ::= BODY DO_WHILE 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Body = new Node("Code");
                            Body.addNode(b);
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // BODY ::= DO_WHILE 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Body = new Node("Code");
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // BODY ::= BODY WRITE 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Body = new Node("Code");
                            Body.addNode(b);
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // BODY ::= WRITE 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Body = new Node("Code");
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // BODY ::= BODY DIM_READ 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Body = new Node("Code");
                            Body.addNode(b);
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // BODY ::= DIM_READ 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Body = new Node("Code");
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // BODY ::= BODY CONCAT Newline 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
    Node Body = new Node("Code");
                            Body.addNode(b);
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // BODY ::= CONCAT Newline 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
    Node Body = new Node("Code");
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // BODY ::= BODY ASIG_VAR 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Body = new Node("Code");
                            Body.addNode(b);
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // BODY ::= ASIG_VAR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Body = new Node("Code");
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DIM ::= Dim Id As VAR_TIPOS Newline 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
    Node Body1 = new Node("Dim");
                            Body1.addNode(new Node("Id", ((String) i), iright,ileft));
                            Body1.addNode(v);
                            RESULT=Body1;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DIM",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DIM ::= Dim Id As Id Newline 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
    Node Body1 = new Node("Dim");
                            Body1.addNode(new Node("Id", ((String) i), iright,ileft));
                            Body1.addNode(new Node("Id", ((String) v), vright,vleft));
                            RESULT=Body1;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DIM",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DIM ::= Dim error 
            {
              Object RESULT =null;
		System.out.println("Dim"); Syntax.Dim_Error(); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DIM",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FOR ::= For Id Igual Num To Num Newline BODY Next Newline 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object b1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		
    Node Body2 = new Node("For");
                            Body2.addNode(new Node("Id", ((String) i), iright,ileft));
                            Body2.addNode(new Node("Igual", ((String) s)));
                            Body2.addNode(new Node("Integer", ((String) n1), iright,ileft));
                            Body2.addNode(new Node("Integer", ((String) n2), iright,ileft));
                            Body2.addNode(b1);
                            RESULT=Body2;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FOR",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FOR ::= For error 
            {
              Object RESULT =null;
		System.out.println("For"); Syntax.For_Error(); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FOR",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FOR_STEP ::= For Id Igual Num To Num Step Num Newline BODY Next Newline 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object b1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		
    Node Body3 = new Node("For-step");
                            Body3.addNode(new Node("Id", ((String) i), iright,ileft));
                            Body3.addNode(new Node("Igual", ((String) s)));
                            Body3.addNode(new Node("Integer", ((String) n1), iright,ileft));
                            Body3.addNode(new Node("Integer", ((String) n2), iright,ileft));
                            Body3.addNode(new Node("Integer", ((String) n3), iright,ileft));
                            Body3.addNode(b1);
                            RESULT=Body3;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FOR_STEP",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-11)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FOR_STEP ::= For Id error 
            {
              Object RESULT =null;
		System.out.println("ForStep "); Syntax.ForStep_Error(); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FOR_STEP",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // IF ::= If CONDICION Then Newline BODY 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object b1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Body4 = new Node("If");
                            Body4.addNode(c);
                            Body4.addNode(b1);
                            RESULT=Body4;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("IF",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // IF ::= If error 
            {
              Object RESULT =null;
		System.out.println("If"); Syntax.If_Error(); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("IF",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ELSE ::= Else Newline BODY 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Else = new Node("Else");
                            Else.addNode(b);
                            RESULT=Else;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ELSE",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ELSE ::= ElseIf CONDICION Then Newline BODY 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Else = new Node("Else_if");
                            Else.addNode(c);
                            Else.addNode(b);
                            RESULT=Else;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ELSE",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ELSE ::= Else error 
            {
              Object RESULT =null;
		System.out.println("Else"); Syntax.Else_Error(); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ELSE",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DO_WHILE ::= Do While CONDICION Newline BODY Loop Newline 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object b1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		
    Node Body5 = new Node("Do-While");
                            Body5.addNode(c);
                            Body5.addNode(b1);
                            RESULT=Body5;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DO_WHILE ::= Do error 
            {
              Object RESULT =null;
		System.out.println("Do While"); Syntax.DoWhile_Error(); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DIM_READ ::= Dim Id As VAR_TIPOS Igual Read Parizq Parder Newline 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		
    Node Body6 = new Node("Dim-read");
                            Body6.addNode(new Node("Id", ((String) i)));
                            Body6.addNode(v);
                            Body6.addNode(new Node("Igual", ((String) s)));
                            RESULT=Body6;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DIM_READ",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DIM_READ ::= error 
            {
              Object RESULT =null;
		System.out.println("DimRead"); Syntax.DimRead_Error(); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DIM_READ",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // WRITE ::= Write Parizq Num Parder Newline 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		
    Node Body7 = new Node("Write");
                            Body7.addNode(new Node("Integer", ((String) n1)));
                            RESULT=Body7;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("WRITE",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // WRITE ::= Write Parizq Id Parder Newline 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		
    Node Body7 = new Node("Write");
                            Body7.addNode(new Node("Id", ((String) i), iright,ileft));
                            RESULT=Body7;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("WRITE",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // WRITE ::= Write error 
            {
              Object RESULT =null;
		System.out.println("Write"); Syntax.Write_Error(); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("WRITE",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // STRUCT_BODY ::= Id As VAR_TIPOS Newline 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
    Node SBody = new Node("Struct-body");
                            SBody.addNode(new Node("Id", ((String) i),iright,ileft));
                            SBody.addNode(v);
                            RESULT=SBody;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("STRUCT_BODY",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // STRUCT_BODY ::= Id As VAR_TIPOS Newline STRUCT_BODY 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int sbleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sbright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object sb = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node SBody = new Node("Struct-body");
                            SBody.addNode(new Node("Id", ((String) i),iright,ileft));
                            SBody.addNode(v);
                            SBody.addNode(sb);
                            RESULT=SBody;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("STRUCT_BODY",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // STRUCT_BODY ::= Id error 
            {
              Object RESULT =null;
		System.out.println("Struct Body"); Syntax.StructBody_Error(); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("STRUCT_BODY",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CONDICION ::= Z OpRel Z 
            {
              Object RESULT =null;
		int z1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int z1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object z1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int z2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int z2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object z2 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Condicion = new Node("Condicion");
                            Condicion.addNode(z1);
                            Condicion.addNode(new Node("OP_RELA", ((String) o)));
                            Condicion.addNode(z2);
                            RESULT=Condicion;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CONDICION ::= Y 
            {
              Object RESULT =null;
		int yleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Condicion = new Node("Condicion");
                            Condicion.addNode(y);
                            RESULT=Condicion;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Y ::= Z OpRel2 Z 
            {
              Object RESULT =null;
		int z1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int z1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object z1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int z2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int z2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object z2 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Condicion2 = new Node("Condicion-I");
                            Condicion2.addNode(z1);
                            Condicion2.addNode(new Node("OP_RELA", ((String) o)));
                            Condicion2.addNode(z2);
                            RESULT=Condicion2;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Y",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Z ::= Num 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Valor=new Node("Integer", ((String) n),nright,nleft);
                          RESULT=Valor;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Z",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Z ::= Id 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Valor=new Node("Id", ((String) i),iright,ileft);
                           RESULT=Valor;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Z",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OP_AR ::= OP_AR SumaResta T 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Operacion = new Node("Operacion");
                            Operacion.addNode(o);
                            Operacion.addNode(new Node("SumaResta", ((String) s)));
                            Operacion.addNode(t);
                            RESULT=Operacion;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OP_AR",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OP_AR ::= T 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Operacion = new Node("Operacion");
                            Operacion.addNode(t);
                            RESULT=Operacion;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OP_AR",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // T ::= T MultDiv F 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Oper2 = new Node("MultDiv");
                            Oper2.addNode(t);
                            Oper2.addNode(new Node("MultDiv", ((String) m)));
                            Oper2.addNode(f);
                            RESULT=Oper2;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("T",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // T ::= F 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Oper2 = new Node("Valor");
                            Oper2.addNode(f);
                            RESULT=Oper2;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("T",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // F ::= Num 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Valor=new Node("Integer", ((String) n),nright,nleft);
                           RESULT=Valor;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("F",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // F ::= Id 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Valor=new Node("Id", ((String) i),iright,ileft);
                           RESULT=Valor;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("F",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // F ::= Parder OP_AR Parizq 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
    Node Valor=new Node("oper");
                           Valor.addNode(o);
                           RESULT=Valor;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("F",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // IDS ::= Id Coma IDS 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Ids = new Node("Argu");
                            Ids.addNode(new Node("Id", ((String) i)));
                            Ids.addNode(id);
                            RESULT=Ids;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("IDS",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // IDS ::= Num Coma IDS 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Ids = new Node("Argu");
                            Ids.addNode(new Node("Integer", ((String) n)));
                            Ids.addNode(id);
                            RESULT=Ids;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("IDS",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // IDS ::= Cadena Coma IDS 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Ids = new Node("Argu");
                            Ids.addNode(new Node("String", ((String) n)));
                            Ids.addNode(id);
                            RESULT=Ids;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("IDS",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // IDS ::= Bool Coma IDS 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Ids = new Node("Argu");
                            Ids.addNode(new Node("Boolean", ((String) n)));
                            Ids.addNode(id);
                            RESULT=Ids;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("IDS",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // IDS ::= Id 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Ids = new Node("Argu");
                            Ids.addNode(new Node("Id", ((String) i)));
                            RESULT=Ids;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("IDS",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // IDS ::= Num 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Ids = new Node("Argu");
                            Ids.addNode(new Node("Integer", ((String) n)));
                            RESULT=Ids;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("IDS",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // IDS ::= Cadena 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Ids = new Node("Argu");
                            Ids.addNode(new Node("String", ((String) n)));
                            RESULT=Ids;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("IDS",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // IDS ::= Bool 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Ids = new Node("Argu");
                            Ids.addNode(new Node("Boolean", ((String) n)));
                            RESULT=Ids;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("IDS",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // IDS ::= error 
            {
              Object RESULT =null;
		System.out.println("Ids"); Syntax.Ids_Error(); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("IDS",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CONCAT ::= Id Igual Id SENT_CONCAT 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Concat = new Node("Concat");
                            Concat.addNode(new Node("Id", ((String) i1),i1right,i1left));
                            Concat.addNode(new Node("Igual", ((String) s)));
                            Concat.addNode(new Node("Id", ((String) i2),i2right,i2left));
                            Concat.addNode(sc);
                            RESULT=Concat;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONCAT",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CONCAT ::= Id Igual Cadena SENT_CONCAT 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Concat = new Node("Concat");
                            Concat.addNode(new Node("Id", ((String) i1),i1right,i1left));
                            Concat.addNode(new Node("Igual", ((String) s)));
                            Concat.addNode(new Node("String", ((String) ca)));
                            Concat.addNode(sc);
                            RESULT=Concat;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONCAT",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CONCAT ::= error 
            {
              Object RESULT =null;
		System.out.println("Concat"); Syntax.Concat_Error(); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONCAT",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // SENT_CONCAT ::= Ampersand Id SENT_CONCAT 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node SConcat = new Node("Sent-concat");
                            SConcat.addNode(new Node("Id", ((String) i1),i1right,i1left));
                            SConcat.addNode(sc);
                            RESULT=SConcat;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENT_CONCAT",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // SENT_CONCAT ::= Ampersand Cadena SENT_CONCAT 
            {
              Object RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node SConcat = new Node("Sent-concat");
                            SConcat.addNode(new Node("ContString", ((String) cs)));
                            SConcat.addNode(sc);
                            RESULT=SConcat;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENT_CONCAT",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // SENT_CONCAT ::= Ampersand Id 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node SConcat = new Node("Sent-concat");
                            SConcat.addNode(new Node("Id", ((String) i1),i1right,i1left));
                            RESULT=SConcat;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENT_CONCAT",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SENT_CONCAT ::= Ampersand Cadena 
            {
              Object RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node SConcat = new Node("Sent-concat");
                            SConcat.addNode(new Node("ContString", ((String) cs)));
                            RESULT=SConcat;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENT_CONCAT",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SENT_CONCAT ::= Ampersand2 Newline Id SENT_CONCAT 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node SConcat = new Node("Sent-concat");
                            SConcat.addNode(new Node("Id", ((String) i1),i1right,i1left));
                            SConcat.addNode(sc);
                            RESULT=SConcat;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENT_CONCAT",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // SENT_CONCAT ::= Ampersand2 Newline Cadena SENT_CONCAT 
            {
              Object RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node SConcat = new Node("Sent-concat");
                            SConcat.addNode(new Node("ContString", ((String) cs)));
                            SConcat.addNode(sc);
                            RESULT=SConcat;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENT_CONCAT",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // SENT_CONCAT ::= Ampersand2 Newline Id 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node SConcat = new Node("Sent-concat");
                            SConcat.addNode(new Node("Id", ((String) i1),i1right,i1left));
                            RESULT=SConcat;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENT_CONCAT",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // SENT_CONCAT ::= Ampersand2 Newline Cadena 
            {
              Object RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node SConcat = new Node("Sent-concat");
                            SConcat.addNode(new Node("ContString", ((String) cs)));
                            RESULT=SConcat;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENT_CONCAT",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // SENT_CONCAT ::= error 
            {
              Object RESULT =null;
		System.out.println("Sent Concat"); Syntax.SentConcat_Error(); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENT_CONCAT",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ASIG_VAR ::= Id Igual OP_AR Newline 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
    Node AsigVar = new Node("Asignar-var");
                            AsigVar.addNode(new Node("Id", ((String) i),iright,ileft));
                            AsigVar.addNode(new Node("Igual", ((String) s)));
                            AsigVar.addNode(o);
                            RESULT=AsigVar;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIG_VAR",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ASIG_VAR ::= Id Igual Id Parizq Parder Newline 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		
    Node AsigVar = new Node("Asignar-varF");
                            AsigVar.addNode(new Node("Id", ((String) i1),i1right,i1left));
                            AsigVar.addNode(new Node("Igual", ((String) s)));
                            AsigVar.addNode(new Node("Id", ((String) i2),i2right,i2left));
                            RESULT=AsigVar;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIG_VAR",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ASIG_VAR ::= Id Igual Id Parizq IDS Parder Newline 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		
    Node AsigVar = new Node("Asignar-varF");
                            AsigVar.addNode(new Node("Id", ((String) i1),i1right,i1left));
                            AsigVar.addNode(new Node("Igual", ((String) s)));
                            AsigVar.addNode(new Node("Id", ((String) i2),i2right,i2left));
                            AsigVar.addNode(id);
                            RESULT=AsigVar;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIG_VAR",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ASIG_VAR ::= Id Igual Bool Newline 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
    Node AsigVar = new Node("Asignar-var");
                            AsigVar.addNode(new Node("Id", ((String) i),iright,ileft));
                            AsigVar.addNode(new Node("Igual", ((String) s)));
                            AsigVar.addNode(new Node("Boolean", ((String) b)));
                            RESULT=AsigVar;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIG_VAR",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ASIG_VAR ::= Id Igual Cadena Newline 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
    Node AsigVar = new Node("Asignar-var");
                            AsigVar.addNode(new Node("Id", ((String) i),iright,ileft));
                            AsigVar.addNode(new Node("Igual", ((String) s)));
                            AsigVar.addNode(new Node("String", ((String) c)));
                            RESULT=AsigVar;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIG_VAR",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ASIG_VAR ::= Id Igual error 
            {
              Object RESULT =null;
		System.out.println("Asig Variable"); Syntax.AsigVar_Error(); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIG_VAR",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ASIG_STRUCT ::= Id Punto Id Igual VALUE Newline 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
     Node AsigVars = new Node("Asignar-varS1");
                        AsigVars.addNode(new Node("Id", ((String) i1),i1right,i1left));
                        AsigVars.addNode(new Node("Id", ((String) i2),i2right,i2left));
                        AsigVars.addNode(new Node("Igual", ((String) s)));
                        AsigVars.addNode(v);
                        RESULT=AsigVars;
     
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIG_STRUCT",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ASIG_STRUCT ::= Id Igual Id Punto Id Newline 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int i3left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int i3right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object i3 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
     Node AsigVars = new Node("Asignar-varS2");
                        AsigVars.addNode(new Node("Id", ((String) i1),i1right,i1left));
                        AsigVars.addNode(new Node("Igual", ((String) s)));
                        AsigVars.addNode(new Node("Id", ((String) i2),i2right,i2left));
                        AsigVars.addNode(new Node("Id", ((String) i3),i3right,i3left));
                        RESULT=AsigVars;
     
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIG_STRUCT",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ASIG_STRUCT ::= Id error 
            {
              Object RESULT =null;
		System.out.println("ASIG_STRUCT"); Syntax.AsigStruct_Error(); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIG_STRUCT",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // VALUE ::= Id 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Value=new Node("Id", ((String) i),iright,ileft);
                       RESULT=Value;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALUE",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // VALUE ::= Bool 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Value=new Node("Boolean", ((String) i),iright,ileft);
                       RESULT=Value;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALUE",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // VALUE ::= Cadena 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Value=new Node("String", ((String) i),iright,ileft);
                       RESULT=Value;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALUE",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // VALUE ::= Num 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Value=new Node("Integer", ((String) i),iright,ileft);
                       RESULT=Value;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VALUE",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Syntax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
              return CUP$Syntax$do_action_part00000000(
                               CUP$Syntax$act_num,
                               CUP$Syntax$parser,
                               CUP$Syntax$stack,
                               CUP$Syntax$top);
    }
}

}
