
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package proyectocompi;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Syntax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Syntax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Syntax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\123\000\002\002\004\000\002\002\003\000\002\003" +
    "\010\000\002\003\002\000\002\005\005\000\002\005\004" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\026\015\000\002\026\014\000\002\027\013\000\002" +
    "\027\012\000\002\030\010\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\006\006\000\002\006\010" +
    "\000\002\010\004\000\002\010\003\000\002\010\004\000" +
    "\002\010\003\000\002\010\004\000\002\010\003\000\002" +
    "\010\006\000\002\010\005\000\002\010\007\000\002\010" +
    "\006\000\002\010\004\000\002\010\003\000\002\010\004" +
    "\000\002\010\003\000\002\010\004\000\002\010\003\000" +
    "\002\010\004\000\002\010\003\000\002\010\004\000\002" +
    "\010\003\000\002\031\007\000\002\032\014\000\002\033" +
    "\016\000\002\034\007\000\002\042\005\000\002\042\007" +
    "\000\002\035\011\000\002\037\013\000\002\036\007\000" +
    "\002\036\007\000\002\040\004\000\002\041\004\000\002" +
    "\011\006\000\002\011\007\000\002\013\005\000\002\013" +
    "\003\000\002\022\005\000\002\023\003\000\002\023\003" +
    "\000\002\017\005\000\002\017\003\000\002\020\005\000" +
    "\002\020\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\005\000\002\025\005\000\002\025\005\000\002\025" +
    "\005\000\002\025\005\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\015\006\000" +
    "\002\024\005\000\002\024\005\000\002\024\004\000\002" +
    "\024\004\000\002\016\006\000\002\016\010\000\002\016" +
    "\011\000\002\016\006\000\002\016\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\314\000\006\002\ufffe\043\004\001\002\000\004\051" +
    "\010\001\002\000\004\002\000\001\002\000\004\002\007" +
    "\001\002\000\004\002\001\001\002\000\004\007\011\001" +
    "\002\000\010\040\012\041\014\042\013\001\002\000\004" +
    "\051\276\001\002\000\004\051\264\001\002\000\004\051" +
    "\026\001\002\000\004\007\ufffa\001\002\000\004\007\024" +
    "\001\002\000\004\013\022\001\002\000\004\007\ufff9\001" +
    "\002\000\004\007\ufffb\001\002\000\004\043\023\001\002" +
    "\000\004\002\uffff\001\002\000\012\013\ufffc\040\012\041" +
    "\014\042\013\001\002\000\004\013\ufffd\001\002\000\004" +
    "\010\027\001\002\000\006\011\030\037\031\001\002\000" +
    "\004\007\260\001\002\000\004\051\253\001\002\000\004" +
    "\011\033\001\002\000\004\007\034\001\002\000\016\014" +
    "\054\024\037\030\051\034\046\047\047\051\041\001\002" +
    "\000\032\013\uffed\014\uffed\024\uffed\026\uffed\027\uffed\030" +
    "\uffed\032\uffed\034\uffed\036\uffed\047\uffed\051\uffed\054\uffed" +
    "\001\002\000\032\013\uffeb\014\uffeb\024\uffeb\026\uffeb\027" +
    "\uffeb\030\uffeb\032\uffeb\034\uffeb\036\uffeb\047\uffeb\051\uffeb" +
    "\054\uffeb\001\002\000\006\004\124\051\120\001\002\000" +
    "\032\013\uffe9\014\uffe9\024\uffe9\026\uffe9\027\uffe9\030\uffe9" +
    "\032\uffe9\034\uffe9\036\uffe9\047\uffe9\051\uffe9\054\uffe9\001" +
    "\002\000\004\020\174\001\002\000\032\013\uffdb\014\uffdb" +
    "\024\uffdb\026\uffdb\027\uffdb\030\uffdb\032\uffdb\034\uffdb\036" +
    "\uffdb\047\uffdb\051\uffdb\054\uffdb\001\002\000\020\013\172" +
    "\014\054\024\037\030\051\034\046\047\047\051\041\001" +
    "\002\000\032\013\uffdd\014\uffdd\024\uffdd\026\uffdd\027\uffdd" +
    "\030\uffdd\032\uffdd\034\uffdd\036\uffdd\047\uffdd\051\uffdd\054" +
    "\uffdd\001\002\000\004\007\171\001\002\000\004\035\163" +
    "\001\002\000\004\051\147\001\002\000\010\026\115\027" +
    "\114\054\142\001\002\000\004\051\065\001\002\000\032" +
    "\013\uffe1\014\uffe1\024\uffe1\026\uffe1\027\uffe1\030\uffe1\032" +
    "\uffe1\034\uffe1\036\uffe1\047\uffe1\051\uffe1\054\uffe1\001\002" +
    "\000\032\013\uffdf\014\uffdf\024\uffdf\026\uffdf\027\uffdf\030" +
    "\uffdf\032\uffdf\034\uffdf\036\uffdf\047\uffdf\051\uffdf\054\uffdf" +
    "\001\002\000\004\010\056\001\002\000\032\013\uffe3\014" +
    "\uffe3\024\uffe3\026\uffe3\027\uffe3\030\uffe3\032\uffe3\034\uffe3" +
    "\036\uffe3\047\uffe3\051\uffe3\054\uffe3\001\002\000\006\004" +
    "\060\051\057\001\002\000\004\011\063\001\002\000\004" +
    "\011\061\001\002\000\004\007\062\001\002\000\032\013" +
    "\uffd2\014\uffd2\024\uffd2\026\uffd2\027\uffd2\030\uffd2\032\uffd2" +
    "\034\uffd2\036\uffd2\047\uffd2\051\uffd2\054\uffd2\001\002\000" +
    "\004\007\064\001\002\000\032\013\uffd1\014\uffd1\024\uffd1" +
    "\026\uffd1\027\uffd1\030\uffd1\032\uffd1\034\uffd1\036\uffd1\047" +
    "\uffd1\051\uffd1\054\uffd1\001\002\000\004\020\066\001\002" +
    "\000\004\004\067\001\002\000\004\031\070\001\002\000" +
    "\004\004\071\001\002\000\006\007\072\033\073\001\002" +
    "\000\016\014\054\024\037\030\051\034\046\047\047\051" +
    "\041\001\002\000\004\004\074\001\002\000\004\007\075" +
    "\001\002\000\016\014\054\024\037\030\051\034\046\047" +
    "\047\051\041\001\002\000\020\014\054\024\037\030\051" +
    "\032\107\034\046\047\047\051\041\001\002\000\032\013" +
    "\uffee\014\uffee\024\uffee\026\uffee\027\uffee\030\uffee\032\uffee" +
    "\034\uffee\036\uffee\047\uffee\051\uffee\054\uffee\001\002\000" +
    "\032\013\uffec\014\uffec\024\uffec\026\uffec\027\uffec\030\uffec" +
    "\032\uffec\034\uffec\036\uffec\047\uffec\051\uffec\054\uffec\001" +
    "\002\000\032\013\uffea\014\uffea\024\uffea\026\uffea\027\uffea" +
    "\030\uffea\032\uffea\034\uffea\036\uffea\047\uffea\051\uffea\054" +
    "\uffea\001\002\000\032\013\uffdc\014\uffdc\024\uffdc\026\uffdc" +
    "\027\uffdc\030\uffdc\032\uffdc\034\uffdc\036\uffdc\047\uffdc\051" +
    "\uffdc\054\uffdc\001\002\000\032\013\uffde\014\uffde\024\uffde" +
    "\026\uffde\027\uffde\030\uffde\032\uffde\034\uffde\036\uffde\047" +
    "\uffde\051\uffde\054\uffde\001\002\000\010\026\115\027\114" +
    "\054\112\001\002\000\032\013\uffe2\014\uffe2\024\uffe2\026" +
    "\uffe2\027\uffe2\030\uffe2\032\uffe2\034\uffe2\036\uffe2\047\uffe2" +
    "\051\uffe2\054\uffe2\001\002\000\032\013\uffe0\014\uffe0\024" +
    "\uffe0\026\uffe0\027\uffe0\030\uffe0\032\uffe0\034\uffe0\036\uffe0" +
    "\047\uffe0\051\uffe0\054\uffe0\001\002\000\004\007\111\001" +
    "\002\000\032\013\uffe4\014\uffe4\024\uffe4\026\uffe4\027\uffe4" +
    "\030\uffe4\032\uffe4\034\uffe4\036\uffe4\047\uffe4\051\uffe4\054" +
    "\uffe4\001\002\000\032\013\uffd8\014\uffd8\024\uffd8\026\uffd8" +
    "\027\uffd8\030\uffd8\032\uffd8\034\uffd8\036\uffd8\047\uffd8\051" +
    "\uffd8\054\uffd8\001\002\000\004\007\136\001\002\000\004" +
    "\054\134\001\002\000\006\004\124\051\120\001\002\000" +
    "\004\007\116\001\002\000\016\014\054\024\037\030\051" +
    "\034\046\047\047\051\041\001\002\000\020\014\054\024" +
    "\037\030\051\034\046\047\047\051\041\054\uffd6\001\002" +
    "\000\012\007\uffc8\021\uffc8\022\uffc8\025\uffc8\001\002\000" +
    "\004\025\131\001\002\000\006\021\126\022\125\001\002" +
    "\000\006\007\uffcb\025\uffcb\001\002\000\012\007\uffc9\021" +
    "\uffc9\022\uffc9\025\uffc9\001\002\000\006\004\124\051\120" +
    "\001\002\000\006\004\124\051\120\001\002\000\006\007" +
    "\uffcc\025\uffcc\001\002\000\006\007\uffca\025\uffca\001\002" +
    "\000\004\007\132\001\002\000\016\014\054\024\037\030" +
    "\051\034\046\047\047\051\041\001\002\000\020\014\054" +
    "\024\037\030\051\034\046\047\047\051\041\054\uffd5\001" +
    "\002\000\004\007\135\001\002\000\032\013\uffe6\014\uffe6" +
    "\024\uffe6\026\uffe6\027\uffe6\030\uffe6\032\uffe6\034\uffe6\036" +
    "\uffe6\047\uffe6\051\uffe6\054\uffe6\001\002\000\032\013\uffe8" +
    "\014\uffe8\024\uffe8\026\uffe8\027\uffe8\030\uffe8\032\uffe8\034" +
    "\uffe8\036\uffe8\047\uffe8\051\uffe8\054\uffe8\001\002\000\020" +
    "\014\054\024\037\030\051\032\140\034\046\047\047\051" +
    "\041\001\002\000\004\007\141\001\002\000\032\013\uffd9" +
    "\014\uffd9\024\uffd9\026\uffd9\027\uffd9\030\uffd9\032\uffd9\034" +
    "\uffd9\036\uffd9\047\uffd9\051\uffd9\054\uffd9\001\002\000\004" +
    "\007\146\001\002\000\004\054\144\001\002\000\004\007" +
    "\145\001\002\000\032\013\uffe5\014\uffe5\024\uffe5\026\uffe5" +
    "\027\uffe5\030\uffe5\032\uffe5\034\uffe5\036\uffe5\047\uffe5\051" +
    "\uffe5\054\uffe5\001\002\000\032\013\uffe7\014\uffe7\024\uffe7" +
    "\026\uffe7\027\uffe7\030\uffe7\032\uffe7\034\uffe7\036\uffe7\047" +
    "\uffe7\051\uffe7\054\uffe7\001\002\000\004\050\150\001\002" +
    "\000\010\044\151\045\153\046\152\001\002\000\012\007" +
    "\ufff3\011\ufff3\012\ufff3\020\ufff3\001\002\000\012\007\ufff1" +
    "\011\ufff1\012\ufff1\020\ufff1\001\002\000\012\007\ufff2\011" +
    "\ufff2\012\ufff2\020\ufff2\001\002\000\006\007\155\020\156" +
    "\001\002\000\032\013\uffda\014\uffda\024\uffda\026\uffda\027" +
    "\uffda\030\uffda\032\uffda\034\uffda\036\uffda\047\uffda\051\uffda" +
    "\054\uffda\001\002\000\004\015\157\001\002\000\004\010" +
    "\160\001\002\000\004\011\161\001\002\000\004\007\162" +
    "\001\002\000\032\013\uffd3\014\uffd3\024\uffd3\026\uffd3\027" +
    "\uffd3\030\uffd3\032\uffd3\034\uffd3\036\uffd3\047\uffd3\051\uffd3" +
    "\054\uffd3\001\002\000\006\004\124\051\120\001\002\000" +
    "\004\007\165\001\002\000\016\014\054\024\037\030\051" +
    "\034\046\047\047\051\041\001\002\000\020\014\054\024" +
    "\037\030\051\034\046\036\167\047\047\051\041\001\002" +
    "\000\004\007\170\001\002\000\032\013\uffd4\014\uffd4\024" +
    "\uffd4\026\uffd4\027\uffd4\030\uffd4\032\uffd4\034\uffd4\036\uffd4" +
    "\047\uffd4\051\uffd4\054\uffd4\001\002\000\032\013\uffd0\014" +
    "\uffd0\024\uffd0\026\uffd0\027\uffd0\030\uffd0\032\uffd0\034\uffd0" +
    "\036\uffd0\047\uffd0\051\uffd0\054\uffd0\001\002\000\004\041" +
    "\173\001\002\000\004\007\ufff6\001\002\000\014\004\203" +
    "\005\202\006\204\011\177\051\176\001\002\000\006\007" +
    "\246\016\214\001\002\000\014\007\uffc2\010\216\016\uffc2" +
    "\017\uffc2\023\220\001\002\000\010\004\203\011\177\051" +
    "\210\001\002\000\012\007\uffc6\010\uffc6\016\uffc6\017\207" +
    "\001\002\000\012\007\uffc4\010\uffc4\016\uffc4\017\uffc4\001" +
    "\002\000\004\007\206\001\002\000\012\007\uffc3\010\uffc3" +
    "\016\uffc3\017\uffc3\001\002\000\004\007\205\001\002\000" +
    "\032\013\uffaf\014\uffaf\024\uffaf\026\uffaf\027\uffaf\030\uffaf" +
    "\032\uffaf\034\uffaf\036\uffaf\047\uffaf\051\uffaf\054\uffaf\001" +
    "\002\000\032\013\uffb0\014\uffb0\024\uffb0\026\uffb0\027\uffb0" +
    "\030\uffb0\032\uffb0\034\uffb0\036\uffb0\047\uffb0\051\uffb0\054" +
    "\uffb0\001\002\000\010\004\203\011\177\051\210\001\002" +
    "\000\012\007\uffc2\010\uffc2\016\uffc2\017\uffc2\001\002\000" +
    "\012\007\uffc5\010\uffc5\016\uffc5\017\uffc5\001\002\000\006" +
    "\010\213\016\214\001\002\000\012\007\uffc1\010\uffc1\016" +
    "\uffc1\017\uffc1\001\002\000\010\004\203\011\177\051\210" +
    "\001\002\000\012\007\uffc7\010\uffc7\016\uffc7\017\207\001" +
    "\002\000\014\004\232\005\230\006\231\011\227\051\225" +
    "\001\002\000\004\007\uffb8\001\002\000\006\051\221\052" +
    "\222\001\002\000\006\007\uffb5\023\220\001\002\000\006" +
    "\007\uffb4\023\220\001\002\000\004\007\uffb6\001\002\000" +
    "\004\007\uffb7\001\002\000\006\011\uffbc\012\244\001\002" +
    "\000\004\011\242\001\002\000\004\007\241\001\002\000" +
    "\006\011\uffb9\012\237\001\002\000\006\011\uffba\012\235" +
    "\001\002\000\006\011\uffbb\012\233\001\002\000\012\004" +
    "\232\005\230\006\231\051\225\001\002\000\004\011\uffbf" +
    "\001\002\000\012\004\232\005\230\006\231\051\225\001" +
    "\002\000\004\011\uffbe\001\002\000\012\004\232\005\230" +
    "\006\231\051\225\001\002\000\004\011\uffbd\001\002\000" +
    "\032\013\uffb2\014\uffb2\024\uffb2\026\uffb2\027\uffb2\030\uffb2" +
    "\032\uffb2\034\uffb2\036\uffb2\047\uffb2\051\uffb2\054\uffb2\001" +
    "\002\000\004\007\243\001\002\000\032\013\uffb1\014\uffb1" +
    "\024\uffb1\026\uffb1\027\uffb1\030\uffb1\032\uffb1\034\uffb1\036" +
    "\uffb1\047\uffb1\051\uffb1\054\uffb1\001\002\000\012\004\232" +
    "\005\230\006\231\051\225\001\002\000\004\011\uffc0\001" +
    "\002\000\032\013\uffb3\014\uffb3\024\uffb3\026\uffb3\027\uffb3" +
    "\030\uffb3\032\uffb3\034\uffb3\036\uffb3\047\uffb3\051\uffb3\054" +
    "\uffb3\001\002\000\004\025\250\001\002\000\004\007\251" +
    "\001\002\000\016\014\054\024\037\030\051\034\046\047" +
    "\047\051\041\001\002\000\024\014\054\024\037\026\uffd7" +
    "\027\uffd7\030\051\034\046\047\047\051\041\054\uffd7\001" +
    "\002\000\004\050\254\001\002\000\010\044\151\045\153" +
    "\046\152\001\002\000\006\011\ufff0\012\256\001\002\000" +
    "\004\037\031\001\002\000\004\011\uffef\001\002\000\016" +
    "\014\054\024\037\030\051\034\046\047\047\051\041\001" +
    "\002\000\020\013\262\014\054\024\037\030\051\034\046" +
    "\047\047\051\041\001\002\000\004\041\263\001\002\000" +
    "\004\007\ufff5\001\002\000\004\007\265\001\002\000\004" +
    "\051\266\001\002\000\004\050\272\001\002\000\004\013" +
    "\270\001\002\000\004\042\271\001\002\000\004\007\ufff4" +
    "\001\002\000\010\044\151\045\153\046\152\001\002\000" +
    "\004\007\274\001\002\000\006\013\uffce\051\266\001\002" +
    "\000\004\013\uffcd\001\002\000\004\010\277\001\002\000" +
    "\006\011\300\037\031\001\002\000\004\050\311\001\002" +
    "\000\004\011\302\001\002\000\004\050\303\001\002\000" +
    "\010\044\151\045\153\046\152\001\002\000\004\007\305" +
    "\001\002\000\016\014\054\024\037\030\051\034\046\047" +
    "\047\051\041\001\002\000\020\013\307\014\054\024\037" +
    "\030\051\034\046\047\047\051\041\001\002\000\004\040" +
    "\310\001\002\000\004\007\ufff8\001\002\000\010\044\151" +
    "\045\153\046\152\001\002\000\004\007\313\001\002\000" +
    "\016\014\054\024\037\030\051\034\046\047\047\051\041" +
    "\001\002\000\020\013\315\014\054\024\037\030\051\034" +
    "\046\047\047\051\041\001\002\000\004\040\316\001\002" +
    "\000\004\007\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\314\000\006\002\005\003\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\004\015\005\016\026\020\027" +
    "\014\030\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\004\015\005\024\026" +
    "\020\027\014\030\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\010\042\015\044\016\041\031\034\032\035\033\037\034" +
    "\047\035\054\036\051\037\052\040\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\013\246\022\122\023" +
    "\121\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\015\044\016\101\031\076\032\077\033" +
    "\100\034\103\035\107\036\104\037\105\040\102\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\042\142\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\010\136\015\044\016\041\031\034\032\035\033\037" +
    "\034\047\035\054\036\051\037\052\040\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\010\075\015\044" +
    "\016\041\031\034\032\035\033\037\034\047\035\054\036" +
    "\051\037\052\040\043\001\001\000\026\015\044\016\101" +
    "\031\076\032\077\033\100\034\103\035\107\036\104\037" +
    "\105\040\102\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\042\112\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\013\120\022\122" +
    "\023\121\001\001\000\002\001\001\000\030\010\116\015" +
    "\044\016\041\031\034\032\035\033\037\034\047\035\054" +
    "\036\051\037\052\040\043\001\001\000\026\015\044\016" +
    "\101\031\076\032\077\033\100\034\103\035\107\036\104" +
    "\037\105\040\102\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\127\001\001\000\004\023\126\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\010\132\015\044\016\041\031\034\032\035\033\037\034" +
    "\047\035\054\036\051\037\052\040\043\001\001\000\026" +
    "\015\044\016\101\031\076\032\077\033\100\034\103\035" +
    "\107\036\104\037\105\040\102\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\015\044\016" +
    "\101\031\076\032\077\033\100\034\103\035\107\036\104" +
    "\037\105\040\102\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\153\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\013\163\022\122\023" +
    "\121\001\001\000\002\001\001\000\030\010\165\015\044" +
    "\016\041\031\034\032\035\033\037\034\047\035\054\036" +
    "\051\037\052\040\043\001\001\000\026\015\044\016\101" +
    "\031\076\032\077\033\100\034\103\035\107\036\104\037" +
    "\105\040\102\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\017\174\020\177\021\200\001\001\000\002\001\001" +
    "\000\004\024\216\001\001\000\010\017\211\020\177\021" +
    "\200\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\210\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\020\214\021\200\001\001\000\002\001\001" +
    "\000\004\025\225\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\223\001\001\000\004\024\222\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\233\001\001\000" +
    "\002\001\001\000\004\025\235\001\001\000\002\001\001" +
    "\000\004\025\237\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\244" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\010\251\015\044\016\041" +
    "\031\034\032\035\033\037\034\047\035\054\036\051\037" +
    "\052\040\043\001\001\000\026\015\044\016\101\031\076" +
    "\032\077\033\100\034\103\035\107\036\104\037\105\040" +
    "\102\001\001\000\002\001\001\000\004\007\254\001\001" +
    "\000\002\001\001\000\004\006\256\001\001\000\002\001" +
    "\001\000\030\010\260\015\044\016\041\031\034\032\035" +
    "\033\037\034\047\035\054\036\051\037\052\040\043\001" +
    "\001\000\026\015\044\016\101\031\076\032\077\033\100" +
    "\034\103\035\107\036\104\037\105\040\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\266\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\272\001\001" +
    "\000\002\001\001\000\004\011\274\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\300\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\303\001\001\000\002\001\001\000\030\010\305\015\044" +
    "\016\041\031\034\032\035\033\037\034\047\035\054\036" +
    "\051\037\052\040\043\001\001\000\026\015\044\016\101" +
    "\031\076\032\077\033\100\034\103\035\107\036\104\037" +
    "\105\040\102\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\311\001\001\000\002\001\001\000\030\010" +
    "\313\015\044\016\041\031\034\032\035\033\037\034\047" +
    "\035\054\036\051\037\052\040\043\001\001\000\026\015" +
    "\044\016\101\031\076\032\077\033\100\034\103\035\107" +
    "\036\104\037\105\040\102\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static Node raiz;
    private Symbol s;

    public void syntax_error(Symbol s){
        this.s=s;
    }

    public Symbol getS(){
        return this.s;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Syntax$actions {
  private final Syntax parser;

  /** Constructor */
  CUP$Syntax$actions(Syntax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action_part00000000(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntax$result;

      /* select the action based on the action number */
      switch (CUP$Syntax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = start_val;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntax$parser.done_parsing();
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= CONTENIDO 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
        Syntax.raiz=(Node)c;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CONTENIDO ::= Module Id Newline PROCEDIMIENTO_ST End Module 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		 Node Contenido = new Node("Contenido");
                            Contenido.addNode(new Node("Id", ((String) i)));
                            Contenido.addNode(p);
                            RESULT=Contenido;
     
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONTENIDO",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CONTENIDO ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONTENIDO",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PROCEDIMIENTO_ST ::= PROCEDIMIENTO Newline PROCEDIMIENTO_ST 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object p2 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Procedimientos = new Node("Procedimientos");
                            Procedimientos.addNode(p1);
                            Procedimientos.addNode(p2);
                            RESULT=Procedimientos;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PROCEDIMIENTO_ST",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PROCEDIMIENTO_ST ::= PROCEDIMIENTO Newline 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
    Node Procedimientos = new Node("Procedimientos");
                            Procedimientos.addNode(p1);
                            RESULT=Procedimientos;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PROCEDIMIENTO_ST",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PROCEDIMIENTO ::= FUNCTION 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Procedimiento = new Node("Procedimiento");
                            Procedimiento.addNode(f);
                            RESULT=Procedimiento;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PROCEDIMIENTO",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // PROCEDIMIENTO ::= SUB 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Procedimiento = new Node("Procedimiento");
                            Procedimiento.addNode(s);
                            RESULT=Procedimiento;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PROCEDIMIENTO",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // PROCEDIMIENTO ::= STRUCTURE 
            {
              Object RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Procedimiento = new Node("Procedimiento");
                            Procedimiento.addNode(st);
                            RESULT=Procedimiento;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PROCEDIMIENTO",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FUNCTION ::= Function Id Parizq PARAMS Parder As VAR_TIPOS Newline BODY End Function 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		
    Node Function = new Node("Function");
                            Function.addNode(new Node("Id", ((String) i),iright,ileft));
                            Function.addNode(p1);
                            Function.addNode(v);
                            Function.addNode(b);
                            RESULT=Function;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FUNCTION",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FUNCTION ::= Function Id Parizq Parder As VAR_TIPOS Newline BODY End Function 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		
    Node Function = new Node("Function");
                            Function.addNode(new Node("Id", ((String) i),iright,ileft));
                            Function.addNode(v);
                            Function.addNode(b);
                            RESULT=Function;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FUNCTION",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SUB ::= Sub Id Parizq PARAMS Parder Newline BODY End Sub 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		
    Node Sub = new Node("Sub");
                            Sub.addNode(new Node("Id", ((String) i)));
                            Sub.addNode(p1);
                            Sub.addNode(b);
                            RESULT=Sub;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SUB",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SUB ::= Sub Id Parizq Parder Newline BODY End Sub 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		
    Node Sub = new Node("Sub");
                            Sub.addNode(new Node("Id", ((String) i)));
                            Sub.addNode(b);
                            RESULT=Sub;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SUB",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // STRUCTURE ::= Structure Id Newline STRUCT_BODY End Structure 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int sbleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sbright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object sb = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		
    Node Procedimiento = new Node("Structure");
                            Procedimiento.addNode(new Node("Id", ((String) i)));
                            Procedimiento.addNode(sb);
                            RESULT=Procedimiento;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("STRUCTURE",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VAR_TIPOS ::= TypeBoolean 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Tipo=new Node("Boolean", ((String) t) );
                             RESULT=Tipo;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VAR_TIPOS",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VAR_TIPOS ::= TypeInteger 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Tipo = new Node("Integer", ((String) t) );
                            RESULT=Tipo;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VAR_TIPOS",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VAR_TIPOS ::= TypeString 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Tipo = new Node("String", ((String) t) );
                            RESULT=Tipo;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VAR_TIPOS",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // PARAMS ::= ByVal Id As VAR_TIPOS 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Parametros = new Node("Param");
                            Parametros.addNode(new Node("Id", ((String) i),iright,ileft));
                            Parametros.addNode(v);
                            RESULT=Parametros;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMS",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PARAMS ::= ByVal Id As VAR_TIPOS Coma PARAMS 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Parametro = new Node("Param");
                            Parametro.addNode(new Node("Id", ((String) i),iright,ileft));
                            Parametro.addNode(v);
                            Parametro.addNode(m);
                            RESULT=Parametro;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMS",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // BODY ::= BODY DIM 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Body = new Node("Code");
                            Body.addNode(b);
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // BODY ::= DIM 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Body = new Node("Code");
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // BODY ::= BODY FOR 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Body = new Node("Code");
                            Body.addNode(b);
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // BODY ::= FOR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Body = new Node("Code");
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // BODY ::= BODY FOR_STEP 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Body = new Node("Code");
                            Body.addNode(b);
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // BODY ::= FOR_STEP 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Body = new Node("Code");
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // BODY ::= BODY IF EndIf Newline 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		
    Node Body = new Node("Code");
                            Body.addNode(b);
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // BODY ::= IF EndIf Newline 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		
    Node Body = new Node("Code");
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // BODY ::= BODY IF ELSE EndIf Newline 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		
    Node Body = new Node("Code");
                            Body.addNode(b);
                            Body.addNode(c);
                            Body.addNode(e);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // BODY ::= IF ELSE EndIf Newline 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		
    Node Body = new Node("Code");
                            Body.addNode(c);
                            Body.addNode(e);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // BODY ::= BODY DO_WHILE 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Body = new Node("Code");
                            Body.addNode(b);
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // BODY ::= DO_WHILE 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Body = new Node("Code");
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // BODY ::= BODY WRITE 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Body = new Node("Code");
                            Body.addNode(b);
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // BODY ::= WRITE 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Body = new Node("Code");
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // BODY ::= BODY DIM_READ 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Body = new Node("Code");
                            Body.addNode(b);
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // BODY ::= DIM_READ 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Body = new Node("Code");
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // BODY ::= BODY CONCATENAR 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Body = new Node("Code");
                            Body.addNode(b);
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // BODY ::= CONCATENAR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Body = new Node("Code");
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // BODY ::= BODY ASIG_VAR 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Body = new Node("Code");
                            Body.addNode(b);
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // BODY ::= ASIG_VAR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Body = new Node("Code");
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DIM ::= Dim Id As VAR_TIPOS Newline 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
    Node Body1 = new Node("Dim");
                            Body1.addNode(new Node("Id", ((String) i), iright,ileft));
                            Body1.addNode(v);
                            RESULT=Body1;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DIM",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FOR ::= For Id Igual Num To Num Newline BODY Next Newline 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object b1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		
    Node Body2 = new Node("For");
                            Body2.addNode(new Node("Id", ((String) i), iright,ileft));
                            Body2.addNode(new Node("Igual", ((String) s)));
                            Body2.addNode(new Node("Integer", ((String) n1), iright,ileft));
                            Body2.addNode(new Node("Integer", ((String) n2), iright,ileft));
                            Body2.addNode(b1);
                            RESULT=Body2;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FOR",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FOR_STEP ::= For Id Igual Num To Num Step Num Newline BODY Next Newline 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object b1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		
    Node Body3 = new Node("For-step");
                            Body3.addNode(new Node("Id", ((String) i), iright,ileft));
                            Body3.addNode(new Node("Igual", ((String) s)));
                            Body3.addNode(new Node("Integer", ((String) n1), iright,ileft));
                            Body3.addNode(new Node("Integer", ((String) n2), iright,ileft));
                            Body3.addNode(new Node("Integer", ((String) n3), iright,ileft));
                            Body3.addNode(b1);
                            RESULT=Body3;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FOR_STEP",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-11)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // IF ::= If CONDICION Then Newline BODY 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object b1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Body4 = new Node("If");
                            Body4.addNode(c);
                            Body4.addNode(b1);
                            RESULT=Body4;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("IF",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ELSE ::= Else Newline BODY 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Else = new Node("Else");
                            Else.addNode(b);
                            RESULT=Else;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ELSE",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ELSE ::= ElseIf CONDICION Then Newline BODY 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Else = new Node("Else_if");
                            Else.addNode(c);
                            Else.addNode(b);
                            RESULT=Else;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ELSE",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DO_WHILE ::= Do While CONDICION Newline BODY Loop Newline 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object b1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		
    Node Body5 = new Node("Do-While");
                            Body5.addNode(c);
                            Body5.addNode(b1);
                            RESULT=Body5;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DIM_READ ::= Dim Id As VAR_TIPOS Igual Read Parizq Parder Newline 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		
    Node Body6 = new Node("Dim-read");
                            Body6.addNode(new Node("Id", ((String) i)));
                            Body6.addNode(v);
                            Body6.addNode(new Node("Igual", ((String) s)));
                            RESULT=Body6;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DIM_READ",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // WRITE ::= Write Parizq Num Parder Newline 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		
    Node Body7 = new Node("Write");
                            Body7.addNode(new Node("Integer", ((String) n1)));
                            RESULT=Body7;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("WRITE",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // WRITE ::= Write Parizq Id Parder Newline 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		
    Node Body7 = new Node("Write");
                            Body7.addNode(new Node("Id", ((String) i), iright,ileft));
                            RESULT=Body7;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("WRITE",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CONCATENAR ::= CONCAT Newline 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
    Node Body8 = new Node("Concat");
                            Body8.addNode(c);
                            RESULT=Body8;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONCATENAR",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ASIGN ::= ASIG_VAR Newline 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
    Node Body9 = new Node("Asignar");
                            Body9.addNode(c);
                            RESULT=Body9;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGN",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // STRUCT_BODY ::= Id As VAR_TIPOS Newline 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
    Node SBody = new Node("Struct-body");
                            SBody.addNode(new Node("Id", ((String) i)));
                            SBody.addNode(v);
                            RESULT=SBody;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("STRUCT_BODY",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // STRUCT_BODY ::= Id As VAR_TIPOS Newline STRUCT_BODY 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int sbleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sbright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object sb = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node SBody = new Node("Struct-body");
                            SBody.addNode(new Node("Id", ((String) i)));
                            SBody.addNode(v);
                            SBody.addNode(sb);
                            RESULT=SBody;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("STRUCT_BODY",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CONDICION ::= Z OpRel Z 
            {
              Object RESULT =null;
		int z1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int z1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object z1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int z2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int z2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object z2 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Condicion = new Node("Condicion");
                            Condicion.addNode(z1);
                            Condicion.addNode(new Node("OP_RELA", ((String) o)));
                            Condicion.addNode(z2);
                            RESULT=Condicion;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CONDICION ::= Y 
            {
              Object RESULT =null;
		int yleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Condicion = new Node("Condicion");
                            Condicion.addNode(y);
                            RESULT=Condicion;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Y ::= Z OpRel2 Z 
            {
              Object RESULT =null;
		int z1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int z1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object z1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int z2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int z2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object z2 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Condicion2 = new Node("Condicion-I");
                            Condicion2.addNode(z1);
                            Condicion2.addNode(new Node("OP_RELA", ((String) o)));
                            Condicion2.addNode(z2);
                            RESULT=Condicion2;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Y",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Z ::= Num 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Valor=new Node("Integer", ((String) n),nright,nleft);
                          RESULT=Valor;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Z",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Z ::= Id 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Valor=new Node("Id", ((String) i),iright,ileft);
                           RESULT=Valor;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Z",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OP_AR ::= OP_AR SumaResta T 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Operacion = new Node("Operacion");
                            Operacion.addNode(o);
                            Operacion.addNode(new Node("SumaResta", ((String) s)));
                            Operacion.addNode(t);
                            RESULT=Operacion;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OP_AR",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OP_AR ::= T 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Operacion = new Node("Operacion");
                            Operacion.addNode(t);
                            RESULT=Operacion;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OP_AR",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // T ::= T MultDiv F 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Oper2 = new Node("MultDiv");
                            Oper2.addNode(t);
                            Oper2.addNode(new Node("MultDiv", ((String) m)));
                            Oper2.addNode(f);
                            RESULT=Oper2;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("T",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // T ::= F 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Oper2 = new Node("Valor");
                            Oper2.addNode(f);
                            RESULT=Oper2;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("T",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // F ::= Num 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Valor=new Node("Integer", ((String) n),nright,nleft);
                           RESULT=Valor;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("F",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // F ::= Id 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Valor=new Node("Id", ((String) i),iright,ileft);
                           RESULT=Valor;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("F",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // F ::= Parder OP_AR Parizq 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
    Node Valor=new Node("oper");
                           Valor.addNode(o);
                           RESULT=Valor;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("F",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // IDS ::= Id Coma IDS 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Ids = new Node("Argu");
                            Ids.addNode(new Node("Id", ((String) i)));
                            Ids.addNode(id);
                            RESULT=Ids;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("IDS",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // IDS ::= Num Coma IDS 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Ids = new Node("Argu");
                            Ids.addNode(new Node("Integer", ((String) n)));
                            Ids.addNode(id);
                            RESULT=Ids;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("IDS",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // IDS ::= Cadena Coma IDS 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Ids = new Node("Argu");
                            Ids.addNode(new Node("String", ((String) n)));
                            Ids.addNode(id);
                            RESULT=Ids;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("IDS",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // IDS ::= Bool Coma IDS 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Ids = new Node("Argu");
                            Ids.addNode(new Node("Boolean", ((String) n)));
                            Ids.addNode(id);
                            RESULT=Ids;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("IDS",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // IDS ::= Id 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Ids = new Node("Argu");
                            Ids.addNode(new Node("Id", ((String) i)));
                            RESULT=Ids;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("IDS",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // IDS ::= Num 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Ids = new Node("Argu");
                            Ids.addNode(new Node("Integer", ((String) n)));
                            RESULT=Ids;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("IDS",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // IDS ::= Cadena 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Ids = new Node("Argu");
                            Ids.addNode(new Node("String", ((String) n)));
                            RESULT=Ids;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("IDS",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // IDS ::= Bool 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Ids = new Node("Argu");
                            Ids.addNode(new Node("Boolean", ((String) n)));
                            RESULT=Ids;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("IDS",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CONCAT ::= Id Igual Id SENT_CONCAT 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Concat = new Node("Concat");
                            Concat.addNode(new Node("Id", ((String) i1)));
                            Concat.addNode(new Node("Igual", ((String) s)));
                            Concat.addNode(new Node("Id", ((String) i2)));
                            Concat.addNode(sc);
                            RESULT=Concat;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONCAT",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SENT_CONCAT ::= Ampersand Id SENT_CONCAT 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node SConcat = new Node("Sent-concat");
                            SConcat.addNode(new Node("Id", ((String) i1)));
                            SConcat.addNode(sc);
                            RESULT=SConcat;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENT_CONCAT",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SENT_CONCAT ::= Ampersand ContString SENT_CONCAT 
            {
              Object RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node SConcat = new Node("Sent-concat");
                            SConcat.addNode(new Node("ContString", ((String) cs)));
                            SConcat.addNode(sc);
                            RESULT=SConcat;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENT_CONCAT",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SENT_CONCAT ::= Ampersand Id 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node SConcat = new Node("Sent-concat");
                            SConcat.addNode(new Node("Id", ((String) i1)));
                            RESULT=SConcat;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENT_CONCAT",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SENT_CONCAT ::= Ampersand ContString 
            {
              Object RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node SConcat = new Node("Sent-concat");
                            SConcat.addNode(new Node("ContString", ((String) cs)));
                            RESULT=SConcat;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENT_CONCAT",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ASIG_VAR ::= Id Igual OP_AR Newline 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
    Node AsigVar = new Node("Asignar-var");
                            AsigVar.addNode(new Node("Id", ((String) i),iright,ileft));
                            AsigVar.addNode(new Node("Igual", ((String) s)));
                            AsigVar.addNode(o);
                            RESULT=AsigVar;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIG_VAR",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ASIG_VAR ::= Id Igual Id Parizq Parder Newline 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		
    Node AsigVar = new Node("Asignar-var");
                            AsigVar.addNode(new Node("Id", ((String) i1),i1right,i1left));
                            AsigVar.addNode(new Node("Igual", ((String) s)));
                            AsigVar.addNode(new Node("Id", ((String) i2),i2right,i2left));
                            RESULT=AsigVar;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIG_VAR",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ASIG_VAR ::= Id Igual Id Parizq IDS Parder Newline 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		
    Node AsigVar = new Node("Asignar-var");
                            AsigVar.addNode(new Node("Id", ((String) i1),i1right,i1left));
                            AsigVar.addNode(new Node("Igual", ((String) s)));
                            AsigVar.addNode(new Node("Id", ((String) i2),i2right,i2left));
                            AsigVar.addNode(id);
                            RESULT=AsigVar;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIG_VAR",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ASIG_VAR ::= Id Igual Bool Newline 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
    Node AsigVar = new Node("Asignar-var");
                            AsigVar.addNode(new Node("Id", ((String) i),iright,ileft));
                            AsigVar.addNode(new Node("Igual", ((String) s)));
                            AsigVar.addNode(new Node("Boolean", ((String) b)));
                            RESULT=AsigVar;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIG_VAR",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ASIG_VAR ::= Id Igual Cadena Newline 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
    Node AsigVar = new Node("Asignar-var");
                            AsigVar.addNode(new Node("Id", ((String) i),iright,ileft));
                            AsigVar.addNode(new Node("Igual", ((String) s)));
                            AsigVar.addNode(new Node("String", ((String) c)));
                            RESULT=AsigVar;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIG_VAR",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Syntax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
              return CUP$Syntax$do_action_part00000000(
                               CUP$Syntax$act_num,
                               CUP$Syntax$parser,
                               CUP$Syntax$stack,
                               CUP$Syntax$top);
    }
}

}
