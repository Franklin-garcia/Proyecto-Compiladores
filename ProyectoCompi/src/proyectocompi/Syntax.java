
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package proyectocompi;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Syntax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Syntax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Syntax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\116\000\002\002\004\000\002\002\003\000\002\003" +
    "\010\000\002\003\002\000\002\005\005\000\002\005\004" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\026\015\000\002\026\014\000\002\027\013\000\002" +
    "\027\012\000\002\030\010\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\006\006\000\002\006\007" +
    "\000\002\012\011\000\002\012\007\000\002\010\004\000" +
    "\002\010\003\000\002\010\004\000\002\010\003\000\002" +
    "\010\004\000\002\010\003\000\002\010\004\000\002\010" +
    "\003\000\002\010\004\000\002\010\003\000\002\010\004" +
    "\000\002\010\003\000\002\010\004\000\002\010\003\000" +
    "\002\010\004\000\002\010\003\000\002\010\004\000\002" +
    "\010\003\000\002\031\007\000\002\032\014\000\002\033" +
    "\016\000\002\034\012\000\002\034\011\000\002\042\005" +
    "\000\002\042\007\000\002\035\011\000\002\037\013\000" +
    "\002\036\007\000\002\036\007\000\002\040\004\000\002" +
    "\041\004\000\002\011\006\000\002\011\007\000\002\013" +
    "\005\000\002\013\003\000\002\022\005\000\002\023\003" +
    "\000\002\023\003\000\002\017\005\000\002\017\003\000" +
    "\002\020\005\000\002\020\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\005\000\002\025\005\000\002\025" +
    "\005\000\002\025\003\000\002\025\003\000\002\015\006" +
    "\000\002\024\005\000\002\024\005\000\002\024\004\000" +
    "\002\024\004\000\002\016\006\000\002\016\010\000\002" +
    "\016\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\303\000\006\002\ufffe\041\004\001\002\000\004\047" +
    "\010\001\002\000\004\002\000\001\002\000\004\002\007" +
    "\001\002\000\004\002\001\001\002\000\004\005\011\001" +
    "\002\000\010\036\012\037\014\040\013\001\002\000\004" +
    "\047\265\001\002\000\004\047\253\001\002\000\004\047" +
    "\026\001\002\000\004\005\ufffa\001\002\000\004\005\024" +
    "\001\002\000\004\011\022\001\002\000\004\005\ufff9\001" +
    "\002\000\004\005\ufffb\001\002\000\004\041\023\001\002" +
    "\000\004\002\uffff\001\002\000\012\011\ufffc\036\012\037" +
    "\014\040\013\001\002\000\004\011\ufffd\001\002\000\004" +
    "\006\027\001\002\000\006\007\030\035\031\001\002\000" +
    "\004\005\247\001\002\000\004\047\234\001\002\000\004" +
    "\007\033\001\002\000\004\005\034\001\002\000\016\012" +
    "\054\022\037\026\051\032\047\045\046\047\041\001\002" +
    "\000\032\011\uffeb\012\uffeb\022\uffeb\024\uffeb\025\uffeb\026" +
    "\uffeb\030\uffeb\032\uffeb\034\uffeb\045\uffeb\047\uffeb\052\uffeb" +
    "\001\002\000\032\011\uffe9\012\uffe9\022\uffe9\024\uffe9\025" +
    "\uffe9\026\uffe9\030\uffe9\032\uffe9\034\uffe9\045\uffe9\047\uffe9" +
    "\052\uffe9\001\002\000\006\004\122\047\116\001\002\000" +
    "\032\011\uffe7\012\uffe7\022\uffe7\024\uffe7\025\uffe7\026\uffe7" +
    "\030\uffe7\032\uffe7\034\uffe7\045\uffe7\047\uffe7\052\uffe7\001" +
    "\002\000\004\016\152\001\002\000\032\011\uffdb\012\uffdb" +
    "\022\uffdb\024\uffdb\025\uffdb\026\uffdb\030\uffdb\032\uffdb\034" +
    "\uffdb\045\uffdb\047\uffdb\052\uffdb\001\002\000\020\011\150" +
    "\012\054\022\037\026\051\032\047\045\046\047\041\001" +
    "\002\000\032\011\uffdd\012\uffdd\022\uffdd\024\uffdd\025\uffdd" +
    "\026\uffdd\030\uffdd\032\uffdd\034\uffdd\045\uffdd\047\uffdd\052" +
    "\uffdd\001\002\000\004\005\147\001\002\000\004\047\133" +
    "\001\002\000\004\033\115\001\002\000\032\011\uffe5\012" +
    "\uffe5\022\uffe5\024\uffe5\025\uffe5\026\uffe5\030\uffe5\032\uffe5" +
    "\034\uffe5\045\uffe5\047\uffe5\052\uffe5\001\002\000\004\047" +
    "\065\001\002\000\032\011\uffe1\012\uffe1\022\uffe1\024\uffe1" +
    "\025\uffe1\026\uffe1\030\uffe1\032\uffe1\034\uffe1\045\uffe1\047" +
    "\uffe1\052\uffe1\001\002\000\032\011\uffdf\012\uffdf\022\uffdf" +
    "\024\uffdf\025\uffdf\026\uffdf\030\uffdf\032\uffdf\034\uffdf\045" +
    "\uffdf\047\uffdf\052\uffdf\001\002\000\004\006\056\001\002" +
    "\000\032\011\uffe3\012\uffe3\022\uffe3\024\uffe3\025\uffe3\026" +
    "\uffe3\030\uffe3\032\uffe3\034\uffe3\045\uffe3\047\uffe3\052\uffe3" +
    "\001\002\000\006\004\060\047\057\001\002\000\004\007" +
    "\063\001\002\000\004\007\061\001\002\000\004\005\062" +
    "\001\002\000\032\011\uffd1\012\uffd1\022\uffd1\024\uffd1\025" +
    "\uffd1\026\uffd1\030\uffd1\032\uffd1\034\uffd1\045\uffd1\047\uffd1" +
    "\052\uffd1\001\002\000\004\005\064\001\002\000\032\011" +
    "\uffd0\012\uffd0\022\uffd0\024\uffd0\025\uffd0\026\uffd0\030\uffd0" +
    "\032\uffd0\034\uffd0\045\uffd0\047\uffd0\052\uffd0\001\002\000" +
    "\004\016\066\001\002\000\004\004\067\001\002\000\004" +
    "\027\070\001\002\000\004\004\071\001\002\000\006\005" +
    "\072\031\073\001\002\000\016\012\054\022\037\026\051" +
    "\032\047\045\046\047\041\001\002\000\004\004\074\001" +
    "\002\000\004\005\075\001\002\000\016\012\054\022\037" +
    "\026\051\032\047\045\046\047\041\001\002\000\020\012" +
    "\054\022\037\026\051\030\107\032\047\045\046\047\041" +
    "\001\002\000\032\011\uffec\012\uffec\022\uffec\024\uffec\025" +
    "\uffec\026\uffec\030\uffec\032\uffec\034\uffec\045\uffec\047\uffec" +
    "\052\uffec\001\002\000\032\011\uffea\012\uffea\022\uffea\024" +
    "\uffea\025\uffea\026\uffea\030\uffea\032\uffea\034\uffea\045\uffea" +
    "\047\uffea\052\uffea\001\002\000\032\011\uffe8\012\uffe8\022" +
    "\uffe8\024\uffe8\025\uffe8\026\uffe8\030\uffe8\032\uffe8\034\uffe8" +
    "\045\uffe8\047\uffe8\052\uffe8\001\002\000\032\011\uffdc\012" +
    "\uffdc\022\uffdc\024\uffdc\025\uffdc\026\uffdc\030\uffdc\032\uffdc" +
    "\034\uffdc\045\uffdc\047\uffdc\052\uffdc\001\002\000\032\011" +
    "\uffde\012\uffde\022\uffde\024\uffde\025\uffde\026\uffde\030\uffde" +
    "\032\uffde\034\uffde\045\uffde\047\uffde\052\uffde\001\002\000" +
    "\032\011\uffe6\012\uffe6\022\uffe6\024\uffe6\025\uffe6\026\uffe6" +
    "\030\uffe6\032\uffe6\034\uffe6\045\uffe6\047\uffe6\052\uffe6\001" +
    "\002\000\032\011\uffe2\012\uffe2\022\uffe2\024\uffe2\025\uffe2" +
    "\026\uffe2\030\uffe2\032\uffe2\034\uffe2\045\uffe2\047\uffe2\052" +
    "\uffe2\001\002\000\032\011\uffe0\012\uffe0\022\uffe0\024\uffe0" +
    "\025\uffe0\026\uffe0\030\uffe0\032\uffe0\034\uffe0\045\uffe0\047" +
    "\uffe0\052\uffe0\001\002\000\004\005\111\001\002\000\032" +
    "\011\uffe4\012\uffe4\022\uffe4\024\uffe4\025\uffe4\026\uffe4\030" +
    "\uffe4\032\uffe4\034\uffe4\045\uffe4\047\uffe4\052\uffe4\001\002" +
    "\000\032\011\uffd8\012\uffd8\022\uffd8\024\uffd8\025\uffd8\026" +
    "\uffd8\030\uffd8\032\uffd8\034\uffd8\045\uffd8\047\uffd8\052\uffd8" +
    "\001\002\000\020\012\054\022\037\026\051\030\113\032" +
    "\047\045\046\047\041\001\002\000\004\005\114\001\002" +
    "\000\032\011\uffd9\012\uffd9\022\uffd9\024\uffd9\025\uffd9\026" +
    "\uffd9\030\uffd9\032\uffd9\034\uffd9\045\uffd9\047\uffd9\052\uffd9" +
    "\001\002\000\006\004\122\047\116\001\002\000\012\005" +
    "\uffc7\017\uffc7\020\uffc7\023\uffc7\001\002\000\004\005\127" +
    "\001\002\000\006\017\124\020\123\001\002\000\006\005" +
    "\uffca\023\uffca\001\002\000\012\005\uffc8\017\uffc8\020\uffc8" +
    "\023\uffc8\001\002\000\006\004\122\047\116\001\002\000" +
    "\006\004\122\047\116\001\002\000\006\005\uffcb\023\uffcb" +
    "\001\002\000\006\005\uffc9\023\uffc9\001\002\000\016\012" +
    "\054\022\037\026\051\032\047\045\046\047\041\001\002" +
    "\000\020\012\054\022\037\026\051\032\047\034\131\045" +
    "\046\047\041\001\002\000\004\005\132\001\002\000\032" +
    "\011\uffd3\012\uffd3\022\uffd3\024\uffd3\025\uffd3\026\uffd3\030" +
    "\uffd3\032\uffd3\034\uffd3\045\uffd3\047\uffd3\052\uffd3\001\002" +
    "\000\004\046\134\001\002\000\010\042\135\043\137\044" +
    "\136\001\002\000\012\005\ufff3\007\ufff3\010\ufff3\016\ufff3" +
    "\001\002\000\012\005\ufff1\007\ufff1\010\ufff1\016\ufff1\001" +
    "\002\000\012\005\ufff2\007\ufff2\010\ufff2\016\ufff2\001\002" +
    "\000\006\005\141\016\142\001\002\000\032\011\uffda\012" +
    "\uffda\022\uffda\024\uffda\025\uffda\026\uffda\030\uffda\032\uffda" +
    "\034\uffda\045\uffda\047\uffda\052\uffda\001\002\000\004\013" +
    "\143\001\002\000\004\006\144\001\002\000\004\007\145" +
    "\001\002\000\004\005\146\001\002\000\032\011\uffd2\012" +
    "\uffd2\022\uffd2\024\uffd2\025\uffd2\026\uffd2\030\uffd2\032\uffd2" +
    "\034\uffd2\045\uffd2\047\uffd2\052\uffd2\001\002\000\032\011" +
    "\uffcf\012\uffcf\022\uffcf\024\uffcf\025\uffcf\026\uffcf\030\uffcf" +
    "\032\uffcf\034\uffcf\045\uffcf\047\uffcf\052\uffcf\001\002\000" +
    "\004\037\151\001\002\000\004\005\ufff6\001\002\000\010" +
    "\004\160\007\155\047\154\001\002\000\006\005\212\014" +
    "\166\001\002\000\014\005\uffc1\006\171\014\uffc1\015\uffc1" +
    "\021\172\001\002\000\010\004\160\007\155\047\162\001" +
    "\002\000\012\005\uffc5\006\uffc5\014\uffc5\015\161\001\002" +
    "\000\012\005\uffc3\006\uffc3\014\uffc3\015\uffc3\001\002\000" +
    "\012\005\uffc2\006\uffc2\014\uffc2\015\uffc2\001\002\000\010" +
    "\004\160\007\155\047\162\001\002\000\012\005\uffc1\006" +
    "\uffc1\014\uffc1\015\uffc1\001\002\000\012\005\uffc4\006\uffc4" +
    "\014\uffc4\015\uffc4\001\002\000\006\006\165\014\166\001" +
    "\002\000\012\005\uffc0\006\uffc0\014\uffc0\015\uffc0\001\002" +
    "\000\010\004\160\007\155\047\162\001\002\000\012\005" +
    "\uffc6\006\uffc6\014\uffc6\015\161\001\002\000\004\005\uffbb" +
    "\001\002\000\010\004\202\007\201\047\177\001\002\000" +
    "\006\047\173\050\174\001\002\000\006\005\uffb8\021\172" +
    "\001\002\000\006\005\uffb7\021\172\001\002\000\004\005" +
    "\uffb9\001\002\000\004\005\uffba\001\002\000\006\007\uffbd" +
    "\010\210\001\002\000\004\007\206\001\002\000\004\005" +
    "\205\001\002\000\006\007\uffbc\010\203\001\002\000\006" +
    "\004\202\047\177\001\002\000\004\007\uffbe\001\002\000" +
    "\032\011\uffb5\012\uffb5\022\uffb5\024\uffb5\025\uffb5\026\uffb5" +
    "\030\uffb5\032\uffb5\034\uffb5\045\uffb5\047\uffb5\052\uffb5\001" +
    "\002\000\004\005\207\001\002\000\032\011\uffb4\012\uffb4" +
    "\022\uffb4\024\uffb4\025\uffb4\026\uffb4\030\uffb4\032\uffb4\034" +
    "\uffb4\045\uffb4\047\uffb4\052\uffb4\001\002\000\006\004\202" +
    "\047\177\001\002\000\004\007\uffbf\001\002\000\032\011" +
    "\uffb6\012\uffb6\022\uffb6\024\uffb6\025\uffb6\026\uffb6\030\uffb6" +
    "\032\uffb6\034\uffb6\045\uffb6\047\uffb6\052\uffb6\001\002\000" +
    "\004\023\214\001\002\000\004\005\215\001\002\000\016" +
    "\012\054\022\037\026\051\032\047\045\046\047\041\001" +
    "\002\000\024\012\054\022\037\024\217\025\221\026\051" +
    "\032\047\045\046\047\041\052\222\001\002\000\004\005" +
    "\232\001\002\000\004\052\230\001\002\000\006\004\122" +
    "\047\116\001\002\000\004\005\223\001\002\000\032\011" +
    "\uffd6\012\uffd6\022\uffd6\024\uffd6\025\uffd6\026\uffd6\030\uffd6" +
    "\032\uffd6\034\uffd6\045\uffd6\047\uffd6\052\uffd6\001\002\000" +
    "\004\023\225\001\002\000\004\005\226\001\002\000\016" +
    "\012\054\022\037\026\051\032\047\045\046\047\041\001" +
    "\002\000\020\012\054\022\037\026\051\032\047\045\046" +
    "\047\041\052\uffd4\001\002\000\004\005\231\001\002\000" +
    "\032\011\uffd7\012\uffd7\022\uffd7\024\uffd7\025\uffd7\026\uffd7" +
    "\030\uffd7\032\uffd7\034\uffd7\045\uffd7\047\uffd7\052\uffd7\001" +
    "\002\000\016\012\054\022\037\026\051\032\047\045\046" +
    "\047\041\001\002\000\020\012\054\022\037\026\051\032" +
    "\047\045\046\047\041\052\uffd5\001\002\000\004\046\235" +
    "\001\002\000\010\042\135\043\137\044\136\001\002\000" +
    "\006\007\ufff0\010\237\001\002\000\004\035\241\001\002" +
    "\000\004\007\uffef\001\002\000\004\047\242\001\002\000" +
    "\004\046\243\001\002\000\010\042\135\043\137\044\136" +
    "\001\002\000\006\007\uffed\010\245\001\002\000\004\035" +
    "\031\001\002\000\004\007\uffee\001\002\000\016\012\054" +
    "\022\037\026\051\032\047\045\046\047\041\001\002\000" +
    "\020\011\251\012\054\022\037\026\051\032\047\045\046" +
    "\047\041\001\002\000\004\037\252\001\002\000\004\005" +
    "\ufff5\001\002\000\004\005\254\001\002\000\004\047\255" +
    "\001\002\000\004\046\261\001\002\000\004\011\257\001" +
    "\002\000\004\040\260\001\002\000\004\005\ufff4\001\002" +
    "\000\010\042\135\043\137\044\136\001\002\000\004\005" +
    "\263\001\002\000\006\011\uffcd\047\255\001\002\000\004" +
    "\011\uffcc\001\002\000\004\006\266\001\002\000\006\007" +
    "\267\035\031\001\002\000\004\046\300\001\002\000\004" +
    "\007\271\001\002\000\004\046\272\001\002\000\010\042" +
    "\135\043\137\044\136\001\002\000\004\005\274\001\002" +
    "\000\016\012\054\022\037\026\051\032\047\045\046\047" +
    "\041\001\002\000\020\011\276\012\054\022\037\026\051" +
    "\032\047\045\046\047\041\001\002\000\004\036\277\001" +
    "\002\000\004\005\ufff8\001\002\000\010\042\135\043\137" +
    "\044\136\001\002\000\004\005\302\001\002\000\016\012" +
    "\054\022\037\026\051\032\047\045\046\047\041\001\002" +
    "\000\020\011\304\012\054\022\037\026\051\032\047\045" +
    "\046\047\041\001\002\000\004\036\305\001\002\000\004" +
    "\005\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\303\000\006\002\005\003\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\004\015\005\016\026\020\027" +
    "\014\030\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\004\015\005\024\026" +
    "\020\027\014\030\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\010\042\015\044\016\041\031\034\032\035\033\037\034" +
    "\047\035\054\036\051\037\052\040\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\013\212\022\120\023" +
    "\117\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\015\044\016\101\031\076\032\077\033" +
    "\100\034\103\035\107\036\104\037\105\040\102\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\010" +
    "\111\015\044\016\041\031\034\032\035\033\037\034\047" +
    "\035\054\036\051\037\052\040\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\010\075\015\044\016\041" +
    "\031\034\032\035\033\037\034\047\035\054\036\051\037" +
    "\052\040\043\001\001\000\026\015\044\016\101\031\076" +
    "\032\077\033\100\034\103\035\107\036\104\037\105\040" +
    "\102\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\015\044\016" +
    "\101\031\076\032\077\033\100\034\103\035\107\036\104" +
    "\037\105\040\102\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\013\116\022\120\023\117\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\125\001\001\000\004" +
    "\023\124\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\010\127\015\044\016\041\031\034\032\035\033\037" +
    "\034\047\035\054\036\051\037\052\040\043\001\001\000" +
    "\026\015\044\016\101\031\076\032\077\033\100\034\103" +
    "\035\107\036\104\037\105\040\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\137" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\017\152\020\155\021\156\001\001\000" +
    "\002\001\001\000\004\024\167\001\001\000\010\017\163" +
    "\020\155\021\156\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\162\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\020\166\021\156\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\177\001\001\000\002\001" +
    "\001\000\004\024\175\001\001\000\004\024\174\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\203\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\210\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\010\215\015\044\016\041\031\034" +
    "\032\035\033\037\034\047\035\054\036\051\037\052\040" +
    "\043\001\001\000\030\015\044\016\101\031\076\032\077" +
    "\033\100\034\103\035\107\036\104\037\105\040\102\042" +
    "\217\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\013\223\022\120\023\117\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\010\226\015\044\016\041\031\034\032\035\033\037\034" +
    "\047\035\054\036\051\037\052\040\043\001\001\000\026" +
    "\015\044\016\101\031\076\032\077\033\100\034\103\035" +
    "\107\036\104\037\105\040\102\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\010\232\015\044\016\041\031" +
    "\034\032\035\033\037\034\047\035\054\036\051\037\052" +
    "\040\043\001\001\000\026\015\044\016\101\031\076\032" +
    "\077\033\100\034\103\035\107\036\104\037\105\040\102" +
    "\001\001\000\002\001\001\000\004\007\235\001\001\000" +
    "\004\012\237\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\243\001" +
    "\001\000\002\001\001\000\004\006\245\001\001\000\002" +
    "\001\001\000\030\010\247\015\044\016\041\031\034\032" +
    "\035\033\037\034\047\035\054\036\051\037\052\040\043" +
    "\001\001\000\026\015\044\016\101\031\076\032\077\033" +
    "\100\034\103\035\107\036\104\037\105\040\102\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\255\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\261\001" +
    "\001\000\002\001\001\000\004\011\263\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\267\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\272\001\001\000\002\001\001\000\030\010\274\015" +
    "\044\016\041\031\034\032\035\033\037\034\047\035\054" +
    "\036\051\037\052\040\043\001\001\000\026\015\044\016" +
    "\101\031\076\032\077\033\100\034\103\035\107\036\104" +
    "\037\105\040\102\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\300\001\001\000\002\001\001\000\030" +
    "\010\302\015\044\016\041\031\034\032\035\033\037\034" +
    "\047\035\054\036\051\037\052\040\043\001\001\000\026" +
    "\015\044\016\101\031\076\032\077\033\100\034\103\035" +
    "\107\036\104\037\105\040\102\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static Node raiz;
    private Symbol s;

    public void syntax_error(Symbol s){
        this.s=s;
    }

    public Symbol getS(){
        return this.s;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Syntax$actions {
  private final Syntax parser;

  /** Constructor */
  CUP$Syntax$actions(Syntax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action_part00000000(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntax$result;

      /* select the action based on the action number */
      switch (CUP$Syntax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = start_val;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntax$parser.done_parsing();
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= CONTENIDO 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
        Syntax.raiz=(Node)c;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CONTENIDO ::= Module Id Newline PROCEDIMIENTO_ST End Module 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		 Node Contenido = new Node("Contenido");
                            Contenido.addNode(new Node("Id", ((String) i)));
                            Contenido.addNode(p);
                            RESULT=Contenido;
     
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONTENIDO",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CONTENIDO ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONTENIDO",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PROCEDIMIENTO_ST ::= PROCEDIMIENTO Newline PROCEDIMIENTO_ST 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object p2 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Procedimientos = new Node("Procedimientos");
                            Procedimientos.addNode(p1);
                            Procedimientos.addNode(p2);
                            RESULT=Procedimientos;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PROCEDIMIENTO_ST",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PROCEDIMIENTO_ST ::= PROCEDIMIENTO Newline 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
    Node Procedimientos = new Node("Procedimientos");
                            Procedimientos.addNode(p1);
                            RESULT=Procedimientos;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PROCEDIMIENTO_ST",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PROCEDIMIENTO ::= FUNCTION 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Procedimiento = new Node("Procedimiento");
                            Procedimiento.addNode(f);
                            RESULT=Procedimiento;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PROCEDIMIENTO",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // PROCEDIMIENTO ::= SUB 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Procedimiento = new Node("Procedimiento");
                            Procedimiento.addNode(s);
                            RESULT=Procedimiento;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PROCEDIMIENTO",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // PROCEDIMIENTO ::= STRUCTURE 
            {
              Object RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Procedimiento = new Node("Procedimiento");
                            Procedimiento.addNode(st);
                            RESULT=Procedimiento;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PROCEDIMIENTO",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FUNCTION ::= Function Id Parizq PARAMS Parder As VAR_TIPOS Newline BODY End Function 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		
    Node Function = new Node("Function");
                            Function.addNode(new Node("Id", ((String) i)));
                            Function.addNode(p1);
                            Function.addNode(v);
                            Function.addNode(b);
                            RESULT=Function;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FUNCTION",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FUNCTION ::= Function Id Parizq Parder As VAR_TIPOS Newline BODY End Function 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		
    Node Function = new Node("Function");
                            Function.addNode(new Node("Id", ((String) i)));
                            Function.addNode(v);
                            Function.addNode(b);
                            RESULT=Function;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FUNCTION",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SUB ::= Sub Id Parizq PARAMS Parder Newline BODY End Sub 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		
    Node Sub = new Node("Sub");
                            Sub.addNode(new Node("Id", ((String) i)));
                            Sub.addNode(p1);
                            Sub.addNode(b);
                            RESULT=Sub;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SUB",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SUB ::= Sub Id Parizq Parder Newline BODY End Sub 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		
    Node Sub = new Node("Sub");
                            Sub.addNode(new Node("Id", ((String) i)));
                            Sub.addNode(b);
                            RESULT=Sub;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SUB",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // STRUCTURE ::= Structure Id Newline STRUCT_BODY End Structure 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int sbleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sbright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object sb = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		
    Node Procedimiento = new Node("Structure");
                            Procedimiento.addNode(new Node("Id", ((String) i)));
                            Procedimiento.addNode(sb);
                            RESULT=Procedimiento;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("STRUCTURE",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VAR_TIPOS ::= TypeBoolean 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Tipo=new Node("Boolean", ((String) t) );
                             RESULT=Tipo;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VAR_TIPOS",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VAR_TIPOS ::= TypeInteger 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Tipo = new Node("Integer", ((String) t) );
                            RESULT=Tipo;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VAR_TIPOS",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VAR_TIPOS ::= TypeString 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Tipo = new Node("String", ((String) t) );
                            RESULT=Tipo;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("VAR_TIPOS",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // PARAMS ::= ByVal Id As VAR_TIPOS 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Parametros = new Node("Param");
                            Parametros.addNode(new Node("Id", ((String) i)));
                            Parametros.addNode(v);
                            RESULT=Parametros;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMS",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PARAMS ::= ByVal Id As VAR_TIPOS M_PARAMS 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Parametro = new Node("Param");
                            Parametro.addNode(new Node("Id", ((String) i)));
                            Parametro.addNode(v);
                            Parametro.addNode(m);
                            RESULT=Parametro;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMS",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // M_PARAMS ::= Coma ByVal Id As VAR_TIPOS Coma PARAMS 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Parametros = new Node("Param");
                            Parametros.addNode(new Node("Id", ((String) i)));
                            Parametros.addNode(v);
                            Parametros.addNode(p);
                            RESULT=Parametros;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("M_PARAMS",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // M_PARAMS ::= Coma ByVal Id As VAR_TIPOS 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Parametros = new Node("Param");
                            Parametros.addNode(new Node("Id", ((String) i)));
                            Parametros.addNode(v);
                            RESULT=Parametros;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("M_PARAMS",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // BODY ::= BODY DIM 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Body = new Node("Code");
                            Body.addNode(b);
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // BODY ::= DIM 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Body = new Node("Code");
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // BODY ::= BODY FOR 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Body = new Node("Code");
                            Body.addNode(b);
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // BODY ::= FOR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Body = new Node("Code");
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // BODY ::= BODY FOR_STEP 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Body = new Node("Code");
                            Body.addNode(b);
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // BODY ::= FOR_STEP 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Body = new Node("Code");
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // BODY ::= BODY IF 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Body = new Node("Code");
                            Body.addNode(b);
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // BODY ::= IF 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Body = new Node("Code");
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // BODY ::= BODY DO_WHILE 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Body = new Node("Code");
                            Body.addNode(b);
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // BODY ::= DO_WHILE 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Body = new Node("Code");
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // BODY ::= BODY WRITE 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Body = new Node("Code");
                            Body.addNode(b);
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // BODY ::= WRITE 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Body = new Node("Code");
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // BODY ::= BODY DIM_READ 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Body = new Node("Code");
                            Body.addNode(b);
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // BODY ::= DIM_READ 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Body = new Node("Code");
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // BODY ::= BODY CONCATENAR 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Body = new Node("Code");
                            Body.addNode(b);
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // BODY ::= CONCATENAR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Body = new Node("Code");
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // BODY ::= BODY ASIG_VAR 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Body = new Node("Code");
                            Body.addNode(b);
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // BODY ::= ASIG_VAR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Body = new Node("Code");
                            Body.addNode(c);
                            RESULT=Body;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BODY",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DIM ::= Dim Id As VAR_TIPOS Newline 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
    Node Body1 = new Node("Dim");
                            Body1.addNode(new Node("Id", ((String) i)));
                            Body1.addNode(v);
                            RESULT=Body1;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DIM",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FOR ::= For Id Igual Num To Num Newline BODY Next Newline 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object b1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		
    Node Body2 = new Node("For");
                            Body2.addNode(new Node("Id", ((String) i)));
                            Body2.addNode(new Node("Igual", ((String) s)));
                            Body2.addNode(new Node("Integer", ((String) n1)));
                            Body2.addNode(new Node("Integer", ((String) n2)));
                            Body2.addNode(b1);
                            RESULT=Body2;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FOR",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FOR_STEP ::= For Id Igual Num To Num Step Num Newline BODY Next Newline 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object b1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		
    Node Body3 = new Node("For-step");
                            Body3.addNode(new Node("Id", ((String) i)));
                            Body3.addNode(new Node("Igual", ((String) s)));
                            Body3.addNode(new Node("Integer", ((String) n1)));
                            Body3.addNode(new Node("Integer", ((String) n2)));
                            Body3.addNode(new Node("Integer", ((String) n3)));
                            Body3.addNode(b1);
                            RESULT=Body3;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FOR_STEP",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-11)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // IF ::= If CONDICION Then Newline BODY ELSE EndIf Newline 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object b1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		
    Node Body4 = new Node("If");
                            Body4.addNode(c);
                            Body4.addNode(b1);
                            Body4.addNode(e);
                            RESULT=Body4;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("IF",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // IF ::= If CONDICION Then Newline BODY EndIf Newline 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object b1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		
    Node Body4 = new Node("If");
                            Body4.addNode(c);
                            Body4.addNode(b1);
                            RESULT=Body4;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("IF",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ELSE ::= Else Newline BODY 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Else = new Node("If-Body");
                            Else.addNode(b);
                            RESULT=Else;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ELSE",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ELSE ::= ElseIf CONDICION Then Newline BODY 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Else = new Node("If-Body");
                            Else.addNode(c);
                            Else.addNode(b);
                            RESULT=Else;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ELSE",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DO_WHILE ::= Do While CONDICION Newline BODY Loop Newline 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object b1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		
    Node Body5 = new Node("Do-While");
                            Body5.addNode(c);
                            Body5.addNode(b1);
                            RESULT=Body5;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DIM_READ ::= Dim Id As VAR_TIPOS Igual Read Parizq Parder Newline 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		
    Node Body6 = new Node("Dim-read");
                            Body6.addNode(new Node("Id", ((String) i)));
                            Body6.addNode(v);
                            Body6.addNode(new Node("Igual", ((String) s)));
                            RESULT=Body6;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DIM_READ",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // WRITE ::= Write Parizq Num Parder Newline 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		
    Node Body7 = new Node("Write");
                            Body7.addNode(new Node("Integer", ((String) n1)));
                            RESULT=Body7;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("WRITE",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // WRITE ::= Write Parizq Id Parder Newline 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		
    Node Body7 = new Node("Write");
                            Body7.addNode(new Node("Id", ((String) i)));
                            RESULT=Body7;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("WRITE",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CONCATENAR ::= CONCAT Newline 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
    Node Body8 = new Node("Concat");
                            Body8.addNode(c);
                            RESULT=Body8;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONCATENAR",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ASIGN ::= ASIG_VAR Newline 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
    Node Body9 = new Node("Asignar");
                            Body9.addNode(c);
                            RESULT=Body9;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIGN",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // STRUCT_BODY ::= Id As VAR_TIPOS Newline 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
    Node SBody = new Node("Struct-body");
                            SBody.addNode(new Node("Id", ((String) i)));
                            SBody.addNode(v);
                            RESULT=SBody;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("STRUCT_BODY",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // STRUCT_BODY ::= Id As VAR_TIPOS Newline STRUCT_BODY 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int sbleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sbright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object sb = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node SBody = new Node("Struct-body");
                            SBody.addNode(new Node("Id", ((String) i)));
                            SBody.addNode(v);
                            SBody.addNode(sb);
                            RESULT=SBody;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("STRUCT_BODY",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CONDICION ::= Z OpRel Z 
            {
              Object RESULT =null;
		int z1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int z1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object z1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int z2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int z2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object z2 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Condicion = new Node("Condicion");
                            Condicion.addNode(z1);
                            Condicion.addNode(new Node("OP_RELA", ((String) o)));
                            Condicion.addNode(z2);
                            RESULT=Condicion;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CONDICION ::= Y 
            {
              Object RESULT =null;
		int yleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Condicion = new Node("Condicion");
                            Condicion.addNode(y);
                            RESULT=Condicion;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDICION",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Y ::= Z OpRel2 Z 
            {
              Object RESULT =null;
		int z1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int z1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object z1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int z2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int z2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object z2 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Condicion2 = new Node("Condicion-I");
                            Condicion2.addNode(z1);
                            Condicion2.addNode(new Node("OP_RELA", ((String) o)));
                            Condicion2.addNode(z2);
                            RESULT=Condicion2;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Y",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Z ::= Num 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Valor=new Node("Integer", ((String) n) );
                           RESULT=Valor;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Z",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Z ::= Id 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Valor=new Node("Id", ((String) n) );
                           RESULT=Valor;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Z",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OP_AR ::= OP_AR SumaResta T 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Operacion = new Node("Operacion");
                            Operacion.addNode(o);
                            Operacion.addNode(new Node("SumaResta", ((String) s)));
                            Operacion.addNode(t);
                            RESULT=Operacion;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OP_AR",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OP_AR ::= T 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Operacion = new Node("Operacion");
                            Operacion.addNode(t);
                            RESULT=Operacion;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OP_AR",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // T ::= T MultDiv F 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Oper2 = new Node("MultDiv");
                            Oper2.addNode(t);
                            Oper2.addNode(new Node("MultDiv", ((String) m)));
                            Oper2.addNode(f);
                            RESULT=Oper2;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("T",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // T ::= F 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Oper2 = new Node("Valor");
                            Oper2.addNode(f);
                            RESULT=Oper2;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("T",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // F ::= Num 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Valor=new Node("Integer", ((String) n) );
                           RESULT=Valor;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("F",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // F ::= Id 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Valor=new Node("Id", ((String) n) );
                           RESULT=Valor;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("F",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // F ::= Parder OP_AR Parizq 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
    Node Valor=new Node("oper");
                           Valor.addNode(o);
                           RESULT=Valor;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("F",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // IDS ::= Id Coma IDS 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Ids = new Node("Id");
                            Ids.addNode(new Node("Id", ((String) i)));
                            Ids.addNode(id);
                            RESULT=Ids;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("IDS",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // IDS ::= Num Coma IDS 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Ids = new Node("Id");
                            Ids.addNode(new Node("Integer", ((String) n)));
                            Ids.addNode(id);
                            RESULT=Ids;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("IDS",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // IDS ::= Id 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Ids = new Node("Id");
                            Ids.addNode(new Node("Id", ((String) i)));
                            RESULT=Ids;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("IDS",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // IDS ::= Num 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Ids = new Node("Id");
                            Ids.addNode(new Node("Integer", ((String) n)));
                            RESULT=Ids;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("IDS",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CONCAT ::= Id Igual Id SENT_CONCAT 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node Concat = new Node("Concat");
                            Concat.addNode(new Node("Id", ((String) i1)));
                            Concat.addNode(new Node("Igual", ((String) s)));
                            Concat.addNode(new Node("Id", ((String) i2)));
                            Concat.addNode(sc);
                            RESULT=Concat;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONCAT",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SENT_CONCAT ::= Ampersand Id SENT_CONCAT 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node SConcat = new Node("Sent-concat");
                            SConcat.addNode(new Node("Id", ((String) i1)));
                            SConcat.addNode(sc);
                            RESULT=SConcat;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENT_CONCAT",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SENT_CONCAT ::= Ampersand ContString SENT_CONCAT 
            {
              Object RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node SConcat = new Node("Sent-concat");
                            SConcat.addNode(new Node("ContString", ((String) cs)));
                            SConcat.addNode(sc);
                            RESULT=SConcat;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENT_CONCAT",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SENT_CONCAT ::= Ampersand Id 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node SConcat = new Node("Sent-concat");
                            SConcat.addNode(new Node("Id", ((String) i1)));
                            RESULT=SConcat;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENT_CONCAT",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SENT_CONCAT ::= Ampersand ContString 
            {
              Object RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    Node SConcat = new Node("Sent-concat");
                            SConcat.addNode(new Node("ContString", ((String) cs)));
                            RESULT=SConcat;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENT_CONCAT",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ASIG_VAR ::= Id Igual OP_AR Newline 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
    Node AsigVar = new Node("Asignar-var");
                            AsigVar.addNode(new Node("Id", ((String) i)));
                            AsigVar.addNode(new Node("Igual", ((String) s)));
                            AsigVar.addNode(o);
                            RESULT=AsigVar;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIG_VAR",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ASIG_VAR ::= Id Igual Id Parizq Parder Newline 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		
    Node AsigVar = new Node("Asignar-var");
                            AsigVar.addNode(new Node("Id", ((String) i1)));
                            AsigVar.addNode(new Node("Igual", ((String) s)));
                            AsigVar.addNode(new Node("Id", ((String) i2)));
                            RESULT=AsigVar;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIG_VAR",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ASIG_VAR ::= Id Igual Id Parizq IDS Parder Newline 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		
    Node AsigVar = new Node("Asignar-var");
                            AsigVar.addNode(new Node("Id", ((String) i1)));
                            AsigVar.addNode(new Node("Igual", ((String) s)));
                            AsigVar.addNode(new Node("Id", ((String) i2)));
                            AsigVar.addNode(id);
                            RESULT=AsigVar;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASIG_VAR",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Syntax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
              return CUP$Syntax$do_action_part00000000(
                               CUP$Syntax$act_num,
                               CUP$Syntax$parser,
                               CUP$Syntax$stack,
                               CUP$Syntax$top);
    }
}

}
